
Arduino_Template.elf:     file format elf32-littlearm
Arduino_Template.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800b125

Program Header:
0x70000001 off    0x000080c8 vaddr 0x080000c8 paddr 0x080000c8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x0000b82c memsz 0x0000b82c flags r-x
    LOAD off    0x00018000 vaddr 0x20000000 paddr 0x0800b82c align 2**15
         filesz 0x00000280 memsz 0x000003f4 flags rw-
private flags = 5000202: [Version5 EABI] [soft-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   000000c4  08000000  08000000  00008000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eh_frame     00000004  080000c4  080000c4  000080c4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  080000c8  080000c8  000080c8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         0000b75c  080000d0  080000d0  000080d0  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data         00000274  20000000  0800b82c  00018000  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .init_array   00000004  20000274  0800baa0  00018274  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  20000278  0800baa4  00018278  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .jcr          00000004  2000027c  0800baa8  0001827c  2**2  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000174  20000280  0800baac  00018280  2**2  ALLOC
  9 .comment      0000006a  00000000  00000000  00018280  2**0  CONTENTS, READONLY
 10 .ARM.attributes 00000028  00000000  00000000  000182ea  2**0  CONTENTS, READONLY
 11 .debug_aranges 000014e8  00000000  00000000  00018318  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000ffe0  00000000  00000000  00019800  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000334e  00000000  00000000  000297e0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e596  00000000  00000000  0002cb2e  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000045a8  00000000  00000000  0003b0c4  2**2  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0003311d  00000000  00000000  0003f66c  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00007be3  00000000  00000000  00072789  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001270  00000000  00000000  0007a370  2**3  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0000f33f  00000000  00000000  0007b5e0  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .eh_frame	00000000 .eh_frame
080000c8 l    d  .ARM.exidx	00000000 .ARM.exidx
080000d0 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000274 l    d  .init_array	00000000 .init_array
20000278 l    d  .fini_array	00000000 .fini_array
2000027c l    d  .jcr	00000000 .jcr
20000280 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 ./Device/startup_stm32f0xx.o
f108f85f l       *ABS*	00000000 BootRAM
0800b134 l       .text	00000000 LoopCopyDataInit
0800b12c l       .text	00000000 CopyDataInit
0800b148 l       .text	00000000 LoopFillZerobss
0800b142 l       .text	00000000 FillZerobss
0800b15a l       .text	00000000 LoopForever
0800b174 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
080000c4 l     O .eh_frame	00000000 __EH_FRAME_BEGIN__
2000027c l     O .jcr	00000000 __JCR_LIST__
080000d0 l     F .text	00000000 __do_global_dtors_aux
20000280 l       .bss	00000000 completed.7639
20000278 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080000f8 l     F .text	00000000 frame_dummy
20000284 l       .bss	00000000 object.7644
20000274 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 crtstuff.c
080000c4 l     O .eh_frame	00000000 __FRAME_END__
2000027c l     O .jcr	00000000 __JCR_END__
00000000 l    df *ABS*	00000000 c:/stm32f0-discovery_tools/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/lib/armv6-m/crt0.o
00000000 l    df *ABS*	00000000 c:/stm32f0-discovery_tools/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.7.4/armv6-m/crti.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f0_discovery.c
00000000 l    df *ABS*	00000000 stm32f0xx_it.c
00000000 l    df *ABS*	00000000 utilities.c
0800056c l     F .text	000000e0 NVIC_SetPriority
0800064c l     F .text	0000004c SysTick_Config
08000884 l     F .text	0000005c Init_LED
080008e0 l     F .text	00000046 Init_CS
08000928 l     F .text	00000048 Init_RESET
08000970 l     F .text	00000022 staticDelay
00000000 l    df *ABS*	00000000 stm32f0xx_adc.c
00000000 l    df *ABS*	00000000 stm32f0xx_cec.c
00000000 l    df *ABS*	00000000 stm32f0xx_comp.c
00000000 l    df *ABS*	00000000 stm32f0xx_crc.c
00000000 l    df *ABS*	00000000 stm32f0xx_dac.c
00000000 l    df *ABS*	00000000 stm32f0xx_dbgmcu.c
00000000 l    df *ABS*	00000000 stm32f0xx_dma.c
00000000 l    df *ABS*	00000000 stm32f0xx_exti.c
00000000 l    df *ABS*	00000000 stm32f0xx_flash.c
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_i2c.c
00000000 l    df *ABS*	00000000 stm32f0xx_iwdg.c
00000000 l    df *ABS*	00000000 stm32f0xx_misc.c
00000000 l    df *ABS*	00000000 stm32f0xx_pwr.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
20000014 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f0xx_rtc.c
08005d0c l     F .text	00000046 RTC_Bcd2ToByte
08005cbc l     F .text	00000050 RTC_ByteToBcd2
00000000 l    df *ABS*	00000000 stm32f0xx_spi.c
00000000 l    df *ABS*	00000000 stm32f0xx_syscfg.c
00000000 l    df *ABS*	00000000 stm32f0xx_tim.c
08008914 l     F .text	000000c6 TI1_Config
080089dc l     F .text	000000f0 TI2_Config
08008acc l     F .text	000000e8 TI3_Config
08008bb4 l     F .text	000000f8 TI4_Config
00000000 l    df *ABS*	00000000 stm32f0xx_usart.c
00000000 l    df *ABS*	00000000 stm32f0xx_wwdg.c
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
08009b68 l     F .text	000000e0 SetSysClock
00000000 l    df *ABS*	00000000 gpio.c
20000038 l     O .data	00000108 ArduinoPort
200002a0 l     O .bss	00000008 GPIO_InitStructure
200002a8 l     O .bss	00000008 EXTI_InitStructure
200002b0 l     O .bss	00000003 NVIC_InitStructure
200002b4 l     O .bss	0000000c TIM_TimeBaseStructure
200002c0 l     O .bss	00000014 TIM_OCInitStructure
200002d4 l     O .bss	00000018 ADC_InitStructure
08009c48 l     F .text	000007a8 pinConfig
00000000 l    df *ABS*	00000000 serial.c
200002ec l     O .bss	00000100 rcv_buff
20000164 l     O .data	00000004 pt_rcv_read
20000168 l     O .data	00000004 pt_rcv_write
200003ec l     O .bss	00000002 nb_rcv_buff_char
200003ee l     O .bss	00000002 rcv_buff_overload
200003f0 l     O .bss	00000001 rcv_buff_full
2000016c l     O .data	00000004 USARTx
0800aa50 l     F .text	00000074 UART2_Init
0800ac9c l     F .text	0000006c GPIO_Configuration_USART2
0800ad08 l     F .text	00000026 NVIC_Configuration
00000000 l    df *ABS*	00000000 spi.c
0800adf4 l     F .text	00000108 SPI_Arduino_Init
0800b04c l     F .text	000000d6 GPIO_Configuration_SPI
00000000 l    df *ABS*	00000000 _udivsi3.o
080001bc l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 impure.c
20000180 l     O .data	000000f0 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 c:/stm32f0-discovery_tools/gcc-arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.7.4/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
08003eec g     F .text	00000038 PWR_EnterSTANDBYMode
080028cc g     F .text	0000008c FLASH_OB_VDDAConfig
08006b40 g     F .text	0000002e TIM_TimeBaseStructInit
0800aac4 g     F .text	00000044 putchar
0800132c g     F .text	00000038 CEC_Cmd
080002b4 g     F .text	00000078 STM_EVAL_LEDInit
080093f4 g     F .text	0000003c USART_SetGuardTime
0800960c g     F .text	00000030 USART_SetDEDeassertionTime
08006730 g     F .text	00000040 SYSCFG_DeInit
080040cc g     F .text	00000038 RCC_HSICmd
08007664 g     F .text	0000005c TIM_ForcedOC2Config
080041e8 g     F .text	0000002c RCC_LSEDriveConfig
08002244 g     F .text	0000002c FLASH_Unlock
08005598 g     F .text	00000050 RTC_CalibOutputCmd
08008ff4 g     F .text	0000003c USART_MSBFirstCmd
08004280 g     F .text	00000040 RCC_PLLCmd
08003e58 g     F .text	00000030 PWR_EnterSleepMode
08000f94 g     F .text	0000003c ADC_ContinuousModeCmd
080075c8 g     F .text	00000016 TIM_SetCompare2
08001e34 g     F .text	0000003c DMA_Cmd
08004804 g     F .text	0000003c RCC_AHBPeriphResetCmd
08005890 g     F .text	0000003c RTC_TamperCmd
0800aa1c g     F .text	00000034 getPinDef
080068cc g     F .text	00000040 SYSCFG_GetFlagStatus
08003058 g     F .text	0000009a GPIO_PinAFConfig
08006358 g     F .text	0000002a SPI_SendData8
08007f34 g     F .text	0000003e TIM_SelectCOM
08004fa4 g     F .text	00000134 RTC_SetDate
080049f8 g     F .text	00000020 RCC_ClearITPendingBit
0800177c g     F .text	00000034 CRC_ReverseInputDataSelect
08002f74 g     F .text	00000048 GPIO_ReadOutputDataBit
080094a8 g     F .text	00000034 USART_SetAutoRetryCount
08007e6c g     F .text	00000062 TIM_CCxCmd
08008238 g     F .text	00000040 TIM_SetIC4Prescaler
08001f34 g     F .text	00000040 DMA_GetITStatus
08000ad8 g     F .text	00000148 PWM_Config
08007770 g     F .text	0000003e TIM_CCPreloadControl
0800b174  w    F .text	00000002 TIM1_CC_IRQHandler
080039e4 g     F .text	00000016 I2C_ReceiveData
08000534 g     F .text	00000006 HardFault_Handler
0800236c g     F .text	000000b0 FLASH_ProgramWord
080003d0 g     F .text	00000120 STM_EVAL_PBInit
08001894 g     F .text	00000014 CRC_GetIDRegister
0800b174  w    F .text	00000002 ADC1_COMP_IRQHandler
08001048 g     F .text	00000060 ADC_GetCalibrationFactor
080010f8 g     F .text	0000003a ADC_DMACmd
08005bd4 g     F .text	00000030 RTC_ClearFlag
08001820 g     F .text	00000040 CRC_CalcBlockCRC
080077b0 g     F .text	00000052 TIM_OC1PreloadConfig
0800054c g     F .text	00000020 SysTick_Handler
08005538 g     F .text	00000018 RTC_GetStoreOperation
08004334 g     F .text	00000020 RCC_MCOConfig
08002494 g     F .text	0000002c FLASH_OB_Unlock
08003c2c g     F .text	000000ac NVIC_Init
080033b0 g     F .text	00000050 I2C_OwnAddress2Config
0800b174  w    F .text	00000002 PVD_IRQHandler
080010a8 g     F .text	0000001a ADC_StopOfConversion
0800169c g     F .text	0000003c COMP_GetOutputLevel
08001210 g     F .text	00000050 ADC_GetITStatus
0800100c g     F .text	0000003c ADC_OverrunModeCmd
0800612c g     F .text	0000003e SPI_TIModeCmd
08001718 g     F .text	00000028 COMP_LockConfig
08004460 g     F .text	0000002c RCC_CECCLKConfig
0800b82c g       .text	00000000 _sidata
08000544 g     F .text	00000008 PendSV_Handler
08005d54 g     F .text	00000058 SPI_I2S_DeInit
0800052c g     F .text	00000008 NMI_Handler
08001988 g     F .text	00000050 DAC_SoftwareTriggerCmd
200003f4 g       .bss	00000000 __exidx_end
080064c0 g     F .text	00000016 SPI_GetCRCPolynomial
080085fc g     F .text	0000004c TIM_ETRClockMode2Config
0800b174  w    F .text	00000002 I2C1_IRQHandler
080048b8 g     F .text	00000050 RCC_ITConfig
08007c1c g     F .text	00000052 TIM_OC1NPolarityConfig
08008f44 g     F .text	00000038 USART_DirectionModeCmd
08007610 g     F .text	00000052 TIM_ForcedOC1Config
08001874 g     F .text	00000020 CRC_SetIDRegister
08005994 g     F .text	00000040 RTC_TamperPullUpCmd
0800241c g     F .text	00000078 FLASH_ProgramHalfWord
0800840c g     F .text	00000048 TIM_DMACmd
08002958 g     F .text	0000008c FLASH_OB_SRAMParityConfig
08008564 g     F .text	00000096 TIM_ETRClockMode1Config
08006244 g     F .text	00000048 SPI_BiDirectionalLineConfig
080014e0 g     F .text	00000018 CEC_ClearFlag
08008200 g     F .text	00000036 TIM_SetIC3Prescaler
08009430 g     F .text	0000003a USART_SmartCardCmd
08009798 g     F .text	0000003c USART_GetFlagStatus
08007b1c g     F .text	00000052 TIM_ClearOC3Ref
0800911c g     F .text	00000028 USART_SetReceiverTimeOut
0800b82c g       .text	00000000 _etext
080026c4 g     F .text	000000dc FLASH_OB_RDPConfig
20000280 g       .bss	00000000 _sbss
08001198 g     F .text	00000060 ADC_GetFlagStatus
08004354 g     F .text	00000034 RCC_SYSCLKConfig
08001d6c g     F .text	00000078 DMA_Init
080038c8 g     F .text	00000044 I2C_TimeoutBConfig
08002288 g     F .text	0000007c FLASH_ErasePage
080092f8 g     F .text	0000002c USART_MuteModeWakeUpConfig
0800a454 g     F .text	000000d0 digitalRead
08001f8c g     F .text	00000034 EXTI_DeInit
08004030 g     F .text	00000060 RCC_WaitForHSEStartUp
08000270 g     F .text	00000030 loop
080027a0 g     F .text	000000a0 FLASH_OB_UserConfig
0800928c g     F .text	00000030 USART_SetAddress
08001e8c g     F .text	00000016 DMA_GetCurrDataCounter
0800343c g     F .text	0000003c I2C_SlaveByteControlCmd
08009220 g     F .text	0000002c USART_AutoBaudRateConfig
08009144 g     F .text	00000038 USART_SetPrescaler
2000000c g     O .data	00000004 BUTTON_PORT
08002af4 g     F .text	00000018 FLASH_OB_GetUser
08004710 g     F .text	00000040 RCC_BackupResetCmd
08008fb8 g     F .text	0000003c USART_OneBitMethodCmd
08001800 g     F .text	00000020 CRC_CalcCRC
08001364 g     F .text	0000003c CEC_ListenModeCmd
08003b78 g     F .text	00000020 IWDG_SetReload
080032c4 g     F .text	00000038 I2C_ITConfig
08006e40 g     F .text	0000004c TIM_CtrlPWMOutputs
08000ce0 g     F .text	00000036 ADC_Cmd
08002b94 g     F .text	00000040 FLASH_GetFlagStatus
08001bcc g     F .text	00000014 DBGMCU_GetREVID
08000e2c g     F .text	00000034 ADC_AnalogWatchdogSingleChannelConfig
080063dc g     F .text	0000003c SPI_CRCLengthConfig
08002210 g     F .text	00000034 FLASH_GetPrefetchBufferStatus
080099f8 g     F .text	00000014 WWDG_ClearFlag
080042f4 g     F .text	00000040 RCC_ClockSecuritySystemCmd
08004998 g     F .text	0000001c RCC_ClearFlag
0800b6f4 g     O .text	00000004 BUTTON_CLK
08006d7c g     F .text	0000003e TIM_Cmd
08003660 g     F .text	0000003c I2C_10BitAddressHeaderCmd
08000698 g     F .text	00000168 DISCOVERY_Configuration
080078b4 g     F .text	0000005c TIM_OC4PreloadConfig
00000000  w      *UND*	00000000 __fini_array_end
20000024 g     O .data	00000004 SystemCoreClock
08001260 g     F .text	00000016 ADC_ClearITPendingBit
0800ab08 g     F .text	00000030 begin_fcn
08002304 g     F .text	00000068 FLASH_EraseAllPages
0800a7cc g     F .text	000000f8 analogWrite
08002b0c g     F .text	00000014 FLASH_OB_GetWRP
08005720 g     F .text	00000120 RTC_GetTimeStamp
0800aefc g     F .text	0000003c begin_spi_fcn
08009270 g     F .text	0000001c USART_ReceiveData
0800a418 g     F .text	0000003c pinSetMode
0800400c g     F .text	00000024 RCC_HSEConfig
00000000  w      *UND*	00000000 malloc
080001b8 g     F .text	00000088 __udivsi3
08008324 g     F .text	00000020 TIM_ClearFlag
080037a0 g     F .text	0000003c I2C_SMBusAlertCmd
080013a0 g     F .text	00000038 CEC_OwnAddressConfig
08006418 g     F .text	00000044 SPI_CalculateCRC
080083c4 g     F .text	00000020 TIM_ClearITPendingBit
08001e70 g     F .text	0000001c DMA_SetCurrDataCounter
08006c1c g     F .text	00000014 TIM_GetCounter
08006660 g     F .text	00000020 SPI_I2S_ClearFlag
0800478c g     F .text	0000003c RCC_APB2PeriphClockCmd
080039fc g     F .text	00000038 I2C_DMACmd
08008160 g     F .text	00000014 TIM_GetCapture3
08004f80 g     F .text	00000024 RTC_GetSubSecond
080013ec g     F .text	00000020 CEC_SendData
08002d68 g     F .text	00000136 GPIO_Init
0800424c g     F .text	00000034 RCC_PLLConfig
20000280 g       .bss	00000000 __bss_start__
08004410 g     F .text	00000050 RCC_ADCCLKConfig
20000000 g     O .data	00000000 .hidden __dso_handle
080054cc g     F .text	00000024 RTC_GetAlarmSubSecond
080024c0 g     F .text	0000001c FLASH_OB_Lock
0800b6e4 g     O .text	00000004 GPIO_PIN
20000000 g       .data	00000000 _sdata
0800b174  w    F .text	00000002 SPI1_IRQHandler
08008f08 g     F .text	0000003a USART_Cmd
08000dc8 g     F .text	0000003c ADC_AnalogWatchdogCmd
08008138 g     F .text	00000014 TIM_GetCapture1
08007e34 g     F .text	00000036 TIM_SelectOCREFClear
080014f8 g     F .text	0000005c CEC_GetITStatus
08009538 g     F .text	0000003a USART_IrDACmd
08003d1c g     F .text	00000034 SysTick_CLKSourceConfig
08005628 g     F .text	00000094 RTC_SmoothCalibConfig
080025d0 g     F .text	000000f4 FLASH_OB_EnableWRP
0800303c g     F .text	0000001c GPIO_Write
08000d8c g     F .text	0000003c ADC_WaitModeCmd
0800b174  w    F .text	00000002 TIM6_DAC_IRQHandler
0800a524 g     F .text	000000fc digitalWrite
08004d90 g     F .text	00000128 RTC_SetTime
08002fbc g     F .text	00000016 GPIO_ReadOutputData
080071d4 g     F .text	000001a8 TIM_OC3Init
0800548c g     F .text	00000040 RTC_AlarmSubSecondConfig
080041b0 g     F .text	00000038 RCC_LSEConfig
0800390c g     F .text	0000003c I2C_CalculatePEC
080098a0 g     F .text	00000030 USART_ClearITPendingBit
080046d0 g     F .text	00000040 RCC_RTCCLKCmd
08001f74 g     F .text	00000018 DMA_ClearITPendingBit
0800a3f0 g     F .text	00000028 pinMode
08001c70 g     F .text	0000003c DBGMCU_APB2PeriphConfig
0800692c g     F .text	00000124 TIM_DeInit
08004eb8 g     F .text	00000026 RTC_TimeStructInit
080047c8 g     F .text	0000003c RCC_APB1PeriphClockCmd
080049b4 g     F .text	00000044 RCC_GetITStatus
08003e1c g     F .text	0000003c PWR_WakeUpPinCmd
200003f4 g       .bss	00000000 __exidx_start
080034b4 g     F .text	0000003c I2C_10BitAddressingModeCmd
0800b810 g     O .text	00000004 _global_impure_ptr
0800ab4c g     F .text	00000040 flush_fcn
08006680 g     F .text	000000b0 SPI_I2S_GetITStatus
0800b2b0 g     F .text	00000090 __libc_init_array
080082dc g     F .text	00000048 TIM_GetFlagStatus
08004b98 g     F .text	00000080 RTC_EnterInitMode
08006618 g     F .text	00000048 SPI_I2S_GetFlagStatus
08004750 g     F .text	0000003c RCC_AHBPeriphClockCmd
08000130 g     F .text	00000000 _mainCRTStartup
080079c0 g     F .text	00000052 TIM_OC3FastConfig
080039c8 g     F .text	0000001c I2C_SendData
0800b174  w    F .text	00000002 EXTI2_3_IRQHandler
080010e0 g     F .text	00000016 ADC_GetConversionValue
080092bc g     F .text	0000003c USART_MuteModeCmd
08001b20 g     F .text	00000024 DAC_ClearFlag
08008454 g     F .text	0000003e TIM_SelectCCDMA
08002b58 g     F .text	0000003c FLASH_ITConfig
08008f7c g     F .text	0000003c USART_OverSampling8Cmd
0800b814 g     F .text	00000000 _init
08001de4 g     F .text	00000050 DMA_StructInit
0800b174  w    F .text	00000002 I2C2_IRQHandler
08006d40 g     F .text	0000003c TIM_SetClockDivision
0800616c g     F .text	00000044 I2S_Cmd
080058fc g     F .text	00000030 RTC_TamperSamplingFreqConfig
080062d8 g     F .text	0000003e SPI_SSOutputCmd
080061b0 g     F .text	00000058 SPI_DataSizeConfig
08002270 g     F .text	00000018 FLASH_Lock
08003b98 g     F .text	00000018 IWDG_ReloadCounter
08003140 g     F .text	000000d0 I2C_Init
08001edc g     F .text	00000040 DMA_GetFlagStatus
0800b174  w    F .text	00000002 TIM17_IRQHandler
08000848 g     F .text	0000003c delay_10us
08000e04 g     F .text	00000026 ADC_AnalogWatchdogThresholdsConfig
08004abc g     F .text	00000088 RTC_Init
0800218c g     F .text	00000018 EXTI_ClearITPendingBit
0800afe8 g     F .text	00000064 write_spi_fcn
0800ab38 g     F .text	00000014 available_fcn
08003850 g     F .text	0000003c I2C_IdleClockTimeoutCmd
0800ab8c g     F .text	0000006c read_fcn
08003d70 g     F .text	00000040 PWR_BackupAccessCmd
0800b250 g     F .text	00000060 __libc_fini_array
0800b174  w    F .text	00000002 RTC_IRQHandler
200003f4 g       .bss	00000000 _ebss
080097ec g     F .text	000000b2 USART_GetITStatus
080051a8 g     F .text	00000124 RTC_SetAlarm
08001588 g     F .text	00000064 COMP_Init
08006e8c g     F .text	000001a4 TIM_OC1Init
08007860 g     F .text	00000052 TIM_OC3PreloadConfig
0800b124  w    F .text	00000038 Reset_Handler
08002f5c g     F .text	00000016 GPIO_ReadInputData
08006c04 g     F .text	00000016 TIM_SetAutoreload
08009350 g     F .text	0000002c USART_LINBreakDetectLengthConfig
08004c30 g     F .text	00000098 RTC_WaitForSynchro
08004908 g     F .text	00000090 RCC_GetFlagStatus
080017b0 g     F .text	00000038 CRC_ReverseOutputDataCmd
08009324 g     F .text	0000002c USART_AddressDetectionConfig
080067e0 g     F .text	0000003c SYSCFG_I2CFastModePlusConfig
080037dc g     F .text	0000003c I2C_ClockTimeoutCmd
080068ac g     F .text	00000020 SYSCFG_BreakConfig
08001740 g     F .text	00000028 CRC_DeInit
08002fd4 g     F .text	0000001c GPIO_SetBits
080020e0 g     F .text	00000040 EXTI_GetFlagStatus
08004388 g     F .text	0000001c RCC_GetSYSCLKSource
08006cc8 g     F .text	0000003e TIM_ARRPreloadConfig
0800300c g     F .text	00000030 GPIO_WriteBit
080035e8 g     F .text	0000003c I2C_GenerateSTART
00000000  w      *UND*	00000000 __sf_fake_stderr
08003210 g     F .text	0000003a I2C_StructInit
08001b44 g     F .text	00000064 DAC_GetITStatus
00000000  w      *UND*	00000000 __deregister_frame_info
08009978 g     F .text	00000024 WWDG_SetCounter
08004ee0 g     F .text	000000a0 RTC_GetTime
0800b6f0 g     O .text	00000002 BUTTON_PIN
20000140 g     O .data	00000024 Serial
080012f4 g     F .text	00000038 CEC_StructInit
08008344 g     F .text	0000007e TIM_GetITStatus
080016d8 g     F .text	00000040 COMP_WindowCmd
08005a00 g     F .text	0000002c RTC_ReadBackupRegister
080044e4 g     F .text	000001cc RCC_GetClocksFreq
080021d8 g     F .text	00000038 FLASH_PrefetchBufferCmd
0800b174  w    F .text	00000002 TIM16_IRQHandler
080054f0 g     F .text	00000048 RTC_DayLightSavingConfig
080074f0 g     F .text	000000c0 TIM_SelectOCxM
080020c0 g     F .text	00000020 EXTI_GenerateSWInterrupt
08008d04 g     F .text	00000160 USART_Init
200003f4 g       .bss	00000000 __bss_end__
20000004 g     O .data	00000008 GPIO_PORT
080088f4 g     F .text	0000001e TIM_RemapConfig
0800b174  w    F .text	00000002 TIM3_IRQHandler
0800b174  w    F .text	00000002 EXTI4_15_IRQHandler
0800b174  w    F .text	00000002 RCC_IRQHandler
0800b458 g     F .text	0000028c __call_exitprocs
20000280 g       .bss	00000000 _bss
0800b174  w    F .text	00000002 DMA1_Channel1_IRQHandler
08009574 g     F .text	0000003c USART_DECmd
08007910 g     F .text	00000052 TIM_OC1FastConfig
08001420 g     F .text	00000018 CEC_StartOfMessage
08001c34 g     F .text	0000003c DBGMCU_APB1PeriphConfig
08003b38 g     F .text	00000020 IWDG_WriteAccessCmd
0800b174 g       .text	00000002 Default_Handler
08000130 g     F .text	00000000 _start
08003740 g     F .text	00000060 I2C_TransferHandling
08002bec g     F .text	00000058 FLASH_GetStatus
20000028 g     O .data	00000010 AHBPrescTable
08003818 g     F .text	00000038 I2C_ExtendedClockTimeoutCmd
080093b8 g     F .text	0000003a USART_HalfDuplexCmd
08002120 g     F .text	00000018 EXTI_ClearFlag
08001bf8 g     F .text	0000003c DBGMCU_Config
08003a34 g     F .text	0000004a I2C_GetFlagStatus
08002bd4 g     F .text	00000018 FLASH_ClearFlag
08002c44 g     F .text	0000005c FLASH_WaitForLastOperation
080013d8 g     F .text	00000014 CEC_OwnAddressClear
08006520 g     F .text	0000003c SPI_LastDMATransferCmd
08007804 g     F .text	0000005c TIM_OC2PreloadConfig
080046b0 g     F .text	00000020 RCC_RTCCLKConfig
08008648 g     F .text	00000052 TIM_SelectInputTrigger
08006318 g     F .text	0000003e SPI_NSSPulseModeCmd
0800b174  w    F .text	00000002 CEC_IRQHandler
08004b44 g     F .text	00000020 RTC_StructInit
0800035c g     F .text	00000030 STM_EVAL_LEDOff
08004140 g     F .text	00000038 RCC_HSI14Cmd
08008278 g     F .text	00000048 TIM_ITConfig
0800b178 g     F .text	000000b8 __register_exitproc
08005100 g     F .text	000000a8 RTC_GetDate
08007030 g     F .text	000001a4 TIM_OC2Init
0800b174  w    F .text	00000002 TIM14_IRQHandler
08003bd0 g     F .text	00000018 IWDG_Enable
2000029c g     O .bss	00000004 G_tickValue
080096a0 g     F .text	00000084 USART_ITConfig
080017e8 g     F .text	00000018 CRC_SetInitRegister
0800b174  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
08001fc0 g     F .text	000000d8 EXTI_Init
08000a30 g     F .text	0000009c INT2_EXTI_Config
08001860 g     F .text	00000014 CRC_GetCRC
080018a8 g     F .text	00000020 DAC_DeInit
080019d8 g     F .text	00000034 DAC_SetChannel1Data
0800592c g     F .text	00000030 RTC_TamperPinsPrechargeDuration
08009030 g     F .text	0000003c USART_DataInvCmd
08006b70 g     F .text	00000026 TIM_PrescalerConfig
08005304 g     F .text	000000d8 RTC_GetAlarm
00000000  w      *UND*	00000000 software_init_hook
0800628c g     F .text	0000004c SPI_NSSInternalSoftwareConfig
080030f4 g     F .text	0000004c I2C_DeInit
08005a2c g     F .text	00000030 RTC_OutputTypeConfig
0800324c g     F .text	0000003a I2C_Cmd
08005c04 g     F .text	00000080 RTC_GetITStatus
080090a4 g     F .text	0000003c USART_SWAPPinCmd
08002ff0 g     F .text	0000001c GPIO_ResetBits
08007dd8 g     F .text	0000005c TIM_OC4PolarityConfig
0800869c g     F .text	00000036 TIM_SelectOutputTrigger
08003a80 g     F .text	00000016 I2C_ClearFlag
0800645c g     F .text	00000020 SPI_TransmitCRC
08003bb0 g     F .text	00000020 IWDG_SetWindowValue
08002a70 g     F .text	00000084 FLASH_ProgramOptionByteData
080098f0 g     F .text	00000034 WWDG_SetPrescaler
0800950c g     F .text	0000002c USART_IrDAConfig
20000170 g     O .data	00000010 SPI
080075e0 g     F .text	00000016 TIM_SetCompare3
080015ec g     F .text	0000002c COMP_StructInit
080029e4 g     F .text	0000008c FLASH_OB_WriteUser
08003338 g     F .text	0000003c I2C_StopModeCmd
0800737c g     F .text	00000134 TIM_OC4Init
0800b174  w    F .text	00000002 TIM15_IRQHandler
0800b174  w    F .text	00000002 EXTI0_1_IRQHandler
0800917c g     F .text	0000003a USART_STOPModeCmd
0800b6e8 g     O .text	00000008 GPIO_CLK
08001ad8 g     F .text	00000048 DAC_GetFlagStatus
080095b0 g     F .text	0000002c USART_DEPolarityConfig
08005854 g     F .text	0000003c RTC_TamperTriggerConfig
080088b4 g     F .text	0000003e TIM_SelectHallSensor
08000254  w    F .text	00000002 __aeabi_ldiv0
0800995c g     F .text	0000001c WWDG_EnableIT
08004178 g     F .text	00000038 RCC_HSI14ADCRequestCmd
080024dc g     F .text	0000001c FLASH_OB_Launch
0800140c g     F .text	00000014 CEC_ReceiveData
0800976c g     F .text	0000002c USART_OverrunDetectionConfig
08008188 g     F .text	00000036 TIM_SetIC1Prescaler
08008cac g     F .text	00000058 USART_DeInit
08005ef8 g     F .text	00000032 I2S_StructInit
0800352c g     F .text	0000003c I2C_ReloadCmd
00000000  w      *UND*	00000000 __fini_array_start
08009924 g     F .text	00000038 WWDG_SetWindowValue
08002138 g     F .text	00000054 EXTI_GetITStatus
08002b20 g     F .text	00000038 FLASH_OB_GetRDP
08007714 g     F .text	0000005c TIM_ForcedOC4Config
0800b174  w    F .text	00000002 SPI2_IRQHandler
00000000  w      *UND*	00000000 __sf_fake_stdin
08003e88 g     F .text	00000064 PWR_EnterSTOPMode
08004a18 g     F .text	000000a4 RTC_DeInit
080021a4 g     F .text	00000034 FLASH_SetLatency
08006770 g     F .text	00000034 SYSCFG_MemoryRemapConfig
0800b340 g     F .text	00000116 memset
080063c4 g     F .text	00000016 SPI_I2S_ReceiveData16
08004090 g     F .text	0000003c RCC_AdjustHSICalibrationValue
080002a0 g     F .text	00000012 main
08000800 g     F .text	00000048 delay_ms
080036f8 g     F .text	00000048 I2C_GetTransferDirection
08008e98 g     F .text	00000048 USART_ClockInit
080084b4 g     F .text	00000032 TIM_ITRxExternalClockConfig
08005550 g     F .text	00000048 RTC_OutputConfig
08007d20 g     F .text	0000005c TIM_OC3PolarityConfig
080099c4 g     F .text	00000034 WWDG_GetFlagStatus
080001b8 g     F .text	00000000 __aeabi_uidiv
0800053c g     F .text	00000008 SVC_Handler
08000994 g     F .text	0000009c INT1_EXTI_Config
0800ac78 g     F .text	00000022 println_fcn
080064d8 g     F .text	00000048 SPI_I2S_DMACmd
00000000  w      *UND*	00000000 __init_array_end
08001134 g     F .text	0000002c ADC_DMARequestModeConfig
08000d18 g     F .text	00000038 ADC_JitterCmd
08008494 g     F .text	0000001e TIM_InternalClockConfig
08007bc8 g     F .text	00000052 TIM_OC1PolarityConfig
08007964 g     F .text	0000005c TIM_OC2FastConfig
080050d8 g     F .text	00000026 RTC_DateStructInit
00000000  w      *UND*	00000000 hardware_init_hook
0800b700 g     O .text	00000002 BUTTON_PIN_SOURCE
08002098 g     F .text	00000026 EXTI_StructInit
08000f1c g     F .text	00000040 ADC_VbatCmd
0800af38 g     F .text	000000b0 read_spi_fcn
08003be8 g     F .text	00000044 IWDG_GetFlagStatus
08006bec g     F .text	00000016 TIM_SetCounter
08000edc g     F .text	00000040 ADC_VrefintCmd
080034f0 g     F .text	0000003c I2C_AutoEndCmd
0800149c g     F .text	00000044 CEC_GetFlagStatus
080075f8 g     F .text	00000016 TIM_SetCompare4
08003400 g     F .text	0000003c I2C_GeneralCallCmd
08000e9c g     F .text	00000040 ADC_TempSensorCmd
0800814c g     F .text	00000014 TIM_GetCapture2
080060ec g     F .text	0000003e SPI_Cmd
080097d4 g     F .text	00000016 USART_ClearFlag
08006c30 g     F .text	00000016 TIM_GetPrescaler
08004c18 g     F .text	00000018 RTC_ExitInitMode
08002840 g     F .text	0000008c FLASH_OB_BOOTConfig
08007ac4 g     F .text	00000056 TIM_ClearOC2Ref
08003288 g     F .text	0000003c I2C_SoftwareResetCmd
08009a0c g     F .text	0000008c SystemInit
08006384 g     F .text	0000001c SPI_I2S_SendData16
08004104 g     F .text	0000003c RCC_AdjustHSI14CalibrationValue
20000010 g     O .data	00000004 delay
08007f74 g     F .text	000000ae TIM_ICInit
08002ca0 g     F .text	000000c8 GPIO_DeInit
08001920 g     F .text	0000001a DAC_StructInit
0800b820 g     F .text	00000000 _fini
080053dc g     F .text	000000b0 RTC_AlarmCmd
0800a8c4 g     F .text	00000158 pwmFrequency
08003948 g     F .text	0000003c I2C_PECRequestCmd
080035ac g     F .text	0000003c I2C_MasterRequestConfig
08003f84 g     F .text	00000088 RCC_DeInit
08003d50 g     F .text	00000020 PWR_DeInit
08008024 g     F .text	0000002c TIM_ICStructInit
08000f5c g     F .text	00000038 ADC_ChannelConfig
08008050 g     F .text	000000e6 TIM_PWMIConfig
080067a4 g     F .text	0000003c SYSCFG_DMAChannelRemapConfig
080052cc g     F .text	00000038 RTC_AlarmStructInit
08001554 g     F .text	00000020 CEC_ClearITPendingBit
08001be0 g     F .text	00000018 DBGMCU_GetDEVID
080091b8 g     F .text	0000002c USART_StopModeWakeUpSourceConfig
08000cac g     F .text	00000032 ADC_StructInit
08001160 g     F .text	00000038 ADC_ITConfig
20000270 g     O .data	00000004 _impure_ptr
080058cc g     F .text	00000030 RTC_TamperFilterConfig
08007cc8 g     F .text	00000056 TIM_OC2NPolarityConfig
08003cd8 g     F .text	00000044 NVIC_SystemLPConfig
0800b174  w    F .text	00000002 TS_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08007a70 g     F .text	00000052 TIM_ClearOC1Ref
080055e8 g     F .text	00000040 RTC_CalibOutputConfig
0800b174  w    F .text	00000002 WWDG_IRQHandler
08001664 g     F .text	00000038 COMP_SwitchCmd
0800ac4c g     F .text	0000002c print_fcn
0800487c g     F .text	0000003c RCC_APB1PeriphResetCmd
080011f8 g     F .text	00000016 ADC_ClearFlag
20000000 g       .data	00000000 _data
080042c0 g     F .text	00000034 RCC_PREDIV1Config
08001618 g     F .text	0000004c COMP_Cmd
08001ea4 g     F .text	00000038 DMA_ITConfig
08000258 g     F .text	00000018 setup
08003a98 g     F .text	00000088 I2C_GetITStatus
080004f0 g     F .text	0000003c STM_EVAL_PBGetState
08001ba8 g     F .text	00000024 DAC_ClearITPendingBit
0800b174  w    F .text	00000002 TIM2_IRQHandler
08006c88 g     F .text	0000003e TIM_UpdateRequestConfig
080076c0 g     F .text	00000052 TIM_ForcedOC3Config
080084e8 g     F .text	0000007c TIM_TIxExternalClockConfig
080032fc g     F .text	0000003c I2C_StretchClockCmd
08002ea0 g     F .text	00000030 GPIO_StructInit
0800b174  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
0800038c g     F .text	00000044 STM_EVAL_LEDToggle
0800b6f8 g     O .text	00000002 BUTTON_EXTI_LINE
08000c20 g     F .text	00000034 ADC_DeInit
080074b0 g     F .text	0000003e TIM_OCStructInit
08006e08 g     F .text	00000038 TIM_BDTRStructInit
08003568 g     F .text	00000044 I2C_NumberOfBytesConfig
08009724 g     F .text	00000046 USART_RequestCmd
08007d7c g     F .text	0000005c TIM_OC3NPolarityConfig
08000c54 g     F .text	00000058 ADC_Init
20002000 g       *ABS*	00000000 _estack
0800924c g     F .text	00000022 USART_SendData
08007ed0 g     F .text	00000062 TIM_CCxNCmd
08001574 g     F .text	00000014 COMP_DeInit
00000000  w      *UND*	00000000 __stack
08001278 g     F .text	00000020 CEC_DeInit
08000240 g     F .text	00000012 __aeabi_uidivmod
08001a3c g     F .text	00000050 DAC_DMACmd
0800870c g     F .text	00000036 TIM_SelectMasterSlaveMode
0800399c g     F .text	0000002c I2C_ReadRegister
0800647c g     F .text	00000042 SPI_GetCRC
20000274 g       .data	00000000 _edata
080059d4 g     F .text	0000002c RTC_WriteBackupRegister
08008174 g     F .text	00000014 TIM_GetCapture4
08001a0c g     F .text	00000030 DAC_GetDataOutputValue
08008e64 g     F .text	00000034 USART_StructInit
080090e0 g     F .text	0000003c USART_ReceiverTimeOutCmd
0800999c g     F .text	00000028 WWDG_Enable
08005a5c g     F .text	000000b0 RTC_SynchroShiftConfig
08006208 g     F .text	0000003c SPI_RxFIFOThresholdConfig
080098d0 g     F .text	00000020 WWDG_DeInit
0800193c g     F .text	0000004c DAC_Cmd
080010c4 g     F .text	0000001a ADC_StartOfConversion
08006a50 g     F .text	000000f0 TIM_TimeBaseInit
08004b64 g     F .text	00000034 RTC_WriteProtectionCmd
08003f24 g     F .text	00000040 PWR_GetFlagStatus
08001298 g     F .text	0000005c CEC_Init
080018c8 g     F .text	00000058 DAC_Init
0800388c g     F .text	0000003a I2C_TimeoutAConfig
0800ad30 g     F .text	000000c4 USART2_IRQHandler
0800681c g     F .text	00000090 SYSCFG_EXTILineConfig
08005b84 g     F .text	00000050 RTC_GetFlagStatus
08000d50 g     F .text	0000003c ADC_AutoPowerOffCmd
0800946c g     F .text	0000003a USART_SmartCardNACKCmd
08001a8c g     F .text	0000004c DAC_ITConfig
080094dc g     F .text	00000030 USART_SetBlockLength
08003db0 g     F .text	00000034 PWR_PVDLevelConfig
0800b230 g     F .text	00000020 exit
08000000 g     O .isr_vector	00000000 g_pfnVectors
08003984 g     F .text	00000016 I2C_GetPEC
08009a98 g     F .text	000000d0 SystemCoreClockUpdate
0800937c g     F .text	0000003c USART_LINCmd
08005c84 g     F .text	00000038 RTC_ClearITPendingBit
080083e4 g     F .text	00000028 TIM_DMAConfig
08000fd0 g     F .text	0000003c ADC_DiscModeCmd
0800655c g     F .text	0000007a SPI_I2S_ITConfig
080044b8 g     F .text	0000002c RCC_USARTCLKConfig
08001768 g     F .text	00000014 CRC_ResetDR
0800906c g     F .text	00000038 USART_InvPinCmd
08000130 g     F .text	00000000 start
00000000  w      *UND*	00000000 __sf_fake_stdout
080082c0 g     F .text	0000001c TIM_GenerateEvent
08003374 g     F .text	0000003c I2C_DualAddressCmd
08005b0c g     F .text	00000078 RTC_ITConfig
08003478 g     F .text	0000003a I2C_SlaveAddressConfig
08005840 g     F .text	00000014 RTC_GetTimeStampSubSecond
08001f1c g     F .text	00000018 DMA_ClearFlag
08001438 g     F .text	00000018 CEC_EndOfMessage
00000000  w      *UND*	00000000 __init_array_start
08000254  w    F .text	00000002 __aeabi_idiv0
08006dbc g     F .text	0000004a TIM_BDTRConfig
0800448c g     F .text	0000002c RCC_I2CCLKConfig
08003b58 g     F .text	00000020 IWDG_SetPrescaler
0800a620 g     F .text	000001ac analogRead
08003f64 g     F .text	00000020 PWR_ClearFlag
080043d8 g     F .text	00000038 RCC_PCLKConfig
0800b6fc g     O .text	00000002 BUTTON_PORT_SOURCE
0800b174  w    F .text	00000002 FLASH_IRQHandler
0800b15a g       .text	00000000 _exit
080065d8 g     F .text	0000001e SPI_GetTransmissionFIFOStatus
08002ed0 g     F .text	00000044 GPIO_PinLockConfig
0800b174  w    F .text	00000002 USART1_IRQHandler
08004214 g     F .text	00000038 RCC_LSICmd
0800369c g     F .text	0000003c I2C_AcknowledgeConfig
080081c0 g     F .text	00000040 TIM_SetIC2Prescaler
08008744 g     F .text	0000007a TIM_ETRConfig
08000e60 g     F .text	0000003c ADC_AnalogWatchdogSingleChannelCmd
08008ee0 g     F .text	00000026 USART_ClockStructInit
08004840 g     F .text	0000003c RCC_APB2PeriphResetCmd
080024f8 g     F .text	000000d8 FLASH_OB_Erase
080086d4 g     F .text	00000036 TIM_SelectSlaveMode
08003624 g     F .text	0000003c I2C_GenerateSTOP
0800595c g     F .text	00000038 RTC_TimeStampOnTamperDetectionCmd
080091e4 g     F .text	0000003c USART_AutoBaudRateCmd
080065f8 g     F .text	0000001e SPI_GetReceptionFIFOStatus
08004cc8 g     F .text	0000007c RTC_RefClockCmd
0800b174  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
08005dac g     F .text	00000046 SPI_StructInit
08005df4 g     F .text	00000104 SPI_Init
0800032c g     F .text	00000030 STM_EVAL_LEDOn
080056bc g     F .text	00000064 RTC_TimeStampCmd
08001cac g     F .text	000000c0 DMA_DeInit
08007b70 g     F .text	00000056 TIM_ClearOC4Ref
08006d08 g     F .text	00000036 TIM_SelectOnePulseMode
08000acc g     F .text	0000000c INT_EXTI_Config
08004d44 g     F .text	0000004c RTC_BypassShadowCmd
080087c0 g     F .text	000000f4 TIM_EncoderInterfaceConfig
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08003b20 g     F .text	00000016 I2C_ClearITPendingBit
00000000  w      *UND*	00000000 __preinit_array_start
080075b0 g     F .text	00000016 TIM_SetCompare1
0800690c g     F .text	00000020 SYSCFG_ClearFlag
08007c70 g     F .text	00000056 TIM_OC2PolarityConfig
0800b704 g     O .text	00000002 BUTTON_IRQn
080063a0 g     F .text	00000024 SPI_ReceiveData8
08006c48 g     F .text	0000003e TIM_UpdateDisableConfig
08002f14 g     F .text	00000048 GPIO_ReadInputDataBit
0800963c g     F .text	00000038 USART_DMACmd
00000000  w      *UND*	00000000 __register_frame_info
08007a14 g     F .text	0000005c TIM_OC4FastConfig
080095dc g     F .text	00000030 USART_SetDEAssertionTime
08001450 g     F .text	0000004c CEC_ITConfig
0800abf8 g     F .text	00000038 peek_fcn
08005f2c g     F .text	000001c0 I2S_Init
080036d8 g     F .text	0000001e I2C_GetAddressMatched
08003de4 g     F .text	00000038 PWR_PVDCmd
0800ac30 g     F .text	0000001c write_fcn
080043a4 g     F .text	00000034 RCC_HCLKConfig
08006b98 g     F .text	00000052 TIM_CounterModeConfig
08009674 g     F .text	0000002c USART_DMAReceptionErrorConfig



Disassembly of section .text:

080000d0 <__do_global_dtors_aux>:
$t():
 80000d0:	b510      	push	{r4, lr}
 80000d2:	4c06      	ldr	r4, [pc, #24]	; (80000ec <__do_global_dtors_aux+0x1c>)
 80000d4:	7823      	ldrb	r3, [r4, #0]
 80000d6:	2b00      	cmp	r3, #0
 80000d8:	d107      	bne.n	80000ea <__do_global_dtors_aux+0x1a>
 80000da:	4805      	ldr	r0, [pc, #20]	; (80000f0 <__do_global_dtors_aux+0x20>)
 80000dc:	2800      	cmp	r0, #0
 80000de:	d002      	beq.n	80000e6 <__do_global_dtors_aux+0x16>
 80000e0:	4804      	ldr	r0, [pc, #16]	; (80000f4 <__do_global_dtors_aux+0x24>)
 80000e2:	e000      	b.n	80000e6 <__do_global_dtors_aux+0x16>
 80000e4:	bf00      	nop
 80000e6:	2101      	movs	r1, #1
 80000e8:	7021      	strb	r1, [r4, #0]
 80000ea:	bd10      	pop	{r4, pc}
$d():
 80000ec:	20000280 	.word	0x20000280
 80000f0:	00000000 	.word	0x00000000
 80000f4:	080000c4 	.word	0x080000c4

080000f8 <frame_dummy>:
$t():
 80000f8:	b508      	push	{r3, lr}
 80000fa:	4b08      	ldr	r3, [pc, #32]	; (800011c <frame_dummy+0x24>)
 80000fc:	2b00      	cmp	r3, #0
 80000fe:	d003      	beq.n	8000108 <frame_dummy+0x10>
 8000100:	4807      	ldr	r0, [pc, #28]	; (8000120 <frame_dummy+0x28>)
 8000102:	4908      	ldr	r1, [pc, #32]	; (8000124 <frame_dummy+0x2c>)
 8000104:	e000      	b.n	8000108 <frame_dummy+0x10>
 8000106:	bf00      	nop
 8000108:	4807      	ldr	r0, [pc, #28]	; (8000128 <frame_dummy+0x30>)
 800010a:	6801      	ldr	r1, [r0, #0]
 800010c:	2900      	cmp	r1, #0
 800010e:	d003      	beq.n	8000118 <frame_dummy+0x20>
 8000110:	4a06      	ldr	r2, [pc, #24]	; (800012c <frame_dummy+0x34>)
 8000112:	2a00      	cmp	r2, #0
 8000114:	d000      	beq.n	8000118 <frame_dummy+0x20>
 8000116:	4790      	blx	r2
 8000118:	bd08      	pop	{r3, pc}
 800011a:	46c0      	nop			; (mov r8, r8)
$d():
 800011c:	00000000 	.word	0x00000000
 8000120:	080000c4 	.word	0x080000c4
 8000124:	20000284 	.word	0x20000284
 8000128:	2000027c 	.word	0x2000027c
 800012c:	00000000 	.word	0x00000000

08000130 <_mainCRTStartup>:
$t():
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:126
 8000130:	4b16      	ldr	r3, [pc, #88]	; (800018c <_mainCRTStartup+0x5c>)
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:127
 8000132:	2b00      	cmp	r3, #0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:132
 8000134:	d100      	bne.n	8000138 <_mainCRTStartup+0x8>
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:133
 8000136:	4b14      	ldr	r3, [pc, #80]	; (8000188 <_mainCRTStartup+0x58>)
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:142
 8000138:	469d      	mov	sp, r3
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:187
 800013a:	2240      	movs	r2, #64	; 0x40
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:188
 800013c:	0292      	lsls	r2, r2, #10
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:189
 800013e:	1a9a      	subs	r2, r3, r2
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:190
 8000140:	4692      	mov	sl, r2
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:197
 8000142:	2100      	movs	r1, #0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:198
 8000144:	468b      	mov	fp, r1
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:199
 8000146:	460f      	mov	r7, r1
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:201
 8000148:	4813      	ldr	r0, [pc, #76]	; (8000198 <_mainCRTStartup+0x68>)
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:202
 800014a:	4a14      	ldr	r2, [pc, #80]	; (800019c <_mainCRTStartup+0x6c>)
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:203
 800014c:	1a12      	subs	r2, r2, r0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:217
 800014e:	f00b f8f7 	bl	800b340 <memset>
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:223
 8000152:	4b0f      	ldr	r3, [pc, #60]	; (8000190 <_mainCRTStartup+0x60>)
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:224
 8000154:	2b00      	cmp	r3, #0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:225
 8000156:	d000      	beq.n	800015a <_mainCRTStartup+0x2a>
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:226
 8000158:	4798      	blx	r3
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:228
 800015a:	4b0e      	ldr	r3, [pc, #56]	; (8000194 <_mainCRTStartup+0x64>)
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:229
 800015c:	2b00      	cmp	r3, #0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:230
 800015e:	d000      	beq.n	8000162 <_mainCRTStartup+0x32>
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:231
 8000160:	4798      	blx	r3
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:234
 8000162:	2000      	movs	r0, #0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:235
 8000164:	2100      	movs	r1, #0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:356
 8000166:	4604      	mov	r4, r0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:357
 8000168:	460d      	mov	r5, r1
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:358
 800016a:	2000      	movs	r0, #0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:359
 800016c:	490c      	ldr	r1, [pc, #48]	; (80001a0 <_mainCRTStartup+0x70>)
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:360
 800016e:	2200      	movs	r2, #0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:361
 8000170:	2300      	movs	r3, #0
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:362
 8000172:	f00b f801 	bl	800b178 <__register_exitproc>
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:363
 8000176:	f00b f89b 	bl	800b2b0 <__libc_init_array>
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:364
 800017a:	4620      	mov	r0, r4
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:365
 800017c:	4629      	mov	r1, r5
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:367
 800017e:	f000 f88f 	bl	80002a0 <main>
/home/freddie/bleeding-edge-toolchain/src/newlib-nano-1.0/libgloss/arm/crt0.S:369
 8000182:	f00b f855 	bl	800b230 <exit>
 8000186:	46c0      	nop			; (mov r8, r8)
$d():
 8000188:	00080000 	.word	0x00080000
	...
 8000198:	20000280 	.word	0x20000280
 800019c:	200003f4 	.word	0x200003f4
 80001a0:	0800b251 	.word	0x0800b251
 80001a4:	0800b82c 	.word	0x0800b82c
 80001a8:	20000000 	.word	0x20000000
 80001ac:	20000274 	.word	0x20000274
 80001b0:	20000280 	.word	0x20000280
 80001b4:	200003f4 	.word	0x200003f4

080001b8 <__aeabi_uidiv>:
__udivsi3():
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:754
 80001b8:	2900      	cmp	r1, #0
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:755
 80001ba:	d034      	beq.n	8000226 <.udivsi3_skip_div0_test+0x6a>

080001bc <.udivsi3_skip_div0_test>:
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:757
 80001bc:	2301      	movs	r3, #1
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:758
 80001be:	2200      	movs	r2, #0
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:760
 80001c0:	b410      	push	{r4}
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:761
 80001c2:	4288      	cmp	r0, r1
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:762
 80001c4:	d32c      	bcc.n	8000220 <.udivsi3_skip_div0_test+0x64>
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:764
 80001c6:	2401      	movs	r4, #1
 80001c8:	0724      	lsls	r4, r4, #28
 80001ca:	42a1      	cmp	r1, r4
 80001cc:	d204      	bcs.n	80001d8 <.udivsi3_skip_div0_test+0x1c>
 80001ce:	4281      	cmp	r1, r0
 80001d0:	d202      	bcs.n	80001d8 <.udivsi3_skip_div0_test+0x1c>
 80001d2:	0109      	lsls	r1, r1, #4
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	e7f8      	b.n	80001ca <.udivsi3_skip_div0_test+0xe>
 80001d8:	00e4      	lsls	r4, r4, #3
 80001da:	42a1      	cmp	r1, r4
 80001dc:	d204      	bcs.n	80001e8 <.udivsi3_skip_div0_test+0x2c>
 80001de:	4281      	cmp	r1, r0
 80001e0:	d202      	bcs.n	80001e8 <.udivsi3_skip_div0_test+0x2c>
 80001e2:	0049      	lsls	r1, r1, #1
 80001e4:	005b      	lsls	r3, r3, #1
 80001e6:	e7f8      	b.n	80001da <.udivsi3_skip_div0_test+0x1e>
 80001e8:	4288      	cmp	r0, r1
 80001ea:	d301      	bcc.n	80001f0 <.udivsi3_skip_div0_test+0x34>
 80001ec:	1a40      	subs	r0, r0, r1
 80001ee:	431a      	orrs	r2, r3
 80001f0:	084c      	lsrs	r4, r1, #1
 80001f2:	42a0      	cmp	r0, r4
 80001f4:	d302      	bcc.n	80001fc <.udivsi3_skip_div0_test+0x40>
 80001f6:	1b00      	subs	r0, r0, r4
 80001f8:	085c      	lsrs	r4, r3, #1
 80001fa:	4322      	orrs	r2, r4
 80001fc:	088c      	lsrs	r4, r1, #2
 80001fe:	42a0      	cmp	r0, r4
 8000200:	d302      	bcc.n	8000208 <.udivsi3_skip_div0_test+0x4c>
 8000202:	1b00      	subs	r0, r0, r4
 8000204:	089c      	lsrs	r4, r3, #2
 8000206:	4322      	orrs	r2, r4
 8000208:	08cc      	lsrs	r4, r1, #3
 800020a:	42a0      	cmp	r0, r4
 800020c:	d302      	bcc.n	8000214 <.udivsi3_skip_div0_test+0x58>
 800020e:	1b00      	subs	r0, r0, r4
 8000210:	08dc      	lsrs	r4, r3, #3
 8000212:	4322      	orrs	r2, r4
 8000214:	2800      	cmp	r0, #0
 8000216:	d003      	beq.n	8000220 <.udivsi3_skip_div0_test+0x64>
 8000218:	091b      	lsrs	r3, r3, #4
 800021a:	d001      	beq.n	8000220 <.udivsi3_skip_div0_test+0x64>
 800021c:	0909      	lsrs	r1, r1, #4
 800021e:	e7e3      	b.n	80001e8 <.udivsi3_skip_div0_test+0x2c>
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:766
 8000220:	1c10      	adds	r0, r2, #0
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:767
 8000222:	bc10      	pop	{r4}
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:768
 8000224:	4770      	bx	lr
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:999
 8000226:	2800      	cmp	r0, #0
 8000228:	d001      	beq.n	800022e <.udivsi3_skip_div0_test+0x72>
 800022a:	2000      	movs	r0, #0
 800022c:	43c0      	mvns	r0, r0
 800022e:	b407      	push	{r0, r1, r2}
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <.udivsi3_skip_div0_test+0x80>)
 8000232:	a102      	add	r1, pc, #8	; (adr r1, 800023c <.udivsi3_skip_div0_test+0x80>)
 8000234:	1840      	adds	r0, r0, r1
 8000236:	9002      	str	r0, [sp, #8]
 8000238:	bd03      	pop	{r0, r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	00000019 	.word	0x00000019

08000240 <__aeabi_uidivmod>:
__aeabi_uidivmod():
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:1003
 8000240:	2900      	cmp	r1, #0
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:1004
 8000242:	d0f0      	beq.n	8000226 <.udivsi3_skip_div0_test+0x6a>
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:1005
 8000244:	b503      	push	{r0, r1, lr}
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:1006
 8000246:	f7ff ffb9 	bl	80001bc <.udivsi3_skip_div0_test>
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:1007
 800024a:	bc0e      	pop	{r1, r2, r3}
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:1008
 800024c:	4342      	muls	r2, r0
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:1009
 800024e:	1a89      	subs	r1, r1, r2
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:1010
 8000250:	4718      	bx	r3
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_idiv0>:
__aeabi_ldiv0():
/home/freddie/bleeding-edge-toolchain/src/gcc/libgcc/config/arm/lib1funcs.S:1300
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <setup>:
setup():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:6
#include "stm32f0xx_conf.h"
#include "stm32f0_discovery.h"
#include "utilities.h"
#include "gpio.h"

void setup() {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:10

	// Insert Setup Code Here

	pinMode(9, OUTPUT); // LED 1 Pin
 800025c:	2009      	movs	r0, #9
 800025e:	2102      	movs	r1, #2
 8000260:	f00a f8c6 	bl	800a3f0 <pinMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:11
	pinMode(8, OUTPUT); // LED 2 Pin
 8000264:	2008      	movs	r0, #8
 8000266:	2102      	movs	r1, #2
 8000268:	f00a f8c2 	bl	800a3f0 <pinMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:13

}
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <loop>:
loop():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:15

void loop() {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:23

//	digitalWrite(9, HIGH);
//	delay(1);
//	digitalWrite(9, LOW);

	STM_EVAL_LEDToggle(LED3);
 8000274:	2000      	movs	r0, #0
 8000276:	f000 f889 	bl	800038c <STM_EVAL_LEDToggle>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:24
	delay(500);
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <loop+0x2c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	22fa      	movs	r2, #250	; 0xfa
 8000280:	0052      	lsls	r2, r2, #1
 8000282:	1c10      	adds	r0, r2, #0
 8000284:	4798      	blx	r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:25
	STM_EVAL_LEDToggle(LED4);
 8000286:	2001      	movs	r0, #1
 8000288:	f000 f880 	bl	800038c <STM_EVAL_LEDToggle>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:26
	delay(500);
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <loop+0x2c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	22fa      	movs	r2, #250	; 0xfa
 8000292:	0052      	lsls	r2, r2, #1
 8000294:	1c10      	adds	r0, r2, #0
 8000296:	4798      	blx	r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:28

}
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000010 	.word	0x20000010

080002a0 <main>:
main():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:32


int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:33
	DISCOVERY_Configuration();
 80002a4:	f000 f9f8 	bl	8000698 <DISCOVERY_Configuration>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:34
	setup();
 80002a8:	f7ff ffd6 	bl	8000258 <setup>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:36 (discriminator 1)
	while(1) {
		loop();
 80002ac:	f7ff ffe0 	bl	8000270 <loop>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../src/main.c:37 (discriminator 1)
	}
 80002b0:	e7fc      	b.n	80002ac <main+0xc>
 80002b2:	46c0      	nop			; (mov r8, r8)

080002b4 <STM_EVAL_LEDInit>:
STM_EVAL_LEDInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:117
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	1c02      	adds	r2, r0, #0
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:121
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80002c0:	1dfb      	adds	r3, r7, #7
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <STM_EVAL_LEDInit+0x6c>)
 80002c6:	0092      	lsls	r2, r2, #2
 80002c8:	58d3      	ldr	r3, [r2, r3]
 80002ca:	1c18      	adds	r0, r3, #0
 80002cc:	2101      	movs	r1, #1
 80002ce:	f004 fa3f 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:124

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781a      	ldrb	r2, [r3, #0]
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <STM_EVAL_LEDInit+0x70>)
 80002d8:	0052      	lsls	r2, r2, #1
 80002da:	5ad3      	ldrh	r3, [r2, r3]
 80002dc:	1c1a      	adds	r2, r3, #0
 80002de:	1c3b      	adds	r3, r7, #0
 80002e0:	3308      	adds	r3, #8
 80002e2:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:125
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80002e4:	1c3b      	adds	r3, r7, #0
 80002e6:	3308      	adds	r3, #8
 80002e8:	2201      	movs	r2, #1
 80002ea:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:126
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002ec:	1c3b      	adds	r3, r7, #0
 80002ee:	3308      	adds	r3, #8
 80002f0:	2200      	movs	r2, #0
 80002f2:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:127
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002f4:	1c3b      	adds	r3, r7, #0
 80002f6:	3308      	adds	r3, #8
 80002f8:	2200      	movs	r2, #0
 80002fa:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:128
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002fc:	1c3b      	adds	r3, r7, #0
 80002fe:	3308      	adds	r3, #8
 8000300:	2203      	movs	r2, #3
 8000302:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:129
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	781a      	ldrb	r2, [r3, #0]
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <STM_EVAL_LEDInit+0x74>)
 800030a:	0092      	lsls	r2, r2, #2
 800030c:	58d2      	ldr	r2, [r2, r3]
 800030e:	1c3b      	adds	r3, r7, #0
 8000310:	3308      	adds	r3, #8
 8000312:	1c10      	adds	r0, r2, #0
 8000314:	1c19      	adds	r1, r3, #0
 8000316:	f002 fd27 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:130
}
 800031a:	46bd      	mov	sp, r7
 800031c:	b004      	add	sp, #16
 800031e:	bd80      	pop	{r7, pc}
 8000320:	0800b6e8 	.word	0x0800b6e8
 8000324:	0800b6e4 	.word	0x0800b6e4
 8000328:	20000004 	.word	0x20000004

0800032c <STM_EVAL_LEDOn>:
STM_EVAL_LEDOn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:141
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	1c02      	adds	r2, r0, #0
 8000334:	1dfb      	adds	r3, r7, #7
 8000336:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:142
  GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781a      	ldrb	r2, [r3, #0]
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <STM_EVAL_LEDOn+0x28>)
 800033e:	0092      	lsls	r2, r2, #2
 8000340:	58d3      	ldr	r3, [r2, r3]
 8000342:	1dfa      	adds	r2, r7, #7
 8000344:	7811      	ldrb	r1, [r2, #0]
 8000346:	4a04      	ldr	r2, [pc, #16]	; (8000358 <STM_EVAL_LEDOn+0x2c>)
 8000348:	0049      	lsls	r1, r1, #1
 800034a:	5a8a      	ldrh	r2, [r1, r2]
 800034c:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:143
}
 800034e:	46bd      	mov	sp, r7
 8000350:	b002      	add	sp, #8
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000004 	.word	0x20000004
 8000358:	0800b6e4 	.word	0x0800b6e4

0800035c <STM_EVAL_LEDOff>:
STM_EVAL_LEDOff():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:154
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	1c02      	adds	r2, r0, #0
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:155
  GPIO_PORT[Led]->BRR = GPIO_PIN[Led];
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	781a      	ldrb	r2, [r3, #0]
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <STM_EVAL_LEDOff+0x28>)
 800036e:	0092      	lsls	r2, r2, #2
 8000370:	58d3      	ldr	r3, [r2, r3]
 8000372:	1dfa      	adds	r2, r7, #7
 8000374:	7811      	ldrb	r1, [r2, #0]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <STM_EVAL_LEDOff+0x2c>)
 8000378:	0049      	lsls	r1, r1, #1
 800037a:	5a8a      	ldrh	r2, [r1, r2]
 800037c:	851a      	strh	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:156
}
 800037e:	46bd      	mov	sp, r7
 8000380:	b002      	add	sp, #8
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000004 	.word	0x20000004
 8000388:	0800b6e4 	.word	0x0800b6e4

0800038c <STM_EVAL_LEDToggle>:
STM_EVAL_LEDToggle():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:167
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	1c02      	adds	r2, r0, #0
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:168
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781a      	ldrb	r2, [r3, #0]
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <STM_EVAL_LEDToggle+0x3c>)
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	58d3      	ldr	r3, [r2, r3]
 80003a2:	1dfa      	adds	r2, r7, #7
 80003a4:	7811      	ldrb	r1, [r2, #0]
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <STM_EVAL_LEDToggle+0x3c>)
 80003a8:	0089      	lsls	r1, r1, #2
 80003aa:	588a      	ldr	r2, [r1, r2]
 80003ac:	8a92      	ldrh	r2, [r2, #20]
 80003ae:	b291      	uxth	r1, r2
 80003b0:	1dfa      	adds	r2, r7, #7
 80003b2:	7810      	ldrb	r0, [r2, #0]
 80003b4:	4a05      	ldr	r2, [pc, #20]	; (80003cc <STM_EVAL_LEDToggle+0x40>)
 80003b6:	0040      	lsls	r0, r0, #1
 80003b8:	5a82      	ldrh	r2, [r0, r2]
 80003ba:	404a      	eors	r2, r1
 80003bc:	b292      	uxth	r2, r2
 80003be:	829a      	strh	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:169
}
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	20000004 	.word	0x20000004
 80003cc:	0800b6e4 	.word	0x0800b6e4

080003d0 <STM_EVAL_PBInit>:
STM_EVAL_PBInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:184
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	1c0a      	adds	r2, r1, #0
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	1c01      	adds	r1, r0, #0
 80003dc:	7019      	strb	r1, [r3, #0]
 80003de:	1dbb      	adds	r3, r7, #6
 80003e0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:190
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80003e2:	1dfb      	adds	r3, r7, #7
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	4b3b      	ldr	r3, [pc, #236]	; (80004d4 <STM_EVAL_PBInit+0x104>)
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	58d3      	ldr	r3, [r2, r3]
 80003ec:	1c18      	adds	r0, r3, #0
 80003ee:	2101      	movs	r1, #1
 80003f0:	f004 f9ae 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:191
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80003f4:	2001      	movs	r0, #1
 80003f6:	2101      	movs	r1, #1
 80003f8:	f004 f9c8 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:194

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80003fc:	1c3b      	adds	r3, r7, #0
 80003fe:	3318      	adds	r3, #24
 8000400:	2200      	movs	r2, #0
 8000402:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:195
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000404:	1c3b      	adds	r3, r7, #0
 8000406:	3318      	adds	r3, #24
 8000408:	2200      	movs	r2, #0
 800040a:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:196
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	781a      	ldrb	r2, [r3, #0]
 8000410:	4b31      	ldr	r3, [pc, #196]	; (80004d8 <STM_EVAL_PBInit+0x108>)
 8000412:	0052      	lsls	r2, r2, #1
 8000414:	5ad3      	ldrh	r3, [r2, r3]
 8000416:	1c1a      	adds	r2, r3, #0
 8000418:	1c3b      	adds	r3, r7, #0
 800041a:	3318      	adds	r3, #24
 800041c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:197
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800041e:	1dfb      	adds	r3, r7, #7
 8000420:	781a      	ldrb	r2, [r3, #0]
 8000422:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <STM_EVAL_PBInit+0x10c>)
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	58d2      	ldr	r2, [r2, r3]
 8000428:	1c3b      	adds	r3, r7, #0
 800042a:	3318      	adds	r3, #24
 800042c:	1c10      	adds	r0, r2, #0
 800042e:	1c19      	adds	r1, r3, #0
 8000430:	f002 fc9a 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:199

  if (Button_Mode == BUTTON_MODE_EXTI)
 8000434:	1dbb      	adds	r3, r7, #6
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d148      	bne.n	80004ce <STM_EVAL_PBInit+0xfe>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:202
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	781a      	ldrb	r2, [r3, #0]
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <STM_EVAL_PBInit+0x110>)
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	5ad3      	ldrh	r3, [r2, r3]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	1dfb      	adds	r3, r7, #7
 800044a:	7819      	ldrb	r1, [r3, #0]
 800044c:	4b25      	ldr	r3, [pc, #148]	; (80004e4 <STM_EVAL_PBInit+0x114>)
 800044e:	0049      	lsls	r1, r1, #1
 8000450:	5acb      	ldrh	r3, [r1, r3]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	1c10      	adds	r0, r2, #0
 8000456:	1c19      	adds	r1, r3, #0
 8000458:	f006 f9e0 	bl	800681c <SYSCFG_EXTILineConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:205

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800045c:	1dfb      	adds	r3, r7, #7
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <STM_EVAL_PBInit+0x118>)
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	5ad3      	ldrh	r3, [r2, r3]
 8000466:	1c1a      	adds	r2, r3, #0
 8000468:	1c3b      	adds	r3, r7, #0
 800046a:	3310      	adds	r3, #16
 800046c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:206
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800046e:	1c3b      	adds	r3, r7, #0
 8000470:	3310      	adds	r3, #16
 8000472:	2200      	movs	r2, #0
 8000474:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:207
    if (Button != BUTTON_USER)
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d004      	beq.n	8000488 <STM_EVAL_PBInit+0xb8>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:209
    {
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 800047e:	1c3b      	adds	r3, r7, #0
 8000480:	3310      	adds	r3, #16
 8000482:	2208      	movs	r2, #8
 8000484:	715a      	strb	r2, [r3, #5]
 8000486:	e003      	b.n	8000490 <STM_EVAL_PBInit+0xc0>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:213
    }
    else
    {
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;    
 8000488:	1c3b      	adds	r3, r7, #0
 800048a:	3310      	adds	r3, #16
 800048c:	220c      	movs	r2, #12
 800048e:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:215
    }
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000490:	1c3b      	adds	r3, r7, #0
 8000492:	3310      	adds	r3, #16
 8000494:	2201      	movs	r2, #1
 8000496:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:216
    EXTI_Init(&EXTI_InitStructure);
 8000498:	1c3b      	adds	r3, r7, #0
 800049a:	3310      	adds	r3, #16
 800049c:	1c18      	adds	r0, r3, #0
 800049e:	f001 fd8f 	bl	8001fc0 <EXTI_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:219

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <STM_EVAL_PBInit+0x11c>)
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	5ad3      	ldrh	r3, [r2, r3]
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	1c3b      	adds	r3, r7, #0
 80004b0:	330c      	adds	r3, #12
 80004b2:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:220
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0x03;
 80004b4:	1c3b      	adds	r3, r7, #0
 80004b6:	330c      	adds	r3, #12
 80004b8:	2203      	movs	r2, #3
 80004ba:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:221
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80004bc:	1c3b      	adds	r3, r7, #0
 80004be:	330c      	adds	r3, #12
 80004c0:	2201      	movs	r2, #1
 80004c2:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:223

    NVIC_Init(&NVIC_InitStructure); 
 80004c4:	1c3b      	adds	r3, r7, #0
 80004c6:	330c      	adds	r3, #12
 80004c8:	1c18      	adds	r0, r3, #0
 80004ca:	f003 fbaf 	bl	8003c2c <NVIC_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:225
  }
}
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b008      	add	sp, #32
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	0800b6f4 	.word	0x0800b6f4
 80004d8:	0800b6f0 	.word	0x0800b6f0
 80004dc:	2000000c 	.word	0x2000000c
 80004e0:	0800b6fc 	.word	0x0800b6fc
 80004e4:	0800b700 	.word	0x0800b700
 80004e8:	0800b6f8 	.word	0x0800b6f8
 80004ec:	0800b704 	.word	0x0800b704

080004f0 <STM_EVAL_PBGetState>:
STM_EVAL_PBGetState():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:235
  *   This parameter can be one of following parameters:
  *     @arg BUTTON_USER: User Push Button    
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	1c02      	adds	r2, r0, #0
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:237
  /* There is no Wakeup button on STM32f0-Discovery Kit */
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80004fc:	1dfb      	adds	r3, r7, #7
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <STM_EVAL_PBGetState+0x34>)
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	58d2      	ldr	r2, [r2, r3]
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	7819      	ldrb	r1, [r3, #0]
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <STM_EVAL_PBGetState+0x38>)
 800050c:	0049      	lsls	r1, r1, #1
 800050e:	5acb      	ldrh	r3, [r1, r3]
 8000510:	1c10      	adds	r0, r2, #0
 8000512:	1c19      	adds	r1, r3, #0
 8000514:	f002 fcfe 	bl	8002f14 <GPIO_ReadInputDataBit>
 8000518:	1c03      	adds	r3, r0, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0_discovery.c:238
}
 800051a:	1c18      	adds	r0, r3, #0
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	2000000c 	.word	0x2000000c
 8000528:	0800b6f0 	.word	0x0800b6f0

0800052c <NMI_Handler>:
NMI_Handler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:50
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:51
}
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <HardFault_Handler>:
HardFault_Handler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:59
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:63 (discriminator 1)
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000538:	e7fe      	b.n	8000538 <HardFault_Handler+0x4>
 800053a:	46c0      	nop			; (mov r8, r8)

0800053c <SVC_Handler>:
SVC_Handler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:72
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:73
}
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <PendSV_Handler>:
PendSV_Handler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:81
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:82
}
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <SysTick_Handler>:
SysTick_Handler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:90
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:91
   if(G_tickValue)
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <SysTick_Handler+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d004      	beq.n	8000562 <SysTick_Handler+0x16>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:92
     G_tickValue--;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <SysTick_Handler+0x1c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	1e5a      	subs	r2, r3, #1
 800055e:	4b02      	ldr	r3, [pc, #8]	; (8000568 <SysTick_Handler+0x1c>)
 8000560:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/stm32f0xx_it.c:93
}
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	2000029c 	.word	0x2000029c

0800056c <NVIC_SetPriority>:
NVIC_SetPriority():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:572

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	1c02      	adds	r2, r0, #0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:573
  if(IRQn < 0) {
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b7f      	cmp	r3, #127	; 0x7f
 8000580:	d932      	bls.n	80005e8 <NVIC_SetPriority+0x7c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:574
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000582:	4930      	ldr	r1, [pc, #192]	; (8000644 <NVIC_SetPriority+0xd8>)
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	1c1a      	adds	r2, r3, #0
 800058a:	230f      	movs	r3, #15
 800058c:	4013      	ands	r3, r2
 800058e:	3b08      	subs	r3, #8
 8000590:	0898      	lsrs	r0, r3, #2
 8000592:	4a2c      	ldr	r2, [pc, #176]	; (8000644 <NVIC_SetPriority+0xd8>)
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	1c1c      	adds	r4, r3, #0
 800059a:	230f      	movs	r3, #15
 800059c:	4023      	ands	r3, r4
 800059e:	3b08      	subs	r3, #8
 80005a0:	089b      	lsrs	r3, r3, #2
 80005a2:	3306      	adds	r3, #6
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	18d3      	adds	r3, r2, r3
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	1dfa      	adds	r2, r7, #7
 80005ac:	7812      	ldrb	r2, [r2, #0]
 80005ae:	1c14      	adds	r4, r2, #0
 80005b0:	2203      	movs	r2, #3
 80005b2:	4022      	ands	r2, r4
 80005b4:	00d2      	lsls	r2, r2, #3
 80005b6:	24ff      	movs	r4, #255	; 0xff
 80005b8:	1c25      	adds	r5, r4, #0
 80005ba:	4095      	lsls	r5, r2
 80005bc:	1c2a      	adds	r2, r5, #0
 80005be:	43d2      	mvns	r2, r2
 80005c0:	401a      	ands	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:575
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	019c      	lsls	r4, r3, #6
 80005c6:	23ff      	movs	r3, #255	; 0xff
 80005c8:	401c      	ands	r4, r3
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	1c1d      	adds	r5, r3, #0
 80005d0:	2303      	movs	r3, #3
 80005d2:	402b      	ands	r3, r5
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	1c25      	adds	r5, r4, #0
 80005d8:	409d      	lsls	r5, r3
 80005da:	1c2b      	adds	r3, r5, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:574
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80005dc:	431a      	orrs	r2, r3
 80005de:	1d83      	adds	r3, r0, #6
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	18cb      	adds	r3, r1, r3
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	e029      	b.n	800063c <NVIC_SetPriority+0xd0>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:577
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <NVIC_SetPriority+0xdc>)
 80005ea:	1dfa      	adds	r2, r7, #7
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	b252      	sxtb	r2, r2
 80005f0:	0892      	lsrs	r2, r2, #2
 80005f2:	4915      	ldr	r1, [pc, #84]	; (8000648 <NVIC_SetPriority+0xdc>)
 80005f4:	1df8      	adds	r0, r7, #7
 80005f6:	7800      	ldrb	r0, [r0, #0]
 80005f8:	b240      	sxtb	r0, r0
 80005fa:	0880      	lsrs	r0, r0, #2
 80005fc:	30c0      	adds	r0, #192	; 0xc0
 80005fe:	0080      	lsls	r0, r0, #2
 8000600:	5841      	ldr	r1, [r0, r1]
 8000602:	1df8      	adds	r0, r7, #7
 8000604:	7800      	ldrb	r0, [r0, #0]
 8000606:	1c04      	adds	r4, r0, #0
 8000608:	2003      	movs	r0, #3
 800060a:	4020      	ands	r0, r4
 800060c:	00c0      	lsls	r0, r0, #3
 800060e:	24ff      	movs	r4, #255	; 0xff
 8000610:	1c25      	adds	r5, r4, #0
 8000612:	4085      	lsls	r5, r0
 8000614:	1c28      	adds	r0, r5, #0
 8000616:	43c0      	mvns	r0, r0
 8000618:	4008      	ands	r0, r1
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:578
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800061a:	6839      	ldr	r1, [r7, #0]
 800061c:	018c      	lsls	r4, r1, #6
 800061e:	21ff      	movs	r1, #255	; 0xff
 8000620:	400c      	ands	r4, r1
 8000622:	1df9      	adds	r1, r7, #7
 8000624:	7809      	ldrb	r1, [r1, #0]
 8000626:	1c0d      	adds	r5, r1, #0
 8000628:	2103      	movs	r1, #3
 800062a:	4029      	ands	r1, r5
 800062c:	00c9      	lsls	r1, r1, #3
 800062e:	1c25      	adds	r5, r4, #0
 8000630:	408d      	lsls	r5, r1
 8000632:	1c29      	adds	r1, r5, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:577
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000634:	4301      	orrs	r1, r0
 8000636:	32c0      	adds	r2, #192	; 0xc0
 8000638:	0092      	lsls	r2, r2, #2
 800063a:	50d1      	str	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:579
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bdb0      	pop	{r4, r5, r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	e000ed00 	.word	0xe000ed00
 8000648:	e000e100 	.word	0xe000e100

0800064c <SysTick_Config>:
SysTick_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:640
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:641
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <SysTick_Config+0x44>)
 8000658:	429a      	cmp	r2, r3
 800065a:	d901      	bls.n	8000660 <SysTick_Config+0x14>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:641 (discriminator 1)
 800065c:	2301      	movs	r3, #1
 800065e:	e012      	b.n	8000686 <SysTick_Config+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:643

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <SysTick_Config+0x48>)
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	0212      	lsls	r2, r2, #8
 8000666:	0a12      	lsrs	r2, r2, #8
 8000668:	3a01      	subs	r2, #1
 800066a:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:644
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	1c18      	adds	r0, r3, #0
 8000672:	2103      	movs	r1, #3
 8000674:	f7ff ff7a 	bl	800056c <NVIC_SetPriority>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:645
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Config+0x48>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:646
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SysTick_Config+0x48>)
 8000680:	2207      	movs	r2, #7
 8000682:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:649
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000684:	2300      	movs	r3, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cm0.h:650
}
 8000686:	1c18      	adds	r0, r3, #0
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	00ffffff 	.word	0x00ffffff
 8000694:	e000e010 	.word	0xe000e010

08000698 <DISCOVERY_Configuration>:
DISCOVERY_Configuration():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:63
/**
  * @brief  DISCOVERY_Configuration This function configure discovery kit clock and default interrupt 
  * @param  None
  * @retval None
  */
void DISCOVERY_Configuration(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:73
    debug();
  #endif

  
  // Initialize variables
  LSE_Delay = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:77
 
  
  // Init LEDs LD3&LD4, and user button
  Init_LED();
 80006a2:	f000 f8ef 	bl	8000884 <Init_LED>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:80

  //Chip Select init
  Init_CS();
 80006a6:	f000 f91b 	bl	80008e0 <Init_CS>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:83

  //Reset pin init
  Init_RESET();
 80006aa:	f000 f93d 	bl	8000928 <Init_RESET>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:86

  // Wait till HSE is ready - HSE_RDY @ bit 17
  while((RCC->CR & (1L<<17)) == 0)
 80006ae:	e032      	b.n	8000716 <DISCOVERY_Configuration+0x7e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:88
  {
    if((RCC->CR & (1<<17)) == 0)
 80006b0:	4b4f      	ldr	r3, [pc, #316]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	029b      	lsls	r3, r3, #10
 80006b8:	4013      	ands	r3, r2
 80006ba:	d104      	bne.n	80006c6 <DISCOVERY_Configuration+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:89
      staticDelay(1000);
 80006bc:	23fa      	movs	r3, #250	; 0xfa
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	1c18      	adds	r0, r3, #0
 80006c2:	f000 f955 	bl	8000970 <staticDelay>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:90
    if((RCC->CR & (1<<17)) == 0)
 80006c6:	4b4a      	ldr	r3, [pc, #296]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	029b      	lsls	r3, r3, #10
 80006ce:	4013      	ands	r3, r2
 80006d0:	d103      	bne.n	80006da <DISCOVERY_Configuration+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:91
      staticDelay(SECOND_DELAY);
 80006d2:	4b48      	ldr	r3, [pc, #288]	; (80007f4 <DISCOVERY_Configuration+0x15c>)
 80006d4:	1c18      	adds	r0, r3, #0
 80006d6:	f000 f94b 	bl	8000970 <staticDelay>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:92
    if((RCC->CR & (1<<17)) == 0)
 80006da:	4b45      	ldr	r3, [pc, #276]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	029b      	lsls	r3, r3, #10
 80006e2:	4013      	ands	r3, r2
 80006e4:	d103      	bne.n	80006ee <DISCOVERY_Configuration+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:94
      // turn on blue LED LD4
      TURNONLD4;
 80006e6:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <DISCOVERY_Configuration+0x160>)
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0052      	lsls	r2, r2, #1
 80006ec:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:95
    if((RCC->CR & (1<<17)) == 0)
 80006ee:	4b40      	ldr	r3, [pc, #256]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	029b      	lsls	r3, r3, #10
 80006f6:	4013      	ands	r3, r2
 80006f8:	d103      	bne.n	8000702 <DISCOVERY_Configuration+0x6a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:96
      staticDelay(SECOND_DELAY);
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <DISCOVERY_Configuration+0x15c>)
 80006fc:	1c18      	adds	r0, r3, #0
 80006fe:	f000 f937 	bl	8000970 <staticDelay>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:97
    if((RCC->CR & (1<<17)) == 0)
 8000702:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	029b      	lsls	r3, r3, #10
 800070a:	4013      	ands	r3, r2
 800070c:	d103      	bne.n	8000716 <DISCOVERY_Configuration+0x7e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:99
      // turn off blue LED LD4
      TURNOFFLD4;
 800070e:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <DISCOVERY_Configuration+0x160>)
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	851a      	strh	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:86 (discriminator 1)

  //Reset pin init
  Init_RESET();

  // Wait till HSE is ready - HSE_RDY @ bit 17
  while((RCC->CR & (1L<<17)) == 0)
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	029b      	lsls	r3, r3, #10
 800071e:	4013      	ands	r3, r2
 8000720:	d0c6      	beq.n	80006b0 <DISCOVERY_Configuration+0x18>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:102
    if((RCC->CR & (1<<17)) == 0)
      // turn off blue LED LD4
      TURNOFFLD4;
  }
  
  TURNOFFLD4;
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <DISCOVERY_Configuration+0x160>)
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	851a      	strh	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:106
    // HSE passes
  
  // Flash no wait state
  *(uint32_t *)0x40022000 = 0x00;
 800072a:	4b34      	ldr	r3, [pc, #208]	; (80007fc <DISCOVERY_Configuration+0x164>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:110
  
  // for SILICON_CHIP configuration
  // PLLCLK = 8MHz * 3 = 24 MHz
  RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMul_2);
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	025b      	lsls	r3, r3, #9
 8000734:	1c18      	adds	r0, r3, #0
 8000736:	2100      	movs	r1, #0
 8000738:	f003 fd88 	bl	800424c <RCC_PLLConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:113
  
  // Enable PLL
  RCC_PLLCmd(ENABLE);
 800073c:	2001      	movs	r0, #1
 800073e:	f003 fd9f 	bl	8004280 <RCC_PLLCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:117
  
  
  // Wait till PLL is ready - PLL_RDY @ bit 25
  while((RCC->CR & (1L<<25)) == 0)
 8000742:	e032      	b.n	80007aa <DISCOVERY_Configuration+0x112>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:119
  {
    if((RCC->CR & (1<<25)) == 0)
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	049b      	lsls	r3, r3, #18
 800074c:	4013      	ands	r3, r2
 800074e:	d104      	bne.n	800075a <DISCOVERY_Configuration+0xc2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:120
      staticDelay(1000);
 8000750:	23fa      	movs	r3, #250	; 0xfa
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	1c18      	adds	r0, r3, #0
 8000756:	f000 f90b 	bl	8000970 <staticDelay>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:121
    if(((RCC->CR) & (1L<<25)) == 0)
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	049b      	lsls	r3, r3, #18
 8000762:	4013      	ands	r3, r2
 8000764:	d103      	bne.n	800076e <DISCOVERY_Configuration+0xd6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:122
      staticDelay(SECOND_DELAY);
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <DISCOVERY_Configuration+0x15c>)
 8000768:	1c18      	adds	r0, r3, #0
 800076a:	f000 f901 	bl	8000970 <staticDelay>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:123
    if((RCC->CR & (1<<25)) == 0)
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	049b      	lsls	r3, r3, #18
 8000776:	4013      	ands	r3, r2
 8000778:	d103      	bne.n	8000782 <DISCOVERY_Configuration+0xea>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:125
      // turn on blue LED LD4
      TURNONLD4;
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <DISCOVERY_Configuration+0x160>)
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:126
    if((RCC->CR & (1<<25)) == 0)
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	049b      	lsls	r3, r3, #18
 800078a:	4013      	ands	r3, r2
 800078c:	d103      	bne.n	8000796 <DISCOVERY_Configuration+0xfe>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:127
      staticDelay(SECOND_DELAY);
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <DISCOVERY_Configuration+0x15c>)
 8000790:	1c18      	adds	r0, r3, #0
 8000792:	f000 f8ed 	bl	8000970 <staticDelay>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:128
    if((RCC->CR & (1<<25)) == 0)
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	049b      	lsls	r3, r3, #18
 800079e:	4013      	ands	r3, r2
 80007a0:	d103      	bne.n	80007aa <DISCOVERY_Configuration+0x112>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:130
      // turn off blue LED LD4
      TURNOFFLD4;
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <DISCOVERY_Configuration+0x160>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	851a      	strh	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:117 (discriminator 1)
  // Enable PLL
  RCC_PLLCmd(ENABLE);
  
  
  // Wait till PLL is ready - PLL_RDY @ bit 25
  while((RCC->CR & (1L<<25)) == 0)
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <DISCOVERY_Configuration+0x158>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	2380      	movs	r3, #128	; 0x80
 80007b0:	049b      	lsls	r3, r3, #18
 80007b2:	4013      	ands	r3, r2
 80007b4:	d0c6      	beq.n	8000744 <DISCOVERY_Configuration+0xac>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:134
      // turn off blue LED LD4
      TURNOFFLD4;
  }

  // Select PLL as system clock source
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80007b6:	2002      	movs	r0, #2
 80007b8:	f003 fdcc 	bl	8004354 <RCC_SYSCLKConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:136
  // Wait till PLL is used as system clock source
  while(RCC_GetSYSCLKSource() != 0x08)
 80007bc:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:136 (discriminator 1)
 80007be:	f003 fde3 	bl	8004388 <RCC_GetSYSCLKSource>
 80007c2:	1c03      	adds	r3, r0, #0
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d1fa      	bne.n	80007be <DISCOVERY_Configuration+0x126>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:140
    ;

  // Enable PWR clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	055b      	lsls	r3, r3, #21
 80007cc:	1c18      	adds	r0, r3, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	f003 fffa 	bl	80047c8 <RCC_APB1PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:142
  // Enable access to the backup register, so LSE can be enabled
  PWR_BackupAccessCmd(ENABLE);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f003 facb 	bl	8003d70 <PWR_BackupAccessCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:222
      // Disable LSE
      RCC_LSEConfig(RCC_LSE_OFF);
    }
  }
#else
  LSE_Delay |= LSE_PASS_FLAG;  
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	4313      	orrs	r3, r2
 80007e2:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:225
#endif
  //Update SystemCoreClock depending on RCC config
  SystemCoreClockUpdate ();
 80007e4:	f009 f958 	bl	8009a98 <SystemCoreClockUpdate>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:226
}
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40021000 	.word	0x40021000
 80007f4:	000f4240 	.word	0x000f4240
 80007f8:	48000800 	.word	0x48000800
 80007fc:	40022000 	.word	0x40022000

08000800 <delay_ms>:
delay_ms():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:235
  * @brief  delay_ms  delay for some time in ms unit(accurate)
  * @param  n_ms is how many ms of time to delay
  * @retval None
  */
void delay_ms(uint32_t n_ms)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:238
  // SysTick interrupt each 1000 Hz with HCLK equal to 32MHz
  // - 30 to compensate the overhead of this sub routine
  SysTick_Config(8000*PLL_MUL_X - 30);
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <delay_ms+0x3c>)
 800080a:	1c18      	adds	r0, r3, #0
 800080c:	f7ff ff1e 	bl	800064c <SysTick_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:241
  // Enable the SysTick Counter

  G_tickValue = n_ms;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <delay_ms+0x40>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:242
  while(G_tickValue == n_ms)
 8000816:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:242 (discriminator 1)
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <delay_ms+0x40>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	429a      	cmp	r2, r3
 8000820:	d0fa      	beq.n	8000818 <delay_ms+0x18>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:246
    ;

  // SysTick interrupt each 1000 Hz with HCLK equal to 32MHz
  SysTick_Config(8000*PLL_MUL_X);
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <delay_ms+0x44>)
 8000824:	1c18      	adds	r0, r3, #0
 8000826:	f7ff ff11 	bl	800064c <SysTick_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:247
  while(G_tickValue != 0)
 800082a:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:247 (discriminator 1)
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <delay_ms+0x40>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1fb      	bne.n	800082c <delay_ms+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:249
    ;
}
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	00005da2 	.word	0x00005da2
 8000840:	2000029c 	.word	0x2000029c
 8000844:	00005dc0 	.word	0x00005dc0

08000848 <delay_10us>:
delay_10us():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:257
  * @brief  delay_10us delay for some time in 10us unit(accurate)
  * @param  n_10us is how many 10us of time to delay
  * @retval None
  */
void delay_10us(uint32_t n_10us)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:259
  // Enable the SysTick Counter
  G_tickValue = n_10us;
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <delay_10us+0x38>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:262
  // SysTick interrupt each 10us with HCLK equal to 24MHz
  // - 30 to compensate the overhead of this sub routine
  SysTick_Config(80*PLL_MUL_X - 30);
 8000856:	20d2      	movs	r0, #210	; 0xd2
 8000858:	f7ff fef8 	bl	800064c <SysTick_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:263
  while(G_tickValue == n_10us)
 800085c:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:263 (discriminator 1)
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <delay_10us+0x38>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	d0fa      	beq.n	800085e <delay_10us+0x16>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:267
    ;

  // SysTick interrupt each 10us with HCLK equal to 24MHz
  SysTick_Config(80 * PLL_MUL_X);
 8000868:	20f0      	movs	r0, #240	; 0xf0
 800086a:	f7ff feef 	bl	800064c <SysTick_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:268
  while(G_tickValue != 0)
 800086e:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:268 (discriminator 1)
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <delay_10us+0x38>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1fb      	bne.n	8000870 <delay_10us+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:270
    ;
}
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	2000029c 	.word	0x2000029c

08000884 <Init_LED>:
Init_LED():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:279
  * @brief  Init_LED LEDs initialization and User button
  * @param  None
  * @retval None
  */
static void Init_LED(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:283
  GPIO_InitTypeDef GPIO_InitStructure;
  
  // Enable GPIOA, GPIOC clocks
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOC, ENABLE);
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	031b      	lsls	r3, r3, #12
 800088e:	1c18      	adds	r0, r3, #0
 8000890:	2101      	movs	r1, #1
 8000892:	f003 ff5d 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:285
  
  GPIO_InitStructure.GPIO_Pin = GPIO_LED_LD3 | GPIO_LED_LD4;
 8000896:	1c3b      	adds	r3, r7, #0
 8000898:	22c0      	movs	r2, #192	; 0xc0
 800089a:	0092      	lsls	r2, r2, #2
 800089c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:286
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800089e:	1c3b      	adds	r3, r7, #0
 80008a0:	2201      	movs	r2, #1
 80008a2:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:287
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80008a4:	1c3b      	adds	r3, r7, #0
 80008a6:	2201      	movs	r2, #1
 80008a8:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:288
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;  
 80008aa:	1c3b      	adds	r3, r7, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:289
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <Init_LED+0x58>)
 80008b2:	1c3b      	adds	r3, r7, #0
 80008b4:	1c10      	adds	r0, r2, #0
 80008b6:	1c19      	adds	r1, r3, #0
 80008b8:	f002 fa56 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:293
   

  // Init User/Wakeup button B1
  GPIO_InitStructure.GPIO_Pin = GPIO_BUTTON_B1;		
 80008bc:	1c3b      	adds	r3, r7, #0
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:294
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80008c2:	1c3b      	adds	r3, r7, #0
 80008c4:	2200      	movs	r2, #0
 80008c6:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:295
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008c8:	2390      	movs	r3, #144	; 0x90
 80008ca:	05da      	lsls	r2, r3, #23
 80008cc:	1c3b      	adds	r3, r7, #0
 80008ce:	1c10      	adds	r0, r2, #0
 80008d0:	1c19      	adds	r1, r3, #0
 80008d2:	f002 fa49 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:296
}
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	48000800 	.word	0x48000800

080008e0 <Init_CS>:
Init_CS():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:304
/**
  * @brief  Init_CS Chip Select pin/port init
  * @param  None
  * @retval None
  */
static void Init_CS(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:308
 GPIO_InitTypeDef GPIO_InitStructure;
  /* Configure PA11 pin as CS1 ----------------------------*/
 /* Configure PA12 pin as CS2 ----------------------------*/
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);  
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	029b      	lsls	r3, r3, #10
 80008ea:	1c18      	adds	r0, r3, #0
 80008ec:	2101      	movs	r1, #1
 80008ee:	f003 ff2f 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:310

  GPIO_InitStructure.GPIO_Pin =  CS1_PIN | CS2_PIN;
 80008f2:	1c3b      	adds	r3, r7, #0
 80008f4:	22c0      	movs	r2, #192	; 0xc0
 80008f6:	0152      	lsls	r2, r2, #5
 80008f8:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:311
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80008fa:	1c3b      	adds	r3, r7, #0
 80008fc:	2201      	movs	r2, #1
 80008fe:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:312
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000900:	1c3b      	adds	r3, r7, #0
 8000902:	2201      	movs	r2, #1
 8000904:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:313
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000906:	1c3b      	adds	r3, r7, #0
 8000908:	2200      	movs	r2, #0
 800090a:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:314
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800090c:	1c3b      	adds	r3, r7, #0
 800090e:	2200      	movs	r2, #0
 8000910:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:315
  GPIO_Init(CS_PORT, &GPIO_InitStructure);
 8000912:	2390      	movs	r3, #144	; 0x90
 8000914:	05da      	lsls	r2, r3, #23
 8000916:	1c3b      	adds	r3, r7, #0
 8000918:	1c10      	adds	r0, r2, #0
 800091a:	1c19      	adds	r1, r3, #0
 800091c:	f002 fa24 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:317
    
}
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)

08000928 <Init_RESET>:
Init_RESET():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:325
/**
  * @brief  Init_RESET Reset pin/port init
  * @param  None
  * @retval None
  */
static void Init_RESET(void){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:329
 GPIO_InitTypeDef GPIO_InitStructure;
  /* Configure PB13 pin as RESET ----------------------------*/
  /* Enable GPIOB clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	02db      	lsls	r3, r3, #11
 8000932:	1c18      	adds	r0, r3, #0
 8000934:	2101      	movs	r1, #1
 8000936:	f003 ff0b 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:331

  GPIO_InitStructure.GPIO_Pin =  RESET_PIN;
 800093a:	1c3b      	adds	r3, r7, #0
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	0192      	lsls	r2, r2, #6
 8000940:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:332
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000942:	1c3b      	adds	r3, r7, #0
 8000944:	2201      	movs	r2, #1
 8000946:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:333
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000948:	1c3b      	adds	r3, r7, #0
 800094a:	2201      	movs	r2, #1
 800094c:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:334
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800094e:	1c3b      	adds	r3, r7, #0
 8000950:	2200      	movs	r2, #0
 8000952:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:335
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000954:	1c3b      	adds	r3, r7, #0
 8000956:	2200      	movs	r2, #0
 8000958:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:336
  GPIO_Init(RESET_PORT, &GPIO_InitStructure);
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <Init_RESET+0x44>)
 800095c:	1c3b      	adds	r3, r7, #0
 800095e:	1c10      	adds	r0, r2, #0
 8000960:	1c19      	adds	r1, r3, #0
 8000962:	f002 fa01 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:338
    
}
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}
 800096c:	48000400 	.word	0x48000400

08000970 <staticDelay>:
staticDelay():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:346
  * @brief  staticDelay delay for some time in counts(rough)
  * @param  counts is how many counts of time to delay
  * @retval None
  */
static void staticDelay(uint32_t counts)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:347
  while(counts-- != 0)
 8000978:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:347 (discriminator 1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	1e5a      	subs	r2, r3, #1
 800097e:	4193      	sbcs	r3, r2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	3a01      	subs	r2, #1
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1f6      	bne.n	800097a <staticDelay+0xa>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:349
    ;
}
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)

08000994 <INT1_EXTI_Config>:
INT1_EXTI_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:358
  * @brief  INT1_EXTI_Config Configure PB12 as external interrupt
  * @param  None
  * @retval None
  */
void INT1_EXTI_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:364
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable GPIOB clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	02db      	lsls	r3, r3, #11
 800099e:	1c18      	adds	r0, r3, #0
 80009a0:	2101      	movs	r1, #1
 80009a2:	f003 fed5 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:367
  
  /* Configure PB12 pin as input floating */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 80009a6:	1c3b      	adds	r3, r7, #0
 80009a8:	3310      	adds	r3, #16
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	0152      	lsls	r2, r2, #5
 80009ae:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:368
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80009b0:	1c3b      	adds	r3, r7, #0
 80009b2:	3310      	adds	r3, #16
 80009b4:	2200      	movs	r2, #0
 80009b6:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:369
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009b8:	1c3b      	adds	r3, r7, #0
 80009ba:	3310      	adds	r3, #16
 80009bc:	2200      	movs	r2, #0
 80009be:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:370
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <INT1_EXTI_Config+0x98>)
 80009c2:	1c3b      	adds	r3, r7, #0
 80009c4:	3310      	adds	r3, #16
 80009c6:	1c10      	adds	r0, r2, #0
 80009c8:	1c19      	adds	r1, r3, #0
 80009ca:	f002 f9cd 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:373

  /* Enable SYSCFG clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80009ce:	2001      	movs	r0, #1
 80009d0:	2101      	movs	r1, #1
 80009d2:	f003 fedb 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:375
  /* Connect EXTI12 Line to PB12 pin */
  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource12);
 80009d6:	2001      	movs	r0, #1
 80009d8:	210c      	movs	r1, #12
 80009da:	f005 ff1f 	bl	800681c <SYSCFG_EXTILineConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:378

  /* Configure EXTI12 line */
  EXTI_InitStructure.EXTI_Line = EXTI_Line12;
 80009de:	1c3b      	adds	r3, r7, #0
 80009e0:	3308      	adds	r3, #8
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	0152      	lsls	r2, r2, #5
 80009e6:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:379
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80009e8:	1c3b      	adds	r3, r7, #0
 80009ea:	3308      	adds	r3, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:380
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
 80009f0:	1c3b      	adds	r3, r7, #0
 80009f2:	3308      	adds	r3, #8
 80009f4:	220c      	movs	r2, #12
 80009f6:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:381
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80009f8:	1c3b      	adds	r3, r7, #0
 80009fa:	3308      	adds	r3, #8
 80009fc:	2201      	movs	r2, #1
 80009fe:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:382
  EXTI_Init(&EXTI_InitStructure);
 8000a00:	1c3b      	adds	r3, r7, #0
 8000a02:	3308      	adds	r3, #8
 8000a04:	1c18      	adds	r0, r3, #0
 8000a06:	f001 fadb 	bl	8001fc0 <EXTI_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:385

  /* Enable and set EXTI12 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = EXTI4_15_IRQn;
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:386
  NVIC_InitStructure.NVIC_IRQChannelPriority = 0x00;
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:387
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2201      	movs	r2, #1
 8000a1a:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:388
  NVIC_Init(&NVIC_InitStructure);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	1c18      	adds	r0, r3, #0
 8000a20:	f003 f904 	bl	8003c2c <NVIC_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:389
}
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b006      	add	sp, #24
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	48000400 	.word	0x48000400

08000a30 <INT2_EXTI_Config>:
INT2_EXTI_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:398
  * @brief  INT2_EXTI_Config Configure PB11 as external interrupt
  * @param  None
  * @retval None
  */
void INT2_EXTI_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:404
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable GPIOB clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	02db      	lsls	r3, r3, #11
 8000a3a:	1c18      	adds	r0, r3, #0
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	f003 fe87 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:407
  
  /* Configure PB11 pin as input floating */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8000a42:	1c3b      	adds	r3, r7, #0
 8000a44:	3310      	adds	r3, #16
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:408
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000a4c:	1c3b      	adds	r3, r7, #0
 8000a4e:	3310      	adds	r3, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:409
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a54:	1c3b      	adds	r3, r7, #0
 8000a56:	3310      	adds	r3, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:410
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <INT2_EXTI_Config+0x98>)
 8000a5e:	1c3b      	adds	r3, r7, #0
 8000a60:	3310      	adds	r3, #16
 8000a62:	1c10      	adds	r0, r2, #0
 8000a64:	1c19      	adds	r1, r3, #0
 8000a66:	f002 f97f 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:413

  /* Enable SYSCFG clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	f003 fe8d 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:415
  /* Connect EXTI11 Line to PB11 pin */
  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource11);
 8000a72:	2001      	movs	r0, #1
 8000a74:	210b      	movs	r1, #11
 8000a76:	f005 fed1 	bl	800681c <SYSCFG_EXTILineConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:418

  /* Configure EXTI11 line */
  EXTI_InitStructure.EXTI_Line = EXTI_Line11;
 8000a7a:	1c3b      	adds	r3, r7, #0
 8000a7c:	3308      	adds	r3, #8
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:419
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000a84:	1c3b      	adds	r3, r7, #0
 8000a86:	3308      	adds	r3, #8
 8000a88:	2200      	movs	r2, #0
 8000a8a:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:420
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
 8000a8c:	1c3b      	adds	r3, r7, #0
 8000a8e:	3308      	adds	r3, #8
 8000a90:	220c      	movs	r2, #12
 8000a92:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:421
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000a94:	1c3b      	adds	r3, r7, #0
 8000a96:	3308      	adds	r3, #8
 8000a98:	2201      	movs	r2, #1
 8000a9a:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:422
  EXTI_Init(&EXTI_InitStructure);
 8000a9c:	1c3b      	adds	r3, r7, #0
 8000a9e:	3308      	adds	r3, #8
 8000aa0:	1c18      	adds	r0, r3, #0
 8000aa2:	f001 fa8d 	bl	8001fc0 <EXTI_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:425

  /* Enable and set EXTI11 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = EXTI4_15_IRQn;
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:426
  NVIC_InitStructure.NVIC_IRQChannelPriority = 0x00;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:427
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:428
  NVIC_Init(&NVIC_InitStructure);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	1c18      	adds	r0, r3, #0
 8000abc:	f003 f8b6 	bl	8003c2c <NVIC_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:429
}
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b006      	add	sp, #24
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	48000400 	.word	0x48000400

08000acc <INT_EXTI_Config>:
INT_EXTI_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:438
  * @brief  INT_EXTI_Config  Configure PB12 as external interrupt (MikroBus INt pin)
  * @param  None
  * @retval None
  */
void INT_EXTI_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:439
  INT1_EXTI_Config();
 8000ad0:	f7ff ff60 	bl	8000994 <INT1_EXTI_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:440
}
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <PWM_Config>:
PWM_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:450
  * @brief  PWM_Config  Configure PA8 as Timer for PWM control
  * @param  None
  * @retval None
  */
void PWM_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:454
  GPIO_InitTypeDef         GPIO_InitStructure;  
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  TIM_OCInitTypeDef        TIM_OCInitStructure;
  uint16_t TimerPeriod = 0;
 8000ade:	1c3b      	adds	r3, r7, #0
 8000ae0:	332e      	adds	r3, #46	; 0x2e
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:455
  uint16_t Channel1Pulse = 0;
 8000ae6:	1c3b      	adds	r3, r7, #0
 8000ae8:	332c      	adds	r3, #44	; 0x2c
 8000aea:	2200      	movs	r2, #0
 8000aec:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:458
    
  /* Enable GPIOA clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA , ENABLE);
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	029b      	lsls	r3, r3, #10
 8000af2:	1c18      	adds	r0, r3, #0
 8000af4:	2101      	movs	r1, #1
 8000af6:	f003 fe2b 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:461
 
  /* TIM1 clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	1c18      	adds	r0, r3, #0
 8000b00:	2101      	movs	r1, #1
 8000b02:	f003 fe43 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:464
  
  /* Configure PA8 pin as TIM1 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000b06:	1c3b      	adds	r3, r7, #0
 8000b08:	3324      	adds	r3, #36	; 0x24
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	0052      	lsls	r2, r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:465
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000b10:	1c3b      	adds	r3, r7, #0
 8000b12:	3324      	adds	r3, #36	; 0x24
 8000b14:	2202      	movs	r2, #2
 8000b16:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:466
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b18:	1c3b      	adds	r3, r7, #0
 8000b1a:	3324      	adds	r3, #36	; 0x24
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:467
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b20:	1c3b      	adds	r3, r7, #0
 8000b22:	3324      	adds	r3, #36	; 0x24
 8000b24:	2200      	movs	r2, #0
 8000b26:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:468
  GPIO_Init(GPIOA, &GPIO_InitStructure); 
 8000b28:	2390      	movs	r3, #144	; 0x90
 8000b2a:	05da      	lsls	r2, r3, #23
 8000b2c:	1c3b      	adds	r3, r7, #0
 8000b2e:	3324      	adds	r3, #36	; 0x24
 8000b30:	1c10      	adds	r0, r2, #0
 8000b32:	1c19      	adds	r1, r3, #0
 8000b34:	f002 f918 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:471

  /* Connect TIM1 Channels to PA8 Alternate Function 2 */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_2);
 8000b38:	2390      	movs	r3, #144	; 0x90
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	1c18      	adds	r0, r3, #0
 8000b3e:	2108      	movs	r1, #8
 8000b40:	2202      	movs	r2, #2
 8000b42:	f002 fa89 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:476
 
  
  /**********************************/
  /* Compute the value to be set in ARR regiter to generate signal frequency at 17.57 Khz */
  TimerPeriod = (SystemCoreClock / 17570 ) - 1;
 8000b46:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <PWM_Config+0x13c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1c18      	adds	r0, r3, #0
 8000b4c:	4932      	ldr	r1, [pc, #200]	; (8000c18 <PWM_Config+0x140>)
 8000b4e:	f7ff fb33 	bl	80001b8 <__aeabi_uidiv>
 8000b52:	1c03      	adds	r3, r0, #0
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	1c3b      	adds	r3, r7, #0
 8000b58:	332e      	adds	r3, #46	; 0x2e
 8000b5a:	3a01      	subs	r2, #1
 8000b5c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:478
  /* Compute CCR1 value to generate a duty cycle at 50% for channel 1 and 1N */
  Channel1Pulse = (uint16_t) (((uint32_t) 5 * (TimerPeriod - 1)) / 10);
 8000b5e:	1c3b      	adds	r3, r7, #0
 8000b60:	332e      	adds	r3, #46	; 0x2e
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	1e5a      	subs	r2, r3, #1
 8000b66:	1c13      	adds	r3, r2, #0
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	189b      	adds	r3, r3, r2
 8000b6c:	1c18      	adds	r0, r3, #0
 8000b6e:	210a      	movs	r1, #10
 8000b70:	f7ff fb22 	bl	80001b8 <__aeabi_uidiv>
 8000b74:	1c03      	adds	r3, r0, #0
 8000b76:	1c1a      	adds	r2, r3, #0
 8000b78:	1c3b      	adds	r3, r7, #0
 8000b7a:	332c      	adds	r3, #44	; 0x2c
 8000b7c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:481

  /* Time Base configuration */
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8000b7e:	1c3b      	adds	r3, r7, #0
 8000b80:	3318      	adds	r3, #24
 8000b82:	2200      	movs	r2, #0
 8000b84:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:482
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000b86:	1c3b      	adds	r3, r7, #0
 8000b88:	3318      	adds	r3, #24
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:483
  TIM_TimeBaseStructure.TIM_Period = TimerPeriod;
 8000b8e:	1c3b      	adds	r3, r7, #0
 8000b90:	332e      	adds	r3, #46	; 0x2e
 8000b92:	881a      	ldrh	r2, [r3, #0]
 8000b94:	1c3b      	adds	r3, r7, #0
 8000b96:	3318      	adds	r3, #24
 8000b98:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:484
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000b9a:	1c3b      	adds	r3, r7, #0
 8000b9c:	3318      	adds	r3, #24
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:485
  TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8000ba2:	1c3b      	adds	r3, r7, #0
 8000ba4:	3318      	adds	r3, #24
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	729a      	strb	r2, [r3, #10]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:486
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <PWM_Config+0x144>)
 8000bac:	1c3b      	adds	r3, r7, #0
 8000bae:	3318      	adds	r3, #24
 8000bb0:	1c10      	adds	r0, r2, #0
 8000bb2:	1c19      	adds	r1, r3, #0
 8000bb4:	f005 ff4c 	bl	8006a50 <TIM_TimeBaseInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:488

  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2270      	movs	r2, #112	; 0x70
 8000bbc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:489
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:490
  TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:491
  TIM_OCInitStructure.TIM_Pulse = Channel1Pulse;
 8000bca:	1c3b      	adds	r3, r7, #0
 8000bcc:	332c      	adds	r3, #44	; 0x2c
 8000bce:	881a      	ldrh	r2, [r3, #0]
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:492
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:493
  TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	81da      	strh	r2, [r3, #14]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:494
  TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	0052      	lsls	r2, r2, #1
 8000be6:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:495
  TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	825a      	strh	r2, [r3, #18]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:496
  TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <PWM_Config+0x144>)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	1c10      	adds	r0, r2, #0
 8000bf4:	1c19      	adds	r1, r3, #0
 8000bf6:	f006 f949 	bl	8006e8c <TIM_OC1Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:500


  /* TIM1 counter enable */
  TIM_Cmd(TIM1, ENABLE);
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <PWM_Config+0x144>)
 8000bfc:	1c18      	adds	r0, r3, #0
 8000bfe:	2101      	movs	r1, #1
 8000c00:	f006 f8bc 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:503

  /* TIM1 Main Output Enable */
  TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <PWM_Config+0x144>)
 8000c06:	1c18      	adds	r0, r3, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	f006 f919 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Utilities/utilities.c:505
  
}
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b00c      	add	sp, #48	; 0x30
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000024 	.word	0x20000024
 8000c18:	000044a2 	.word	0x000044a2
 8000c1c:	40012c00 	.word	0x40012c00

08000c20 <ADC_DeInit>:
ADC_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:131
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:135
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <ADC_DeInit+0x30>)
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d10b      	bne.n	8000c48 <ADC_DeInit+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:138
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	1c18      	adds	r0, r3, #0
 8000c36:	2101      	movs	r1, #1
 8000c38:	f003 fe02 	bl	8004840 <RCC_APB2PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:141

    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	1c18      	adds	r0, r3, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	f003 fdfc 	bl	8004840 <RCC_APB2PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:143
  }
}
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40012400 	.word	0x40012400

08000c54 <ADC_Init>:
ADC_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:157
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:158
  uint32_t tmpreg = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:170
  assert_param(IS_ADC_EXTERNAL_TRIG_CONV(ADC_InitStruct->ADC_ExternalTrigConv));
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_SCAN_DIRECTION(ADC_InitStruct->ADC_ScanDirection)); 

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:173

  /* Clear SCANDIR, RES[1:0], ALIGN, EXTSEL[2:0], EXTEN[1:0] and CONT bits */
  tmpreg &= CFGR1_CLEAR_MASK;
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <ADC_Init+0x54>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:184
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	035b      	lsls	r3, r3, #13
 8000c7a:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:185
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:184
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000c80:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:185
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:186
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	691b      	ldr	r3, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:185
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8000c8c:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:186
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	695b      	ldr	r3, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:184
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000c92:	4313      	orrs	r3, r2
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:189
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);

  /* Write to ADCx CFGR */
  ADCx->CFGR1 = tmpreg;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:190
}
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	ffffd203 	.word	0xffffd203

08000cac <ADC_StructInit>:
ADC_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:202
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:205
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:208

   /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:211

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:214

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_TRGO;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:217

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:220

  /* Initialize the ADC_ScanDirection member */
  ADC_InitStruct->ADC_ScanDirection = ADC_ScanDirection_Upward;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:221
}
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)

08000ce0 <ADC_Cmd>:
ADC_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:231
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	1c0a      	adds	r2, r1, #0
 8000cea:	1cfb      	adds	r3, r7, #3
 8000cec:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:236
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cee:	1cfb      	adds	r3, r7, #3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d006      	beq.n	8000d04 <ADC_Cmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:239
  {
    /* Set the ADEN bit to Enable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	e005      	b.n	8000d10 <ADC_Cmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:244
  }
  else
  {
    /* Set the ADDIS to Disable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	2202      	movs	r2, #2
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:246
  }
}
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)

08000d18 <ADC_JitterCmd>:
ADC_JitterCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:260
  * @param  NewState: new state of the ADCx jitter. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_JitterCmd(ADC_TypeDef* ADCx, uint32_t ADC_JitterOff, FunctionalState NewState)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:266
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_JITTEROFF(ADC_JitterOff));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d006      	beq.n	8000d3c <ADC_JitterCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:269
  {
    /* Disable Jitter */
    ADCx->CFGR2 |= (uint32_t)ADC_JitterOff;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	e006      	b.n	8000d4a <ADC_JitterCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:274
  }
  else
  {
    /* Enable Jitter */
    ADCx->CFGR2 &= (uint32_t)(~ADC_JitterOff);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	43d2      	mvns	r2, r2
 8000d44:	401a      	ands	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:276
  }
}
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b004      	add	sp, #16
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <ADC_AutoPowerOffCmd>:
ADC_AutoPowerOffCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:316
  * @param  NewState: new state of the ADCx power Off. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoPowerOffCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	1c0a      	adds	r2, r1, #0
 8000d5a:	1cfb      	adds	r3, r7, #3
 8000d5c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:321
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d5e:	1cfb      	adds	r3, r7, #3
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <ADC_AutoPowerOffCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:324
  {
    /* Enable the ADC Automatic Power-Off */
    ADCx->CFGR1 |= ADC_CFGR1_AUTOFF;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	0212      	lsls	r2, r2, #8
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	e005      	b.n	8000d82 <ADC_AutoPowerOffCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:329
  }
  else
  {
    /* Disable the ADC Automatic Power-Off */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AUTOFF;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <ADC_AutoPowerOffCmd+0x38>)
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:331
  }
}
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b002      	add	sp, #8
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	ffff7fff 	.word	0xffff7fff

08000d8c <ADC_WaitModeCmd>:
ADC_WaitModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:350
  * @param  NewState: new state of the ADCx Auto-Delay.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_WaitModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	1c0a      	adds	r2, r1, #0
 8000d96:	1cfb      	adds	r3, r7, #3
 8000d98:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:355
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d9a:	1cfb      	adds	r3, r7, #3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d007      	beq.n	8000db2 <ADC_WaitModeCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:358
  {
    /* Enable the ADC Automatic Delayed conversion */
    ADCx->CFGR1 |= ADC_CFGR1_WAIT;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	01d2      	lsls	r2, r2, #7
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	e005      	b.n	8000dbe <ADC_WaitModeCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:363
  }
  else
  {
    /* Disable the ADC Automatic Delayed conversion */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_WAIT;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <ADC_WaitModeCmd+0x38>)
 8000db8:	401a      	ands	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:365
  }
}
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	ffffbfff 	.word	0xffffbfff

08000dc8 <ADC_AnalogWatchdogCmd>:
ADC_AnalogWatchdogCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:402
  * @param  NewState: new state of the ADCx Analog Watchdog.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	1c0a      	adds	r2, r1, #0
 8000dd2:	1cfb      	adds	r3, r7, #3
 8000dd4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:407
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000dd6:	1cfb      	adds	r3, r7, #3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <ADC_AnalogWatchdogCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:410
  {
    /* Enable the ADC Analog Watchdog */
    ADCx->CFGR1 |= ADC_CFGR1_AWDEN;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	0412      	lsls	r2, r2, #16
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	e005      	b.n	8000dfa <ADC_AnalogWatchdogCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:415
  }
  else
  {
    /* Disable the ADC Analog Watchdog */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AWDEN;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <ADC_AnalogWatchdogCmd+0x38>)
 8000df4:	401a      	ands	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:417
  }
}
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	ff7fffff 	.word	0xff7fffff

08000e04 <ADC_AnalogWatchdogThresholdsConfig>:
ADC_AnalogWatchdogThresholdsConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:430
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	1cbb      	adds	r3, r7, #2
 8000e0e:	8019      	strh	r1, [r3, #0]
 8000e10:	1c3b      	adds	r3, r7, #0
 8000e12:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:437
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));

  /* Set the ADCx high and low threshold */
  ADCx->TR = LowThreshold | ((uint32_t)HighThreshold << 16);
 8000e14:	1c3b      	adds	r3, r7, #0
 8000e16:	881a      	ldrh	r2, [r3, #0]
 8000e18:	1cbb      	adds	r3, r7, #2
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:439

}
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)

08000e2c <ADC_AnalogWatchdogSingleChannelConfig>:
ADC_AnalogWatchdogSingleChannelConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:470
  * @note   The channel selected on the AWDCH must be also set into the CHSELR 
  *         register 
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog_Channel)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:471
  uint32_t tmpreg = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:478
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG_CHANNEL(ADC_AnalogWatchdog_Channel));

  /* Get the old register value */
  tmpreg = ADCx->CFGR1;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:481

  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~ADC_CFGR1_AWDCH;
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <ADC_AnalogWatchdogSingleChannelConfig+0x30>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:484

  /* Set the Analog watchdog channel */
  tmpreg |= ADC_AnalogWatchdog_Channel;
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:487

  /* Store the new register value */
  ADCx->CFGR1 = tmpreg;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:488
}
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b004      	add	sp, #16
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	83ffffff 	.word	0x83ffffff

08000e60 <ADC_AnalogWatchdogSingleChannelCmd>:
ADC_AnalogWatchdogSingleChannelCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:498
  * @param  NewState: new state of the ADCx ADC Analog Watchdog Single Channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	1c0a      	adds	r2, r1, #0
 8000e6a:	1cfb      	adds	r3, r7, #3
 8000e6c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:503
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e6e:	1cfb      	adds	r3, r7, #3
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <ADC_AnalogWatchdogSingleChannelCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:506
  {
    /* Enable the ADC Analog Watchdog Single Channel */
    ADCx->CFGR1 |= ADC_CFGR1_AWDSGL;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	03d2      	lsls	r2, r2, #15
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	e005      	b.n	8000e92 <ADC_AnalogWatchdogSingleChannelCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:511
  }
  else
  {
    /* Disable the ADC Analog Watchdog Single Channel */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AWDSGL;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <ADC_AnalogWatchdogSingleChannelCmd+0x38>)
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:513
  }
}
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	ffbfffff 	.word	0xffbfffff

08000e9c <ADC_TempSensorCmd>:
ADC_TempSensorCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:550
  * @param  NewState: new state of the temperature sensor input channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorCmd(FunctionalState NewState)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	1c02      	adds	r2, r0, #0
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:554
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <ADC_TempSensorCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:557
  {
    /* Enable the temperature sensor channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSEN;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <ADC_TempSensorCmd+0x38>)
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <ADC_TempSensorCmd+0x38>)
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	0409      	lsls	r1, r1, #16
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e005      	b.n	8000ecc <ADC_TempSensorCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:562
  }
  else
  {
    /* Disable the temperature sensor channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSEN);
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <ADC_TempSensorCmd+0x38>)
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <ADC_TempSensorCmd+0x38>)
 8000ec4:	6811      	ldr	r1, [r2, #0]
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <ADC_TempSensorCmd+0x3c>)
 8000ec8:	400a      	ands	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:564
  }
}
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40012708 	.word	0x40012708
 8000ed8:	ff7fffff 	.word	0xff7fffff

08000edc <ADC_VrefintCmd>:
ADC_VrefintCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:573
  * @param  NewState: new state of the Vref input channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(FunctionalState NewState)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	1c02      	adds	r2, r0, #0
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:577
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <ADC_VrefintCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:580
  {
    /* Enable the Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VREFEN;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <ADC_VrefintCmd+0x38>)
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <ADC_VrefintCmd+0x38>)
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	03c9      	lsls	r1, r1, #15
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e005      	b.n	8000f0c <ADC_VrefintCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:585
  }
  else
  {
    /* Disable the Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VREFEN);
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <ADC_VrefintCmd+0x38>)
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <ADC_VrefintCmd+0x38>)
 8000f04:	6811      	ldr	r1, [r2, #0]
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <ADC_VrefintCmd+0x3c>)
 8000f08:	400a      	ands	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:587
  }
}
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	40012708 	.word	0x40012708
 8000f18:	ffbfffff 	.word	0xffbfffff

08000f1c <ADC_VbatCmd>:
ADC_VbatCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:596
  * @param  NewState: new state of the Vbat input channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VbatCmd(FunctionalState NewState)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	1c02      	adds	r2, r0, #0
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:600
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <ADC_VbatCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:603
  {
    /* Enable the Vbat channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATEN;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <ADC_VbatCmd+0x38>)
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <ADC_VbatCmd+0x38>)
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	0449      	lsls	r1, r1, #17
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e005      	b.n	8000f4c <ADC_VbatCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:608
  }
  else
  {
    /* Disable the Vbat channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATEN);
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <ADC_VbatCmd+0x38>)
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <ADC_VbatCmd+0x38>)
 8000f44:	6811      	ldr	r1, [r2, #0]
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <ADC_VbatCmd+0x3c>)
 8000f48:	400a      	ands	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:610
  }
}
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40012708 	.word	0x40012708
 8000f58:	feffffff 	.word	0xfeffffff

08000f5c <ADC_ChannelConfig>:
ADC_ChannelConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:689
  *            @arg ADC_SampleTime_71_5Cycles: Sample time equal to 71.5 cycles
  *            @arg ADC_SampleTime_239_5Cycles: Sample time equal to 239.5 cycles
  * @retval None
  */
void ADC_ChannelConfig(ADC_TypeDef* ADCx, uint32_t ADC_Channel, uint32_t ADC_SampleTime)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:690
  uint32_t tmpreg = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:698
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Configure the ADC Channel */
  ADCx->CHSELR |= (uint32_t)ADC_Channel;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	431a      	orrs	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:701

  /* Clear the Sampling time Selection bits */
  tmpreg &= ~ADC_SMPR1_SMPR;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	4393      	bics	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:704

  /* Set the ADC Sampling Time register */
  tmpreg |= (uint32_t)ADC_SampleTime;
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:707

  /* Configure the ADC Sample time register */
  ADCx->SMPR = tmpreg ;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:708
}
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b006      	add	sp, #24
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <ADC_ContinuousModeCmd>:
ADC_ContinuousModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:721
  *         enabled. In this case (If DISCEN and CONT are Set), the ADC behaves 
  *         as if continuous mode was disabled
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	1c0a      	adds	r2, r1, #0
 8000f9e:	1cfb      	adds	r3, r7, #3
 8000fa0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:726
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
 8000fa2:	1cfb      	adds	r3, r7, #3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <ADC_ContinuousModeCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:729
  {
    /* Enable the Continuous mode*/
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_CONT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	0192      	lsls	r2, r2, #6
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	e005      	b.n	8000fc6 <ADC_ContinuousModeCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:734
  }
  else
  {
    /* Disable the Continuous mode */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_CONT);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <ADC_ContinuousModeCmd+0x38>)
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:736
  }
}
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	ffffdfff 	.word	0xffffdfff

08000fd0 <ADC_DiscModeCmd>:
ADC_DiscModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:749
  *         enabled. In this case (If DISCEN and CONT are Set), the ADC behaves 
  *         as if continuous mode was disabled
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	1c0a      	adds	r2, r1, #0
 8000fda:	1cfb      	adds	r3, r7, #3
 8000fdc:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:754
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <ADC_DiscModeCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:757
  {
    /* Enable the Discontinuous mode */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DISCEN;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	0252      	lsls	r2, r2, #9
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	e005      	b.n	8001002 <ADC_DiscModeCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:762
  }
  else
  {
    /* Disable the Discontinuous mode */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DISCEN);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	4b03      	ldr	r3, [pc, #12]	; (8001008 <ADC_DiscModeCmd+0x38>)
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:764
  }
}
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}
 8001008:	fffeffff 	.word	0xfffeffff

0800100c <ADC_OverrunModeCmd>:
ADC_OverrunModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:774
  * @param  NewState: new state of the Overrun mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_OverrunModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	1c0a      	adds	r2, r1, #0
 8001016:	1cfb      	adds	r3, r7, #3
 8001018:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:779
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
 800101a:	1cfb      	adds	r3, r7, #3
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <ADC_OverrunModeCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:782
  {
    /* Enable the Overrun mode */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_OVRMOD;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	0152      	lsls	r2, r2, #5
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	e005      	b.n	800103e <ADC_OverrunModeCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:787
  }
  else
  {
    /* Disable the Overrun mode */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_OVRMOD);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	4b03      	ldr	r3, [pc, #12]	; (8001044 <ADC_OverrunModeCmd+0x38>)
 8001038:	401a      	ands	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:789
  }
}
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}
 8001044:	ffffefff 	.word	0xffffefff

08001048 <ADC_GetCalibrationFactor>:
ADC_GetCalibrationFactor():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:799
  *         reset configuration (ADEN must be equal to 0).
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval ADC Calibration factor 
  */
uint32_t ADC_GetCalibrationFactor(ADC_TypeDef* ADCx)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:800
  uint32_t tmpreg = 0, calibrationcounter = 0, calibrationstatus = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:806

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADC calibartion */
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	0612      	lsls	r2, r2, #24
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:811 (discriminator 1)
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	0fdb      	lsrs	r3, r3, #31
 8001070:	07db      	lsls	r3, r3, #31
 8001072:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:812 (discriminator 1)
    calibrationcounter++;  
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	3301      	adds	r3, #1
 8001078:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:813 (discriminator 1)
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	23f0      	movs	r3, #240	; 0xf0
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	429a      	cmp	r2, r3
 8001082:	d002      	beq.n	800108a <ADC_GetCalibrationFactor+0x42>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1ef      	bne.n	800106a <ADC_GetCalibrationFactor+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:815
    
  if((uint32_t)(ADCx->CR & ADC_CR_ADCAL) == RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db03      	blt.n	800109a <ADC_GetCalibrationFactor+0x52>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:818
  {
    /*Get the calibration factor from the ADC data register */
    tmpreg = ADCx->DR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e001      	b.n	800109e <ADC_GetCalibrationFactor+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:823
  }
  else
  {
    /* Error factor */
    tmpreg = 0x00000000;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:825
  }
  return tmpreg;
 800109e:	697b      	ldr	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:826
}
 80010a0:	1c18      	adds	r0, r3, #0
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b006      	add	sp, #24
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <ADC_StopOfConversion>:
ADC_StopOfConversion():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:836
  *         data register is not updated with current conversion. 
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_StopOfConversion(ADC_TypeDef* ADCx)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:840
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTP;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2210      	movs	r2, #16
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:841
}
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)

080010c4 <ADC_StartOfConversion>:
ADC_StartOfConversion():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:851
  *         assertion of EOSEQ because the sequence is automatic relaunched
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_StartOfConversion(ADC_TypeDef* ADCx)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:855
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTART;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2204      	movs	r2, #4
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:856
}
 80010d8:	46bd      	mov	sp, r7
 80010da:	b002      	add	sp, #8
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)

080010e0 <ADC_GetConversionValue>:
ADC_GetConversionValue():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:864
  * @brief  Returns the last ADCx conversion result data for ADC channel.  
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:869
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:870
}
 80010ee:	1c18      	adds	r0, r3, #0
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)

080010f8 <ADC_DMACmd>:
ADC_DMACmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:908
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	1c0a      	adds	r2, r1, #0
 8001102:	1cfb      	adds	r3, r7, #3
 8001104:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:913
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001106:	1cfb      	adds	r3, r7, #3
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <ADC_DMACmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:916
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DMAEN;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2201      	movs	r2, #1
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	e007      	b.n	800112c <ADC_DMACmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:921
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DMAEN);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2201      	movs	r2, #1
 8001122:	1c19      	adds	r1, r3, #0
 8001124:	4391      	bics	r1, r2
 8001126:	1c0a      	adds	r2, r1, #0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:923
  }
}
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)

08001134 <ADC_DMARequestModeConfig>:
ADC_DMARequestModeConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:935
  *            @arg ADC_DMAMode_OneShot: DMA One Shot Mode 
  *            @arg ADC_DMAMode_Circular: DMA Circular Mode  
  *  @retval None
  */
void ADC_DMARequestModeConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMARequestMode)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:939
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_DMACFG;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2202      	movs	r2, #2
 8001144:	1c19      	adds	r1, r3, #0
 8001146:	4391      	bics	r1, r2
 8001148:	1c0a      	adds	r2, r1, #0
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:940
  ADCx->CFGR1 |= (uint32_t)ADC_DMARequestMode;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:941
}
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}

08001160 <ADC_ITConfig>:
ADC_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1043
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint32_t ADC_IT, FunctionalState NewState)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1049
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_CONFIG_IT(ADC_IT)); 

  if (NewState != DISABLE)
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <ADC_ITConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1052
  {
    /* Enable the selected ADC interrupts */
    ADCx->IER |= ADC_IT;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	431a      	orrs	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	e006      	b.n	8001192 <ADC_ITConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1057
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->IER &= (~(uint32_t)ADC_IT);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	43d2      	mvns	r2, r2
 800118c:	401a      	ands	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1059
  }
}
 8001192:	46bd      	mov	sp, r7
 8001194:	b004      	add	sp, #16
 8001196:	bd80      	pop	{r7, pc}

08001198 <ADC_GetFlagStatus>:
ADC_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1080
  *            @arg ADC_FLAG_ADSTP: ADC stop flag
  *            @arg ADC_FLAG_ADCAL: ADC Calibration flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1081
  FlagStatus bitstatus = RESET;
 80011a2:	1c3b      	adds	r3, r7, #0
 80011a4:	330f      	adds	r3, #15
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1082
  uint32_t tmpreg = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1088

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  if((uint32_t)(ADC_FLAG & 0x01000000))
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	045b      	lsls	r3, r3, #17
 80011b4:	4013      	ands	r3, r2
 80011b6:	d005      	beq.n	80011c4 <ADC_GetFlagStatus+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1090
  {
    tmpreg = ADCx->CR & 0xFEFFFFFF;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <ADC_GetFlagStatus+0x5c>)
 80011be:	4013      	ands	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	e002      	b.n	80011ca <ADC_GetFlagStatus+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1094
  }
  else
  {
    tmpreg = ADCx->ISR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1098
  }
  
  /* Check the status of the specified ADC flag */
  if ((tmpreg & ADC_FLAG) != (uint32_t)RESET)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	4013      	ands	r3, r2
 80011d0:	d004      	beq.n	80011dc <ADC_GetFlagStatus+0x44>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1101
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80011d2:	1c3b      	adds	r3, r7, #0
 80011d4:	330f      	adds	r3, #15
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	e003      	b.n	80011e4 <ADC_GetFlagStatus+0x4c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1106
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80011dc:	1c3b      	adds	r3, r7, #0
 80011de:	330f      	adds	r3, #15
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1109
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80011e4:	1c3b      	adds	r3, r7, #0
 80011e6:	330f      	adds	r3, #15
 80011e8:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1110
}
 80011ea:	1c18      	adds	r0, r3, #0
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	feffffff 	.word	0xfeffffff

080011f8 <ADC_ClearFlag>:
ADC_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1126
  *            @arg ADC_FLAG_EOSEQ: End of Sequence flag
  *            @arg ADC_FLAG_OVR: Overrun flag 
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1132
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->ISR = (uint32_t)ADC_FLAG;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1133
}
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)

08001210 <ADC_GetITStatus>:
ADC_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1149
  *            @arg ADC_IT_OVR: overrun interrupt
  *            @arg ADC_IT_AWD: Analog watchdog interrupt
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint32_t ADC_IT)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1150
  ITStatus bitstatus = RESET;
 800121a:	1c3b      	adds	r3, r7, #0
 800121c:	330f      	adds	r3, #15
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1151
  uint32_t enablestatus = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1158
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));

  /* Get the ADC_IT enable bit status */
  enablestatus = (uint32_t)(ADCx->IER & ADC_IT); 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1161

  /* Check the status of the specified ADC interrupt */
  if (((uint32_t)(ADCx->ISR & ADC_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	4013      	ands	r3, r2
 8001238:	d007      	beq.n	800124a <ADC_GetITStatus+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1161 (discriminator 1)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <ADC_GetITStatus+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1164
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8001240:	1c3b      	adds	r3, r7, #0
 8001242:	330f      	adds	r3, #15
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e003      	b.n	8001252 <ADC_GetITStatus+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1169
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 800124a:	1c3b      	adds	r3, r7, #0
 800124c:	330f      	adds	r3, #15
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1172
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8001252:	1c3b      	adds	r3, r7, #0
 8001254:	330f      	adds	r3, #15
 8001256:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1173
}
 8001258:	1c18      	adds	r0, r3, #0
 800125a:	46bd      	mov	sp, r7
 800125c:	b004      	add	sp, #16
 800125e:	bd80      	pop	{r7, pc}

08001260 <ADC_ClearITPendingBit>:
ADC_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1189
  *            @arg ADC_IT_OVR: overrun interrupt
  *            @arg ADC_IT_AWD: Analog watchdog interrupt
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint32_t ADC_IT)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1195
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_IT(ADC_IT));

  /* Clear the selected ADC interrupt pending bits */
  ADCx->ISR = (uint32_t)ADC_IT; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_adc.c:1196
}
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)

08001278 <CEC_DeInit>:
CEC_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:145
  * @brief  Deinitializes the CEC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void CEC_DeInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:146
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	05db      	lsls	r3, r3, #23
 8001280:	1c18      	adds	r0, r3, #0
 8001282:	2101      	movs	r1, #1
 8001284:	f003 fafa 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:147
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE);
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	1c18      	adds	r0, r3, #0
 800128e:	2100      	movs	r1, #0
 8001290:	f003 faf4 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:148
}
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <CEC_Init>:
CEC_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:159
  * @param  CEC_InitStruct: pointer to an CEC_InitTypeDef structure that contains
  *         the configuration information for the specified CEC peripheral.
  * @retval None
  */
void CEC_Init(CEC_InitTypeDef* CEC_InitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:160
  uint32_t tmpreg = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:172
  assert_param(IS_CEC_LONG_BIT_PERIOD_ERROR(CEC_InitStruct->CEC_LongBitPeriodError));
  assert_param(IS_CEC_BDR_NO_GEN_ERROR(CEC_InitStruct->CEC_BRDNoGen));
  assert_param(IS_CEC_SFT_OPTION(CEC_InitStruct->CEC_SFTOption));

  /* Get the CEC CFGR value */
  tmpreg = CEC->CFGR;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <CEC_Init+0x54>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:175

  /* Clear CFGR bits */
  tmpreg &= CFGR_CLEAR_MASK;
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <CEC_Init+0x58>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:178

  /* Configure the CEC peripheral */
  tmpreg |= (CEC_InitStruct->CEC_SignalFreeTime | CEC_InitStruct->CEC_RxTolerance |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:179
             CEC_InitStruct->CEC_StopReception  | CEC_InitStruct->CEC_BitRisingError |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:178

  /* Clear CFGR bits */
  tmpreg &= CFGR_CLEAR_MASK;

  /* Configure the CEC peripheral */
  tmpreg |= (CEC_InitStruct->CEC_SignalFreeTime | CEC_InitStruct->CEC_RxTolerance |
 80012c0:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:179
             CEC_InitStruct->CEC_StopReception  | CEC_InitStruct->CEC_BitRisingError |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:180
             CEC_InitStruct->CEC_LongBitPeriodError| CEC_InitStruct->CEC_BRDNoGen |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:179
  /* Clear CFGR bits */
  tmpreg &= CFGR_CLEAR_MASK;

  /* Configure the CEC peripheral */
  tmpreg |= (CEC_InitStruct->CEC_SignalFreeTime | CEC_InitStruct->CEC_RxTolerance |
             CEC_InitStruct->CEC_StopReception  | CEC_InitStruct->CEC_BitRisingError |
 80012cc:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:180
             CEC_InitStruct->CEC_LongBitPeriodError| CEC_InitStruct->CEC_BRDNoGen |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:181
             CEC_InitStruct->CEC_SFTOption);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:180
  tmpreg &= CFGR_CLEAR_MASK;

  /* Configure the CEC peripheral */
  tmpreg |= (CEC_InitStruct->CEC_SignalFreeTime | CEC_InitStruct->CEC_RxTolerance |
             CEC_InitStruct->CEC_StopReception  | CEC_InitStruct->CEC_BitRisingError |
             CEC_InitStruct->CEC_LongBitPeriodError| CEC_InitStruct->CEC_BRDNoGen |
 80012d8:	4313      	orrs	r3, r2
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:178

  /* Clear CFGR bits */
  tmpreg &= CFGR_CLEAR_MASK;

  /* Configure the CEC peripheral */
  tmpreg |= (CEC_InitStruct->CEC_SignalFreeTime | CEC_InitStruct->CEC_RxTolerance |
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:184
             CEC_InitStruct->CEC_StopReception  | CEC_InitStruct->CEC_BitRisingError |
             CEC_InitStruct->CEC_LongBitPeriodError| CEC_InitStruct->CEC_BRDNoGen |
             CEC_InitStruct->CEC_SFTOption);

  /* Write to CEC CFGR  register */
  CEC->CFGR = tmpreg;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <CEC_Init+0x54>)
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:185
}
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40007800 	.word	0x40007800
 80012f0:	7000fe00 	.word	0x7000fe00

080012f4 <CEC_StructInit>:
CEC_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:194
  * @param  CEC_InitStruct: pointer to a CEC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void CEC_StructInit(CEC_InitTypeDef* CEC_InitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:195
  CEC_InitStruct->CEC_SignalFreeTime = CEC_SignalFreeTime_Standard;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:196
  CEC_InitStruct->CEC_RxTolerance = CEC_RxTolerance_Standard;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:197
  CEC_InitStruct->CEC_StopReception = CEC_StopReception_Off;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:198
  CEC_InitStruct->CEC_BitRisingError = CEC_BitRisingError_Off;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:199
  CEC_InitStruct->CEC_LongBitPeriodError = CEC_LongBitPeriodError_Off;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:200
  CEC_InitStruct->CEC_BRDNoGen = CEC_BRDNoGen_Off;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:201
  CEC_InitStruct->CEC_SFTOption = CEC_SFTOption_Off;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:202
}
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}

0800132c <CEC_Cmd>:
CEC_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:211
  * @param  NewState: new state of the CEC peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CEC_Cmd(FunctionalState NewState)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	1c02      	adds	r2, r0, #0
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:214
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <CEC_Cmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:217
  {
    /* Enable the CEC peripheral */
    CEC->CR |= CEC_CR_CECEN;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <CEC_Cmd+0x34>)
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <CEC_Cmd+0x34>)
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	2101      	movs	r1, #1
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e005      	b.n	800135a <CEC_Cmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:222
  }
  else
  {
    /* Disable the CEC peripheral */
    CEC->CR &= ~CEC_CR_CECEN;
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <CEC_Cmd+0x34>)
 8001350:	4a03      	ldr	r2, [pc, #12]	; (8001360 <CEC_Cmd+0x34>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	438a      	bics	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:224
  }
}
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40007800 	.word	0x40007800

08001364 <CEC_ListenModeCmd>:
CEC_ListenModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:233
  * @param  NewState: new state of the Listen Mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CEC_ListenModeCmd(FunctionalState NewState)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	1dfb      	adds	r3, r7, #7
 800136e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:236
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <CEC_ListenModeCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:239
  {
    /* Enable the Listen Mode */
    CEC->CFGR |= CEC_CFGR_LSTN;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <CEC_ListenModeCmd+0x38>)
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <CEC_ListenModeCmd+0x38>)
 800137c:	6852      	ldr	r2, [r2, #4]
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	0609      	lsls	r1, r1, #24
 8001382:	430a      	orrs	r2, r1
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	e005      	b.n	8001394 <CEC_ListenModeCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:244
  }
  else
  {
    /* Disable the Listen Mode */
    CEC->CFGR &= ~CEC_CFGR_LSTN;
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <CEC_ListenModeCmd+0x38>)
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <CEC_ListenModeCmd+0x38>)
 800138c:	6852      	ldr	r2, [r2, #4]
 800138e:	0052      	lsls	r2, r2, #1
 8001390:	0852      	lsrs	r2, r2, #1
 8001392:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:246
  }
}
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40007800 	.word	0x40007800

080013a0 <CEC_OwnAddressConfig>:
CEC_OwnAddressConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:254
  * @brief  Defines the Own Address of the CEC device.
  * @param  CEC_OwnAddress: The CEC own address.
  * @retval None
  */
void CEC_OwnAddressConfig(uint8_t CEC_OwnAddress)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	1c02      	adds	r2, r0, #0
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:255
  uint32_t tmp =0x00;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:258
  /* Check the parameters */
  assert_param(IS_CEC_ADDRESS(CEC_OwnAddress));
  tmp = 1 <<(CEC_OwnAddress + 16);
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3310      	adds	r3, #16
 80013b6:	2201      	movs	r2, #1
 80013b8:	1c11      	adds	r1, r2, #0
 80013ba:	4099      	lsls	r1, r3
 80013bc:	1c0b      	adds	r3, r1, #0
 80013be:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:260
  /* Set the CEC own address */
  CEC->CFGR |= tmp;
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <CEC_OwnAddressConfig+0x34>)
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <CEC_OwnAddressConfig+0x34>)
 80013c4:	6851      	ldr	r1, [r2, #4]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:261
}
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b004      	add	sp, #16
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	40007800 	.word	0x40007800

080013d8 <CEC_OwnAddressClear>:
CEC_OwnAddressClear():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:269
  * @brief  Clears the Own Address of the CEC device.
  * @param  CEC_OwnAddress: The CEC own address.
  * @retval None
  */
void CEC_OwnAddressClear(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:271
  /* Set the CEC own address */
  CEC->CFGR = 0x0;
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <CEC_OwnAddressClear+0x10>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:272
}
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	40007800 	.word	0x40007800

080013ec <CEC_SendData>:
CEC_SendData():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:299
  * @brief  Transmits single data through the CEC peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void CEC_SendData(uint8_t Data)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	1c02      	adds	r2, r0, #0
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:301
  /* Transmit Data */
  CEC->TXDR = Data;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <CEC_SendData+0x1c>)
 80013fa:	1dfa      	adds	r2, r7, #7
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:302
}
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40007800 	.word	0x40007800

0800140c <CEC_ReceiveData>:
CEC_ReceiveData():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:310
  * @brief  Returns the most recent received data by the CEC peripheral.
  * @param  None
  * @retval The received data.
  */
uint8_t CEC_ReceiveData(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:312
  /* Receive Data */
  return (uint8_t)(CEC->RXDR);
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <CEC_ReceiveData+0x10>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:313
}
 8001416:	1c18      	adds	r0, r3, #0
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40007800 	.word	0x40007800

08001420 <CEC_StartOfMessage>:
CEC_StartOfMessage():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:321
  * @brief  Starts a new message.
  * @param  None
  * @retval None
  */
void CEC_StartOfMessage(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:323
  /* Starts of new message */
  CEC->CR |= CEC_CR_TXSOM; 
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <CEC_StartOfMessage+0x14>)
 8001426:	4a03      	ldr	r2, [pc, #12]	; (8001434 <CEC_StartOfMessage+0x14>)
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	2102      	movs	r1, #2
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:324
}
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40007800 	.word	0x40007800

08001438 <CEC_EndOfMessage>:
CEC_EndOfMessage():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:332
  * @brief  Transmits message with an EOM bit.
  * @param  None
  * @retval None
  */
void CEC_EndOfMessage(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:334
  /* The data byte will be transmitted with an EOM bit */
  CEC->CR |= CEC_CR_TXEOM;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <CEC_EndOfMessage+0x14>)
 800143e:	4a03      	ldr	r2, [pc, #12]	; (800144c <CEC_EndOfMessage+0x14>)
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	2104      	movs	r1, #4
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:335
}
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40007800 	.word	0x40007800

08001450 <CEC_ITConfig>:
CEC_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:432
  * @param  NewState: new state of the selected CEC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CEC_ITConfig(uint16_t CEC_IT, FunctionalState NewState)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	1c0a      	adds	r2, r1, #0
 8001458:	1dbb      	adds	r3, r7, #6
 800145a:	1c01      	adds	r1, r0, #0
 800145c:	8019      	strh	r1, [r3, #0]
 800145e:	1d7b      	adds	r3, r7, #5
 8001460:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:436
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_CEC_IT(CEC_IT));

  if (NewState != DISABLE)
 8001462:	1d7b      	adds	r3, r7, #5
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <CEC_ITConfig+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:439
  {
    /* Enable the selected CEC interrupt */
    CEC->IER |= CEC_IT;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <CEC_ITConfig+0x48>)
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <CEC_ITConfig+0x48>)
 800146e:	6951      	ldr	r1, [r2, #20]
 8001470:	1dba      	adds	r2, r7, #6
 8001472:	8812      	ldrh	r2, [r2, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	e00b      	b.n	8001492 <CEC_ITConfig+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:443
  }
  else
  {
    CEC_IT =~CEC_IT;
 800147a:	1dbb      	adds	r3, r7, #6
 800147c:	1dba      	adds	r2, r7, #6
 800147e:	8812      	ldrh	r2, [r2, #0]
 8001480:	43d2      	mvns	r2, r2
 8001482:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:445
    /* Disable the selected CEC interrupt */
    CEC->IER &= CEC_IT;
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <CEC_ITConfig+0x48>)
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <CEC_ITConfig+0x48>)
 8001488:	6952      	ldr	r2, [r2, #20]
 800148a:	1db9      	adds	r1, r7, #6
 800148c:	8809      	ldrh	r1, [r1, #0]
 800148e:	400a      	ands	r2, r1
 8001490:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:447
  }
}
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40007800 	.word	0x40007800

0800149c <CEC_GetFlagStatus>:
CEC_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:469
  *            @arg CEC_FLAG_RXEND: End Of Reception.
  *            @arg CEC_FLAG_RXBR: Rx-Byte Received.
  * @retval The new state of CEC_FLAG (SET or RESET)
  */
FlagStatus CEC_GetFlagStatus(uint16_t CEC_FLAG) 
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	1c02      	adds	r2, r0, #0
 80014a4:	1dbb      	adds	r3, r7, #6
 80014a6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:470
  FlagStatus bitstatus = RESET;
 80014a8:	1c3b      	adds	r3, r7, #0
 80014aa:	330f      	adds	r3, #15
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:475
  
  assert_param(IS_CEC_GET_FLAG(CEC_FLAG));
  
  /* Check the status of the specified CEC flag */
  if ((CEC->ISR & CEC_FLAG) != (uint16_t)RESET)
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <CEC_GetFlagStatus+0x40>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	1dba      	adds	r2, r7, #6
 80014b6:	8812      	ldrh	r2, [r2, #0]
 80014b8:	4013      	ands	r3, r2
 80014ba:	d004      	beq.n	80014c6 <CEC_GetFlagStatus+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:478
  {
    /* CEC flag is set */
    bitstatus = SET;
 80014bc:	1c3b      	adds	r3, r7, #0
 80014be:	330f      	adds	r3, #15
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e003      	b.n	80014ce <CEC_GetFlagStatus+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:483
  }
  else
  {
    /* CEC flag is reset */
    bitstatus = RESET;
 80014c6:	1c3b      	adds	r3, r7, #0
 80014c8:	330f      	adds	r3, #15
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:487
  }

  /* Return the CEC flag status */
  return  bitstatus;
 80014ce:	1c3b      	adds	r3, r7, #0
 80014d0:	330f      	adds	r3, #15
 80014d2:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:488
}
 80014d4:	1c18      	adds	r0, r3, #0
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b004      	add	sp, #16
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40007800 	.word	0x40007800

080014e0 <CEC_ClearFlag>:
CEC_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:510
  *            @arg CEC_FLAG_RXEND: End Of Reception
  *            @arg CEC_FLAG_RXBR: Rx-Byte Received
  * @retval None
  */
void CEC_ClearFlag(uint32_t CEC_FLAG)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:514
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  /* Clear the selected CEC flag */
  CEC->ISR = CEC_FLAG;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <CEC_ClearFlag+0x14>)
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:515
}
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40007800 	.word	0x40007800

080014f8 <CEC_GetITStatus>:
CEC_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:537
  *            @arg CEC_IT_RXEND: End Of Reception.
  *            @arg CEC_IT_RXBR: Rx-Byte Received 
  * @retval The new state of CEC_IT (SET or RESET).
  */
ITStatus CEC_GetITStatus(uint16_t CEC_IT)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	1c02      	adds	r2, r0, #0
 8001500:	1dbb      	adds	r3, r7, #6
 8001502:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:538
  ITStatus bitstatus = RESET;
 8001504:	1c3b      	adds	r3, r7, #0
 8001506:	330f      	adds	r3, #15
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:539
  uint32_t enablestatus = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:545

  /* Check the parameters */
  assert_param(IS_CEC_GET_IT(CEC_IT));

  /* Get the CEC IT enable bit status */
  enablestatus = (CEC->IER & CEC_IT);
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <CEC_GetITStatus+0x58>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	1dba      	adds	r2, r7, #6
 8001516:	8812      	ldrh	r2, [r2, #0]
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:548

  /* Check the status of the specified CEC interrupt */
  if (((CEC->ISR & CEC_IT) != (uint32_t)RESET) && enablestatus)
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <CEC_GetITStatus+0x58>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	1dba      	adds	r2, r7, #6
 8001522:	8812      	ldrh	r2, [r2, #0]
 8001524:	4013      	ands	r3, r2
 8001526:	d007      	beq.n	8001538 <CEC_GetITStatus+0x40>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:548 (discriminator 1)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <CEC_GetITStatus+0x40>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:551
  {
    /* CEC interrupt is set */
    bitstatus = SET;
 800152e:	1c3b      	adds	r3, r7, #0
 8001530:	330f      	adds	r3, #15
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	e003      	b.n	8001540 <CEC_GetITStatus+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:556
  }
  else
  {
    /* CEC interrupt is reset */
    bitstatus = RESET;
 8001538:	1c3b      	adds	r3, r7, #0
 800153a:	330f      	adds	r3, #15
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:560
  }

  /* Return the CEC interrupt status */
  return  bitstatus;
 8001540:	1c3b      	adds	r3, r7, #0
 8001542:	330f      	adds	r3, #15
 8001544:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:561
}
 8001546:	1c18      	adds	r0, r3, #0
 8001548:	46bd      	mov	sp, r7
 800154a:	b004      	add	sp, #16
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40007800 	.word	0x40007800

08001554 <CEC_ClearITPendingBit>:
CEC_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:583
  *            @arg CEC_IT_RXEND: End Of Reception
  *            @arg CEC_IT_RXBR: Rx-Byte Received
  * @retval None
  */
void CEC_ClearITPendingBit(uint16_t CEC_IT)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	1c02      	adds	r2, r0, #0
 800155c:	1dbb      	adds	r3, r7, #6
 800155e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:587
  assert_param(IS_CEC_IT(CEC_IT));

  /* Clear the selected CEC interrupt pending bits */
  CEC->ISR = CEC_IT;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <CEC_ClearITPendingBit+0x1c>)
 8001562:	1dba      	adds	r2, r7, #6
 8001564:	8812      	ldrh	r2, [r2, #0]
 8001566:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_cec.c:588
}
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	40007800 	.word	0x40007800

08001574 <COMP_DeInit>:
COMP_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:143
  *         To unlock the configuration, perform a system reset.
  * @param  None
  * @retval None
  */
void COMP_DeInit(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:144
  COMP->CSR = ((uint32_t)0x00000000);    /*!< Set COMP_CSR register to reset value */
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <COMP_DeInit+0x10>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:145
}
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	4001001c 	.word	0x4001001c

08001588 <COMP_Init>:
COMP_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:163
  * @param  COMP_InitStruct: pointer to an COMP_InitTypeDef structure that contains 
  *         the configuration information for the specified COMP peripheral.
  * @retval None
  */
void COMP_Init(uint32_t COMP_Selection, COMP_InitTypeDef* COMP_InitStruct)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:164
  uint32_t tmpreg = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:175
  assert_param(IS_COMP_OUTPUT_POL(COMP_InitStruct->COMP_OutputPol));
  assert_param(IS_COMP_HYSTERESIS(COMP_InitStruct->COMP_Hysteresis));
  assert_param(IS_COMP_MODE(COMP_InitStruct->COMP_Mode));

  /*!< Get the COMP_CSR register value */
  tmpreg = COMP->CSR;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <COMP_Init+0x5c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:178

  /*!< Clear the COMP1SW1, COMPx_IN_SEL, COMPx_OUT_TIM_SEL, COMPx_POL, COMPx_HYST and COMPx_PWR_MODE bits */ 
  tmpreg &= (uint32_t) ~(COMP_CSR_CLEAR_MASK<<COMP_Selection);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <COMP_Init+0x60>)
 80015a0:	1c11      	adds	r1, r2, #0
 80015a2:	4099      	lsls	r1, r3
 80015a4:	1c0b      	adds	r3, r1, #0
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:186
  /*!< Set COMPxINSEL bits according to COMP_InitStruct->COMP_InvertingInput value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */   
  tmpreg |= (uint32_t)((COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_Output |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:187
                       COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_Hysteresis |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:186
  /*!< Set COMPxINSEL bits according to COMP_InitStruct->COMP_InvertingInput value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */   
  tmpreg |= (uint32_t)((COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_Output |
 80015bc:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:187
                       COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_Hysteresis |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:188
                       COMP_InitStruct->COMP_Mode)<<COMP_Selection);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:187
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */   
  tmpreg |= (uint32_t)((COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_Output |
                       COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_Hysteresis |
 80015c8:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:186
  /*!< Set COMPxINSEL bits according to COMP_InitStruct->COMP_InvertingInput value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */   
  tmpreg |= (uint32_t)((COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_Output |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	1c11      	adds	r1, r2, #0
 80015ce:	4099      	lsls	r1, r3
 80015d0:	1c0b      	adds	r3, r1, #0
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:191
                       COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_Hysteresis |
                       COMP_InitStruct->COMP_Mode)<<COMP_Selection);

  /*!< Write to COMP_CSR register */
  COMP->CSR = tmpreg;  
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <COMP_Init+0x5c>)
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:192
}
 80015de:	46bd      	mov	sp, r7
 80015e0:	b004      	add	sp, #16
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	4001001c 	.word	0x4001001c
 80015e8:	00003ffe 	.word	0x00003ffe

080015ec <COMP_StructInit>:
COMP_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:201
  * @param  COMP_InitStruct: pointer to an COMP_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:202
  COMP_InitStruct->COMP_InvertingInput = COMP_InvertingInput_1_4VREFINT;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:203
  COMP_InitStruct->COMP_Output = COMP_Output_None;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:204
  COMP_InitStruct->COMP_OutputPol = COMP_OutputPol_NonInverted;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:205
  COMP_InitStruct->COMP_Hysteresis = COMP_Hysteresis_No;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:206
  COMP_InitStruct->COMP_Mode = COMP_Mode_UltraLowPower;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	220c      	movs	r2, #12
 8001610:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:207
}
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}

08001618 <COMP_Cmd>:
COMP_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:226
  * @note   When disabled, the comparator doesn't perform comparison and the 
  *         output level is low.
  * @retval None
  */
void COMP_Cmd(uint32_t COMP_Selection, FunctionalState NewState)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	1c0a      	adds	r2, r1, #0
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:231
  /* Check the parameters */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001626:	1cfb      	adds	r3, r7, #3
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00a      	beq.n	8001644 <COMP_Cmd+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:234
  {
    /* Enable the selected COMP peripheral */
    COMP->CSR |= (uint32_t) (1<<COMP_Selection);
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <COMP_Cmd+0x48>)
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <COMP_Cmd+0x48>)
 8001632:	6811      	ldr	r1, [r2, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	2001      	movs	r0, #1
 8001638:	1c04      	adds	r4, r0, #0
 800163a:	4094      	lsls	r4, r2
 800163c:	1c22      	adds	r2, r4, #0
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e00a      	b.n	800165a <COMP_Cmd+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:239
  }
  else
  {
    /* Disable the selected COMP peripheral  */
    COMP->CSR &= (uint32_t)(~((uint32_t)1<<COMP_Selection));
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <COMP_Cmd+0x48>)
 8001646:	4a06      	ldr	r2, [pc, #24]	; (8001660 <COMP_Cmd+0x48>)
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	2001      	movs	r0, #1
 800164e:	1c04      	adds	r4, r0, #0
 8001650:	408c      	lsls	r4, r1
 8001652:	1c21      	adds	r1, r4, #0
 8001654:	43c9      	mvns	r1, r1
 8001656:	400a      	ands	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:241
  }
}
 800165a:	46bd      	mov	sp, r7
 800165c:	b003      	add	sp, #12
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	4001001c 	.word	0x4001001c

08001664 <COMP_SwitchCmd>:
COMP_SwitchCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:254
  * @note   When enabled, the SW1 is closed; PA1 is connected to PA4
  * @note   When disabled, the SW1 switch is open; PA1 is disconnected from PA4
  * @retval None
  */
void COMP_SwitchCmd(FunctionalState NewState)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	1c02      	adds	r2, r0, #0
 800166c:	1dfb      	adds	r3, r7, #7
 800166e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:258
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001670:	1dfb      	adds	r3, r7, #7
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <COMP_SwitchCmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:261
  {
    /* Close SW1 switch */
    COMP->CSR |= (uint32_t) (COMP_CSR_COMP1SW1);
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <COMP_SwitchCmd+0x34>)
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <COMP_SwitchCmd+0x34>)
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	2102      	movs	r1, #2
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e005      	b.n	8001692 <COMP_SwitchCmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:266
  }
  else
  {
    /* Open SW1 switch */
    COMP->CSR &= (uint32_t)(~COMP_CSR_COMP1SW1);
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <COMP_SwitchCmd+0x34>)
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <COMP_SwitchCmd+0x34>)
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	2102      	movs	r1, #2
 800168e:	438a      	bics	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:268
  }
}
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}
 8001698:	4001001c 	.word	0x4001001c

0800169c <COMP_GetOutputLevel>:
COMP_GetOutputLevel():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:291
  *            @arg COMP_Selection_COMP2: COMP2 selected  
  * @retval Returns the selected comparator output level: low or high.
  *       
  */
uint32_t COMP_GetOutputLevel(uint32_t COMP_Selection)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:292
  uint32_t compout = 0x0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:298

  /* Check the parameters */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));

  /* Check if selected comparator output is high */
  if ((COMP->CSR & (COMP_CSR_COMP1OUT<<COMP_Selection)) != 0)
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <COMP_GetOutputLevel+0x38>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	01c9      	lsls	r1, r1, #7
 80016b2:	1c08      	adds	r0, r1, #0
 80016b4:	4090      	lsls	r0, r2
 80016b6:	1c02      	adds	r2, r0, #0
 80016b8:	4013      	ands	r3, r2
 80016ba:	d003      	beq.n	80016c4 <COMP_GetOutputLevel+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:300
  {
    compout = COMP_OutputLevel_High;
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	01db      	lsls	r3, r3, #7
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	e001      	b.n	80016c8 <COMP_GetOutputLevel+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:304
  }
  else
  {
    compout = COMP_OutputLevel_Low;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:308
  }

  /* Return the comparator output level */
  return (uint32_t)(compout);
 80016c8:	68fb      	ldr	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:309
}
 80016ca:	1c18      	adds	r0, r3, #0
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b004      	add	sp, #16
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	4001001c 	.word	0x4001001c

080016d8 <COMP_WindowCmd>:
COMP_WindowCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:338
  *           @arg ENABLE: COMP1 and COMP2 non inverting inputs are connected together.
  *           @arg DISABLE: OMP1 and COMP2 non inverting inputs are disconnected.
  * @retval None
  */
void COMP_WindowCmd(FunctionalState NewState)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	1c02      	adds	r2, r0, #0
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:342
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <COMP_WindowCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:345
  {
    /* Enable the window mode */
    COMP->CSR |= (uint32_t) COMP_CSR_WNDWEN;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <COMP_WindowCmd+0x38>)
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <COMP_WindowCmd+0x38>)
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0409      	lsls	r1, r1, #16
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e005      	b.n	8001708 <COMP_WindowCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:350
  }
  else
  {
    /* Disable the window mode */
    COMP->CSR &= (uint32_t)(~COMP_CSR_WNDWEN);
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <COMP_WindowCmd+0x38>)
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <COMP_WindowCmd+0x38>)
 8001700:	6811      	ldr	r1, [r2, #0]
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <COMP_WindowCmd+0x3c>)
 8001704:	400a      	ands	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:352
  }
}
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	4001001c 	.word	0x4001001c
 8001714:	ff7fffff 	.word	0xff7fffff

08001718 <COMP_LockConfig>:
COMP_LockConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:383
  *            @arg COMP_Selection_COMP1: COMP1 configuration is locked.
  *            @arg COMP_Selection_COMP2: COMP2 configuration is locked.  
  * @retval None
  */
void COMP_LockConfig(uint32_t COMP_Selection)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:388
  /* Check the parameter */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));

  /* Set the lock bit corresponding to selected comparator */
  COMP->CSR |= (uint32_t) (COMP_CSR_COMP1LOCK<<COMP_Selection);
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <COMP_LockConfig+0x24>)
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <COMP_LockConfig+0x24>)
 8001724:	6811      	ldr	r1, [r2, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	2080      	movs	r0, #128	; 0x80
 800172a:	0200      	lsls	r0, r0, #8
 800172c:	1c04      	adds	r4, r0, #0
 800172e:	4094      	lsls	r4, r2
 8001730:	1c22      	adds	r2, r4, #0
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_comp.c:389
}
 8001736:	46bd      	mov	sp, r7
 8001738:	b003      	add	sp, #12
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	4001001c 	.word	0x4001001c

08001740 <CRC_DeInit>:
CRC_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:95
  * @brief  Deinitializes CRC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void CRC_DeInit(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:97
  /* Set DR register to reset value */
  CRC->DR = 0xFFFFFFFF;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <CRC_DeInit+0x24>)
 8001746:	2201      	movs	r2, #1
 8001748:	4252      	negs	r2, r2
 800174a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:99
  /* Reset IDR register */
  CRC->IDR = 0x00;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <CRC_DeInit+0x24>)
 800174e:	2200      	movs	r2, #0
 8001750:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:101
  /* Set INIT register to reset value */
  CRC->INIT = 0xFFFFFFFF;
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <CRC_DeInit+0x24>)
 8001754:	2201      	movs	r2, #1
 8001756:	4252      	negs	r2, r2
 8001758:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:103
  /* Reset the CRC calculation unit */
  CRC->CR = CRC_CR_RESET;
 800175a:	4b02      	ldr	r3, [pc, #8]	; (8001764 <CRC_DeInit+0x24>)
 800175c:	2201      	movs	r2, #1
 800175e:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:104
}
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023000 	.word	0x40023000

08001768 <CRC_ResetDR>:
CRC_ResetDR():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:112
  * @brief  Resets the CRC calculation unit and sets INIT register content in DR register.
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:114
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <CRC_ResetDR+0x10>)
 800176e:	2201      	movs	r2, #1
 8001770:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:115
}
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40023000 	.word	0x40023000

0800177c <CRC_ReverseInputDataSelect>:
CRC_ReverseInputDataSelect():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:128
  *            @arg CRC_ReverseInputData_16bits: reverse operation performed on 16 bits
  *            @arg CRC_ReverseInputData_32bits: reverse operation performed on 32 bits
  * @retval None
  */
void CRC_ReverseInputDataSelect(uint32_t CRC_ReverseInputData)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:129
  uint32_t tmpcr = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:135

  /* Check the parameter */
  assert_param(IS_CRC_REVERSE_INPUT_DATA(CRC_ReverseInputData));

  /* Get CR register value */
  tmpcr = CRC->CR;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <CRC_ReverseInputDataSelect+0x30>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:138

  /* Reset REV_IN bits */
  tmpcr &= (uint32_t)~((uint32_t)CRC_CR_REV_IN);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2260      	movs	r2, #96	; 0x60
 8001792:	4393      	bics	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:140
  /* Set the reverse operation */
  tmpcr |= (uint32_t)CRC_ReverseInputData;
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4313      	orrs	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:143

  /* Write to CR register */
  CRC->CR = (uint32_t)tmpcr;
 800179e:	4b03      	ldr	r3, [pc, #12]	; (80017ac <CRC_ReverseInputDataSelect+0x30>)
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:144
}
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b004      	add	sp, #16
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	40023000 	.word	0x40023000

080017b0 <CRC_ReverseOutputDataCmd>:
CRC_ReverseOutputDataCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:154
  * @param  NewState: new state of the reverse operation on output data.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRC_ReverseOutputDataCmd(FunctionalState NewState)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	1c02      	adds	r2, r0, #0
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:158
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <CRC_ReverseOutputDataCmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:161
  {
    /* Enable reverse operation on output data */
    CRC->CR |= CRC_CR_REV_OUT;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <CRC_ReverseOutputDataCmd+0x34>)
 80017c6:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <CRC_ReverseOutputDataCmd+0x34>)
 80017c8:	6892      	ldr	r2, [r2, #8]
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	430a      	orrs	r2, r1
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	e005      	b.n	80017de <CRC_ReverseOutputDataCmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:166
  }
  else
  {
    /* Disable reverse operation on output data */
    CRC->CR &= (uint32_t)~((uint32_t)CRC_CR_REV_OUT);
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <CRC_ReverseOutputDataCmd+0x34>)
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <CRC_ReverseOutputDataCmd+0x34>)
 80017d6:	6892      	ldr	r2, [r2, #8]
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	438a      	bics	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:168
  }
}
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023000 	.word	0x40023000

080017e8 <CRC_SetInitRegister>:
CRC_SetInitRegister():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:177
  * @note   After resetting CRC calculation unit, CRC_InitValue is stored in DR register
  * @param  CRC_InitValue: Programmable initial CRC value
  * @retval None
  */
void CRC_SetInitRegister(uint32_t CRC_InitValue)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:178
  CRC->INIT = CRC_InitValue;
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <CRC_SetInitRegister+0x14>)
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:179
}
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023000 	.word	0x40023000

08001800 <CRC_CalcCRC>:
CRC_CalcCRC():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:203
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  CRC_Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t CRC_Data)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:204
  CRC->DR = CRC_Data;
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <CRC_CalcCRC+0x1c>)
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:206
  
  return (CRC->DR);
 800180e:	4b03      	ldr	r3, [pc, #12]	; (800181c <CRC_CalcCRC+0x1c>)
 8001810:	681b      	ldr	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:207
}
 8001812:	1c18      	adds	r0, r3, #0
 8001814:	46bd      	mov	sp, r7
 8001816:	b002      	add	sp, #8
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	40023000 	.word	0x40023000

08001820 <CRC_CalcBlockCRC>:
CRC_CalcBlockCRC():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:216
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:217
  uint32_t index = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:219
  
  for(index = 0; index < BufferLength; index++)
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	e009      	b.n	8001848 <CRC_CalcBlockCRC+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:221 (discriminator 2)
  {
    CRC->DR = pBuffer[index];
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <CRC_CalcBlockCRC+0x3c>)
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	188a      	adds	r2, r1, r2
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:219 (discriminator 2)
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:219 (discriminator 1)
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3f1      	bcc.n	8001834 <CRC_CalcBlockCRC+0x14>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:223
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <CRC_CalcBlockCRC+0x3c>)
 8001852:	681b      	ldr	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:224
}
 8001854:	1c18      	adds	r0, r3, #0
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023000 	.word	0x40023000

08001860 <CRC_GetCRC>:
CRC_GetCRC():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:232
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:233
  return (CRC->DR);
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <CRC_GetCRC+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:234
}
 8001868:	1c18      	adds	r0, r3, #0
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40023000 	.word	0x40023000

08001874 <CRC_SetIDRegister>:
CRC_SetIDRegister():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:258
  * @brief  Stores an 8-bit data in the Independent Data(ID) register.
  * @param  CRC_IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t CRC_IDValue)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	1c02      	adds	r2, r0, #0
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:259
  CRC->IDR = CRC_IDValue;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <CRC_SetIDRegister+0x1c>)
 8001882:	1dfa      	adds	r2, r7, #7
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:260
}
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40023000 	.word	0x40023000

08001894 <CRC_GetIDRegister>:
CRC_GetIDRegister():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:268
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:269
  return (CRC->IDR);
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <CRC_GetIDRegister+0x10>)
 800189a:	791b      	ldrb	r3, [r3, #4]
 800189c:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crc.c:270
}
 800189e:	1c18      	adds	r0, r3, #0
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023000 	.word	0x40023000

080018a8 <DAC_DeInit>:
DAC_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:149
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:151
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	059b      	lsls	r3, r3, #22
 80018b0:	1c18      	adds	r0, r3, #0
 80018b2:	2101      	movs	r1, #1
 80018b4:	f002 ffe2 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:153
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	059b      	lsls	r3, r3, #22
 80018bc:	1c18      	adds	r0, r3, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	f002 ffdc 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:154
}
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <DAC_Init>:
DAC_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:167
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *         contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:168
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:177
  assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

  /*---------------------------- DAC CR Configuration ------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <DAC_Init+0x54>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:180

  /* Clear BOFFx, TENx, TSELx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	223e      	movs	r2, #62	; 0x3e
 80018e4:	1c11      	adds	r1, r2, #0
 80018e6:	4099      	lsls	r1, r3
 80018e8:	1c0b      	adds	r3, r1, #0
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:185

  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_OutputBuffer);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:188

  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	1c11      	adds	r1, r2, #0
 8001904:	4099      	lsls	r1, r3
 8001906:	1c0b      	adds	r3, r1, #0
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:191

  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800190e:	4b03      	ldr	r3, [pc, #12]	; (800191c <DAC_Init+0x54>)
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:192
}
 8001914:	46bd      	mov	sp, r7
 8001916:	b004      	add	sp, #16
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40007400 	.word	0x40007400

08001920 <DAC_StructInit>:
DAC_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:201
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:204
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:206
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:207
}
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)

0800193c <DAC_Cmd>:
DAC_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:220
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	1c0a      	adds	r2, r1, #0
 8001946:	1cfb      	adds	r3, r7, #3
 8001948:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:225
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800194a:	1cfb      	adds	r3, r7, #3
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <DAC_Cmd+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:228
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <DAC_Cmd+0x48>)
 8001954:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <DAC_Cmd+0x48>)
 8001956:	6811      	ldr	r1, [r2, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	2001      	movs	r0, #1
 800195c:	1c04      	adds	r4, r0, #0
 800195e:	4094      	lsls	r4, r2
 8001960:	1c22      	adds	r2, r4, #0
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e00a      	b.n	800197e <DAC_Cmd+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:233
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <DAC_Cmd+0x48>)
 800196a:	4a06      	ldr	r2, [pc, #24]	; (8001984 <DAC_Cmd+0x48>)
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	2001      	movs	r0, #1
 8001972:	1c04      	adds	r4, r0, #0
 8001974:	408c      	lsls	r4, r1
 8001976:	1c21      	adds	r1, r4, #0
 8001978:	43c9      	mvns	r1, r1
 800197a:	400a      	ands	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:235
  }
}
 800197e:	46bd      	mov	sp, r7
 8001980:	b003      	add	sp, #12
 8001982:	bd90      	pop	{r4, r7, pc}
 8001984:	40007400 	.word	0x40007400

08001988 <DAC_SoftwareTriggerCmd>:
DAC_SoftwareTriggerCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:247
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	1c0a      	adds	r2, r1, #0
 8001992:	1cfb      	adds	r3, r7, #3
 8001994:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:252
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001996:	1cfb      	adds	r3, r7, #3
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <DAC_SoftwareTriggerCmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:255
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <DAC_SoftwareTriggerCmd+0x4c>)
 80019a0:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <DAC_SoftwareTriggerCmd+0x4c>)
 80019a2:	6851      	ldr	r1, [r2, #4]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	0912      	lsrs	r2, r2, #4
 80019a8:	2001      	movs	r0, #1
 80019aa:	1c04      	adds	r4, r0, #0
 80019ac:	4094      	lsls	r4, r2
 80019ae:	1c22      	adds	r2, r4, #0
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	e00b      	b.n	80019ce <DAC_SoftwareTriggerCmd+0x46>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:260
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <DAC_SoftwareTriggerCmd+0x4c>)
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <DAC_SoftwareTriggerCmd+0x4c>)
 80019ba:	6852      	ldr	r2, [r2, #4]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	0909      	lsrs	r1, r1, #4
 80019c0:	2001      	movs	r0, #1
 80019c2:	1c04      	adds	r4, r0, #0
 80019c4:	408c      	lsls	r4, r1
 80019c6:	1c21      	adds	r1, r4, #0
 80019c8:	43c9      	mvns	r1, r1
 80019ca:	400a      	ands	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:262
  }
}
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b003      	add	sp, #12
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	40007400 	.word	0x40007400

080019d8 <DAC_SetChannel1Data>:
DAC_SetChannel1Data():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:275
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	1c0a      	adds	r2, r1, #0
 80019e2:	1cbb      	adds	r3, r7, #2
 80019e4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:276
  __IO uint32_t tmp = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:282
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <DAC_SetChannel1Data+0x30>)
 80019ec:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:283
  tmp += DHR12R1_OFFSET + DAC_Align;
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	18d3      	adds	r3, r2, r3
 80019f4:	3308      	adds	r3, #8
 80019f6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:286

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1cba      	adds	r2, r7, #2
 80019fc:	8812      	ldrh	r2, [r2, #0]
 80019fe:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:287
}
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b004      	add	sp, #16
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40007400 	.word	0x40007400

08001a0c <DAC_GetDataOutputValue>:
DAC_GetDataOutputValue():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:297
  *          This parameter can be one of the following values:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:298
  __IO uint32_t tmp = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:303
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <DAC_GetDataOutputValue+0x2c>)
 8001a1a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:304
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	089a      	lsrs	r2, r3, #2
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	18d3      	adds	r3, r2, r3
 8001a24:	332c      	adds	r3, #44	; 0x2c
 8001a26:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:307
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:308
}
 8001a2e:	1c18      	adds	r0, r3, #0
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b004      	add	sp, #16
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40007400 	.word	0x40007400

08001a3c <DAC_DMACmd>:
DAC_DMACmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:339
  *          This parameter can be: ENABLE or DISABLE.
  * @note   The DAC channel1 is mapped on DMA1 channel3 which must be already configured. 
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	1c0a      	adds	r2, r1, #0
 8001a46:	1cfb      	adds	r3, r7, #3
 8001a48:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:344
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a4a:	1cfb      	adds	r3, r7, #3
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <DAC_DMACmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:347
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <DAC_DMACmd+0x4c>)
 8001a54:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <DAC_DMACmd+0x4c>)
 8001a56:	6811      	ldr	r1, [r2, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	2080      	movs	r0, #128	; 0x80
 8001a5c:	0140      	lsls	r0, r0, #5
 8001a5e:	1c04      	adds	r4, r0, #0
 8001a60:	4094      	lsls	r4, r2
 8001a62:	1c22      	adds	r2, r4, #0
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e00b      	b.n	8001a82 <DAC_DMACmd+0x46>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:352
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <DAC_DMACmd+0x4c>)
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <DAC_DMACmd+0x4c>)
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	2080      	movs	r0, #128	; 0x80
 8001a74:	0140      	lsls	r0, r0, #5
 8001a76:	1c04      	adds	r4, r0, #0
 8001a78:	408c      	lsls	r4, r1
 8001a7a:	1c21      	adds	r1, r4, #0
 8001a7c:	43c9      	mvns	r1, r1
 8001a7e:	400a      	ands	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:354
  }
}
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b003      	add	sp, #12
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	40007400 	.word	0x40007400

08001a8c <DAC_ITConfig>:
DAC_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:387
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:393
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <DAC_ITConfig+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:396
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <DAC_ITConfig+0x48>)
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <DAC_ITConfig+0x48>)
 8001aa6:	6811      	ldr	r1, [r2, #0]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	68b8      	ldr	r0, [r7, #8]
 8001aac:	1c04      	adds	r4, r0, #0
 8001aae:	4094      	lsls	r4, r2
 8001ab0:	1c22      	adds	r2, r4, #0
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e00a      	b.n	8001ace <DAC_ITConfig+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:401
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <DAC_ITConfig+0x48>)
 8001aba:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <DAC_ITConfig+0x48>)
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	68f9      	ldr	r1, [r7, #12]
 8001ac0:	68b8      	ldr	r0, [r7, #8]
 8001ac2:	1c04      	adds	r4, r0, #0
 8001ac4:	408c      	lsls	r4, r1
 8001ac6:	1c21      	adds	r1, r4, #0
 8001ac8:	43c9      	mvns	r1, r1
 8001aca:	400a      	ands	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:403
  }
}
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b005      	add	sp, #20
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	40007400 	.word	0x40007400

08001ad8 <DAC_GetFlagStatus>:
DAC_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:418
  * @note   The DMA underrun occurs when a second external trigger arrives before
  *         the acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:419
  FlagStatus bitstatus = RESET;
 8001ae2:	1c3b      	adds	r3, r7, #0
 8001ae4:	330f      	adds	r3, #15
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:426
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <DAC_GetFlagStatus+0x44>)
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	1c08      	adds	r0, r1, #0
 8001af4:	4090      	lsls	r0, r2
 8001af6:	1c02      	adds	r2, r0, #0
 8001af8:	4013      	ands	r3, r2
 8001afa:	d004      	beq.n	8001b06 <DAC_GetFlagStatus+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:429
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8001afc:	1c3b      	adds	r3, r7, #0
 8001afe:	330f      	adds	r3, #15
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e003      	b.n	8001b0e <DAC_GetFlagStatus+0x36>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:434
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8001b06:	1c3b      	adds	r3, r7, #0
 8001b08:	330f      	adds	r3, #15
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:437
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 8001b0e:	1c3b      	adds	r3, r7, #0
 8001b10:	330f      	adds	r3, #15
 8001b12:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:438
}
 8001b14:	1c18      	adds	r0, r3, #0
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b004      	add	sp, #16
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40007400 	.word	0x40007400

08001b20 <DAC_ClearFlag>:
DAC_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:451
  *          This parameter can be of the following value:
  *            @arg DAC_FLAG_DMAUDR: DMA underrun flag
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:457
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <DAC_ClearFlag+0x20>)
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	1c08      	adds	r0, r1, #0
 8001b32:	4090      	lsls	r0, r2
 8001b34:	1c02      	adds	r2, r0, #0
 8001b36:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:458
}
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	40007400 	.word	0x40007400

08001b44 <DAC_GetITStatus>:
DAC_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:473
  * @note   The DMA underrun occurs when a second external trigger arrives before
  *         the acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:474
  ITStatus bitstatus = RESET;
 8001b4e:	1c3b      	adds	r3, r7, #0
 8001b50:	330f      	adds	r3, #15
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:475
  uint32_t enablestatus = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:482
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <DAC_GetITStatus+0x60>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6839      	ldr	r1, [r7, #0]
 8001b62:	1c08      	adds	r0, r1, #0
 8001b64:	4090      	lsls	r0, r2
 8001b66:	1c02      	adds	r2, r0, #0
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:485
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <DAC_GetITStatus+0x60>)
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	1c08      	adds	r0, r1, #0
 8001b76:	4090      	lsls	r0, r2
 8001b78:	1c02      	adds	r2, r0, #0
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <DAC_GetITStatus+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:485 (discriminator 1)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <DAC_GetITStatus+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:488
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8001b84:	1c3b      	adds	r3, r7, #0
 8001b86:	330f      	adds	r3, #15
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e003      	b.n	8001b96 <DAC_GetITStatus+0x52>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:493
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 8001b8e:	1c3b      	adds	r3, r7, #0
 8001b90:	330f      	adds	r3, #15
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:496
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8001b96:	1c3b      	adds	r3, r7, #0
 8001b98:	330f      	adds	r3, #15
 8001b9a:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:497
}
 8001b9c:	1c18      	adds	r0, r3, #0
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40007400 	.word	0x40007400

08001ba8 <DAC_ClearITPendingBit>:
DAC_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:510
  *          This parameter can be the following values:
  *            @arg DAC_IT_DMAUDR: DMA underrun interrupt mask
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:516
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <DAC_ClearITPendingBit+0x20>)
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	1c08      	adds	r0, r1, #0
 8001bba:	4090      	lsls	r0, r2
 8001bbc:	1c02      	adds	r2, r0, #0
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dac.c:517
}
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	40007400 	.word	0x40007400

08001bcc <DBGMCU_GetREVID>:
DBGMCU_GetREVID():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:78
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:79
   return(DBGMCU->IDCODE >> 16);
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <DBGMCU_GetREVID+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:80
}
 8001bd6:	1c18      	adds	r0, r3, #0
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40015800 	.word	0x40015800

08001be0 <DBGMCU_GetDEVID>:
DBGMCU_GetDEVID():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:88
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:89
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <DBGMCU_GetDEVID+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	051b      	lsls	r3, r3, #20
 8001bea:	0d1b      	lsrs	r3, r3, #20
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:90
}
 8001bec:	1c18      	adds	r0, r3, #0
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40015800 	.word	0x40015800

08001bf8 <DBGMCU_Config>:
DBGMCU_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:119
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	1c0a      	adds	r2, r1, #0
 8001c02:	1cfb      	adds	r3, r7, #3
 8001c04:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:124
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c06:	1cfb      	adds	r3, r7, #3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <DBGMCU_Config+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:126
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <DBGMCU_Config+0x38>)
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <DBGMCU_Config+0x38>)
 8001c12:	6851      	ldr	r1, [r2, #4]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	e006      	b.n	8001c2a <DBGMCU_Config+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:130
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <DBGMCU_Config+0x38>)
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <DBGMCU_Config+0x38>)
 8001c20:	6852      	ldr	r2, [r2, #4]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	43c9      	mvns	r1, r1
 8001c26:	400a      	ands	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:132
  }
}
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40015800 	.word	0x40015800

08001c34 <DBGMCU_APB1PeriphConfig>:
DBGMCU_APB1PeriphConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:154
  * @param  NewState: new state of the specified APB1 peripheral in Debug mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	1c0a      	adds	r2, r1, #0
 8001c3e:	1cfb      	adds	r3, r7, #3
 8001c40:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:159
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c42:	1cfb      	adds	r3, r7, #3
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <DBGMCU_APB1PeriphConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:161
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <DBGMCU_APB1PeriphConfig+0x38>)
 8001c4c:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <DBGMCU_APB1PeriphConfig+0x38>)
 8001c4e:	6891      	ldr	r1, [r2, #8]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	e006      	b.n	8001c66 <DBGMCU_APB1PeriphConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:165
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <DBGMCU_APB1PeriphConfig+0x38>)
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <DBGMCU_APB1PeriphConfig+0x38>)
 8001c5c:	6892      	ldr	r2, [r2, #8]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	43c9      	mvns	r1, r1
 8001c62:	400a      	ands	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:167
  }
}
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40015800 	.word	0x40015800

08001c70 <DBGMCU_APB2PeriphConfig>:
DBGMCU_APB2PeriphConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:182
  * @param  NewState: new state of the specified APB2 peripheral in Debug mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	1c0a      	adds	r2, r1, #0
 8001c7a:	1cfb      	adds	r3, r7, #3
 8001c7c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:187
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c7e:	1cfb      	adds	r3, r7, #3
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <DBGMCU_APB2PeriphConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:189
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <DBGMCU_APB2PeriphConfig+0x38>)
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <DBGMCU_APB2PeriphConfig+0x38>)
 8001c8a:	68d1      	ldr	r1, [r2, #12]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	e006      	b.n	8001ca2 <DBGMCU_APB2PeriphConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:193
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <DBGMCU_APB2PeriphConfig+0x38>)
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <DBGMCU_APB2PeriphConfig+0x38>)
 8001c98:	68d2      	ldr	r2, [r2, #12]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	43c9      	mvns	r1, r1
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dbgmcu.c:195
  }
}
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40015800 	.word	0x40015800

08001cac <DMA_DeInit>:
DMA_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:127
  * @param  DMAy_Channelx: where y can be 1 to select the DMA and 
  *         x can be 1 to 5 for DMA1 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:132
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <DMA_DeInit+0xa4>)
 8001cba:	401a      	ands	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:135

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:138

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:141

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:144

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:146

  if (DMAy_Channelx == DMA1_Channel1)
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <DMA_DeInit+0xa8>)
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d106      	bne.n	8001cee <DMA_DeInit+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:149
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <DMA_DeInit+0xac>)
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <DMA_DeInit+0xac>)
 8001ce4:	6852      	ldr	r2, [r2, #4]
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	e02d      	b.n	8001d4a <DMA_DeInit+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:151
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <DMA_DeInit+0xb0>)
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d106      	bne.n	8001d04 <DMA_DeInit+0x58>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:154
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <DMA_DeInit+0xac>)
 8001cf8:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <DMA_DeInit+0xac>)
 8001cfa:	6852      	ldr	r2, [r2, #4]
 8001cfc:	21f0      	movs	r1, #240	; 0xf0
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	e022      	b.n	8001d4a <DMA_DeInit+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:156
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <DMA_DeInit+0xb4>)
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <DMA_DeInit+0x70>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:159
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <DMA_DeInit+0xac>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <DMA_DeInit+0xac>)
 8001d10:	6852      	ldr	r2, [r2, #4]
 8001d12:	21f0      	movs	r1, #240	; 0xf0
 8001d14:	0109      	lsls	r1, r1, #4
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	e016      	b.n	8001d4a <DMA_DeInit+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:161
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <DMA_DeInit+0xb8>)
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d107      	bne.n	8001d34 <DMA_DeInit+0x88>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:164
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <DMA_DeInit+0xac>)
 8001d26:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <DMA_DeInit+0xac>)
 8001d28:	6852      	ldr	r2, [r2, #4]
 8001d2a:	21f0      	movs	r1, #240	; 0xf0
 8001d2c:	0209      	lsls	r1, r1, #8
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	e00a      	b.n	8001d4a <DMA_DeInit+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:168
  }
  else
  {
    if (DMAy_Channelx == DMA1_Channel5) 
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <DMA_DeInit+0xbc>)
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d106      	bne.n	8001d4a <DMA_DeInit+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:171
    {
      /* Reset interrupt pending bits for DMA1 Channel5 */
      DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <DMA_DeInit+0xac>)
 8001d3e:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <DMA_DeInit+0xac>)
 8001d40:	6852      	ldr	r2, [r2, #4]
 8001d42:	21f0      	movs	r1, #240	; 0xf0
 8001d44:	0309      	lsls	r1, r1, #12
 8001d46:	430a      	orrs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:174
    }
  }
}
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	0000fffe 	.word	0x0000fffe
 8001d54:	40020008 	.word	0x40020008
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	4002001c 	.word	0x4002001c
 8001d60:	40020030 	.word	0x40020030
 8001d64:	40020044 	.word	0x40020044
 8001d68:	40020058 	.word	0x40020058

08001d6c <DMA_Init>:
DMA_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:186
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:187
  uint32_t tmpreg = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:203
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:206

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <DMA_Init+0x74>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:217
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:218
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:217
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001d96:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:218
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:219
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:218
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001da2:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:219
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:220
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:219
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001dae:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:220
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	4313      	orrs	r3, r2
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:217
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:223
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:227

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:231

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:235

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:236
}
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b004      	add	sp, #16
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	ffff800f 	.word	0xffff800f

08001de4 <DMA_StructInit>:
DMA_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:245
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:248
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:250
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:252
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:254
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:256
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:258
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:260
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:262
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61da      	str	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:264
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:266
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:268
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:269
}
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <DMA_Cmd>:
DMA_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:280
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	1c0a      	adds	r2, r1, #0
 8001e3e:	1cfb      	adds	r3, r7, #3
 8001e40:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:285
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e42:	1cfb      	adds	r3, r7, #3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <DMA_Cmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:288
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e005      	b.n	8001e64 <DMA_Cmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:293
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <DMA_Cmd+0x38>)
 8001e5e:	401a      	ands	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:295
  }
}
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	0000fffe 	.word	0x0000fffe

08001e70 <DMA_SetCurrDataCounter>:
DMA_SetCurrDataCounter():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:339
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	1c0a      	adds	r2, r1, #0
 8001e7a:	1cbb      	adds	r3, r7, #2
 8001e7c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:345
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 8001e7e:	1cbb      	adds	r3, r7, #2
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:346
}
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <DMA_GetCurrDataCounter>:
DMA_GetCurrDataCounter():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:357
  *         x can be 1 to 5 for DMA1 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:361
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:362
}
 8001e9a:	1c18      	adds	r0, r3, #0
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)

08001ea4 <DMA_ITConfig>:
DMA_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:432
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:438
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001eb2:	1dfb      	adds	r3, r7, #7
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <DMA_ITConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:441
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e006      	b.n	8001ed6 <DMA_ITConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:446
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	43d2      	mvns	r2, r2
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:448
  }
}
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b004      	add	sp, #16
 8001eda:	bd80      	pop	{r7, pc}

08001edc <DMA_GetFlagStatus>:
DMA_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:483
  *         DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:484
  FlagStatus bitstatus = RESET;
 8001ee4:	1c3b      	adds	r3, r7, #0
 8001ee6:	330f      	adds	r3, #15
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:490

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Check the status of the specified DMA flag */
  if ((DMA1->ISR & DMA_FLAG) != (uint32_t)RESET)
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <DMA_GetFlagStatus+0x3c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <DMA_GetFlagStatus+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:493
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001ef6:	1c3b      	adds	r3, r7, #0
 8001ef8:	330f      	adds	r3, #15
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e003      	b.n	8001f08 <DMA_GetFlagStatus+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:498
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001f00:	1c3b      	adds	r3, r7, #0
 8001f02:	330f      	adds	r3, #15
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:502
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001f08:	1c3b      	adds	r3, r7, #0
 8001f0a:	330f      	adds	r3, #15
 8001f0c:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:503
}
 8001f0e:	1c18      	adds	r0, r3, #0
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b004      	add	sp, #16
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	40020000 	.word	0x40020000

08001f1c <DMA_ClearFlag>:
DMA_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:537
  *         Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
  *
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMA_FLAG)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:542
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Clear the selected DMA flags */
  DMA1->IFCR = DMA_FLAG;
 8001f24:	4b02      	ldr	r3, [pc, #8]	; (8001f30 <DMA_ClearFlag+0x14>)
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:543
}
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40020000 	.word	0x40020000

08001f34 <DMA_GetITStatus>:
DMA_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:578
  *         DMAy_IT_HTx or DMAy_IT_TEx). 
  *      
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMA_IT)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:579
  ITStatus bitstatus = RESET;
 8001f3c:	1c3b      	adds	r3, r7, #0
 8001f3e:	330f      	adds	r3, #15
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:585

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Check the status of the specified DMA interrupt */
  if ((DMA1->ISR & DMA_IT) != (uint32_t)RESET)
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <DMA_GetITStatus+0x3c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d004      	beq.n	8001f58 <DMA_GetITStatus+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:588
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8001f4e:	1c3b      	adds	r3, r7, #0
 8001f50:	330f      	adds	r3, #15
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e003      	b.n	8001f60 <DMA_GetITStatus+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:593
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8001f58:	1c3b      	adds	r3, r7, #0
 8001f5a:	330f      	adds	r3, #15
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:596
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 8001f60:	1c3b      	adds	r3, r7, #0
 8001f62:	330f      	adds	r3, #15
 8001f64:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:597
}
 8001f66:	1c18      	adds	r0, r3, #0
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b004      	add	sp, #16
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	40020000 	.word	0x40020000

08001f74 <DMA_ClearITPendingBit>:
DMA_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:632
  *         DMAy_IT_TEx).  
  *        
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMA_IT)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:637
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Clear the selected DMA interrupt pending bits */
  DMA1->IFCR = DMA_IT;
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <DMA_ClearITPendingBit+0x14>)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c:638
}
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40020000 	.word	0x40020000

08001f8c <EXTI_DeInit>:
EXTI_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:109
  *         values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:110
  EXTI->IMR = 0x0F940000;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <EXTI_DeInit+0x28>)
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <EXTI_DeInit+0x2c>)
 8001f94:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:111
  EXTI->EMR = 0x00000000;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <EXTI_DeInit+0x28>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:112
  EXTI->RTSR = 0x00000000;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <EXTI_DeInit+0x28>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:113
  EXTI->FTSR = 0x00000000;
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <EXTI_DeInit+0x28>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:114
  EXTI->PR = 0x006BFFFF;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <EXTI_DeInit+0x28>)
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <EXTI_DeInit+0x30>)
 8001fac:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:115
}
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	40010400 	.word	0x40010400
 8001fb8:	0f940000 	.word	0x0f940000
 8001fbc:	006bffff 	.word	0x006bffff

08001fc0 <EXTI_Init>:
EXTI_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:125
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure that 
  *         contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:126
  uint32_t tmp = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:134
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <EXTI_Init+0xd4>)
 8001fce:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:136

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	799b      	ldrb	r3, [r3, #6]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d04d      	beq.n	8002074 <EXTI_Init+0xb4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:139
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <EXTI_Init+0xd4>)
 8001fda:	4a2e      	ldr	r2, [pc, #184]	; (8002094 <EXTI_Init+0xd4>)
 8001fdc:	6811      	ldr	r1, [r2, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	43d2      	mvns	r2, r2
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:140
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <EXTI_Init+0xd4>)
 8001fea:	4a2a      	ldr	r2, [pc, #168]	; (8002094 <EXTI_Init+0xd4>)
 8001fec:	6851      	ldr	r1, [r2, #4]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	43d2      	mvns	r2, r2
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:142

    tmp += EXTI_InitStruct->EXTI_Mode;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	791b      	ldrb	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	18d3      	adds	r3, r2, r3
 8002000:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:144

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	6811      	ldr	r1, [r2, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:147

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <EXTI_Init+0xd4>)
 8002012:	4a20      	ldr	r2, [pc, #128]	; (8002094 <EXTI_Init+0xd4>)
 8002014:	6891      	ldr	r1, [r2, #8]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	43d2      	mvns	r2, r2
 800201c:	400a      	ands	r2, r1
 800201e:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:148
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <EXTI_Init+0xd4>)
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <EXTI_Init+0xd4>)
 8002024:	68d1      	ldr	r1, [r2, #12]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	43d2      	mvns	r2, r2
 800202c:	400a      	ands	r2, r1
 800202e:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:151

    /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	795b      	ldrb	r3, [r3, #5]
 8002034:	2b10      	cmp	r3, #16
 8002036:	d10e      	bne.n	8002056 <EXTI_Init+0x96>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:154
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <EXTI_Init+0xd4>)
 800203a:	4a16      	ldr	r2, [pc, #88]	; (8002094 <EXTI_Init+0xd4>)
 800203c:	6891      	ldr	r1, [r2, #8]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:155
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <EXTI_Init+0xd4>)
 8002048:	4a12      	ldr	r2, [pc, #72]	; (8002094 <EXTI_Init+0xd4>)
 800204a:	68d1      	ldr	r1, [r2, #12]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	e01b      	b.n	800208e <EXTI_Init+0xce>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:159
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <EXTI_Init+0xd4>)
 8002058:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:160
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	795b      	ldrb	r3, [r3, #5]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	18d3      	adds	r3, r2, r3
 8002062:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:162

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	6811      	ldr	r1, [r2, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e00c      	b.n	800208e <EXTI_Init+0xce>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:167
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	791b      	ldrb	r3, [r3, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	18d3      	adds	r3, r2, r3
 800207c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:170

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	6811      	ldr	r1, [r2, #0]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	43d2      	mvns	r2, r2
 800208a:	400a      	ands	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:172
  }
}
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40010400 	.word	0x40010400

08002098 <EXTI_StructInit>:
EXTI_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:181
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:182
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:183
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:184
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	220c      	movs	r2, #12
 80020b0:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:185
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:186
}
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)

080020c0 <EXTI_GenerateSWInterrupt>:
EXTI_GenerateSWInterrupt():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:196
  *         will be generated.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:200
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <EXTI_GenerateSWInterrupt+0x1c>)
 80020ca:	4a04      	ldr	r2, [pc, #16]	; (80020dc <EXTI_GenerateSWInterrupt+0x1c>)
 80020cc:	6911      	ldr	r1, [r2, #16]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:201
}
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	40010400 	.word	0x40010400

080020e0 <EXTI_GetFlagStatus>:
EXTI_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:226
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be (0..27).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:227
   FlagStatus bitstatus = RESET;
 80020e8:	1c3b      	adds	r3, r7, #0
 80020ea:	330f      	adds	r3, #15
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:231
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <EXTI_GetFlagStatus+0x3c>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4013      	ands	r3, r2
 80020f8:	d004      	beq.n	8002104 <EXTI_GetFlagStatus+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:233
  {
    bitstatus = SET;
 80020fa:	1c3b      	adds	r3, r7, #0
 80020fc:	330f      	adds	r3, #15
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e003      	b.n	800210c <EXTI_GetFlagStatus+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:237
  }
  else
  {
    bitstatus = RESET;
 8002104:	1c3b      	adds	r3, r7, #0
 8002106:	330f      	adds	r3, #15
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:239
  }
  return bitstatus;
 800210c:	1c3b      	adds	r3, r7, #0
 800210e:	330f      	adds	r3, #15
 8002110:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:240
}
 8002112:	1c18      	adds	r0, r3, #0
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	40010400 	.word	0x40010400

08002120 <EXTI_ClearFlag>:
EXTI_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:249
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:253
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <EXTI_ClearFlag+0x14>)
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:254
}
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40010400 	.word	0x40010400

08002138 <EXTI_GetITStatus>:
EXTI_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:263
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be (0..27).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:264
  ITStatus bitstatus = RESET;
 8002140:	1c3b      	adds	r3, r7, #0
 8002142:	330f      	adds	r3, #15
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:265
  uint32_t enablestatus = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:269
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <EXTI_GetITStatus+0x50>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4013      	ands	r3, r2
 8002154:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:270
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <EXTI_GetITStatus+0x50>)
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4013      	ands	r3, r2
 800215e:	d007      	beq.n	8002170 <EXTI_GetITStatus+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:270 (discriminator 1)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d004      	beq.n	8002170 <EXTI_GetITStatus+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:272
  {
    bitstatus = SET;
 8002166:	1c3b      	adds	r3, r7, #0
 8002168:	330f      	adds	r3, #15
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	e003      	b.n	8002178 <EXTI_GetITStatus+0x40>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:276
  }
  else
  {
    bitstatus = RESET;
 8002170:	1c3b      	adds	r3, r7, #0
 8002172:	330f      	adds	r3, #15
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:278
  }
  return bitstatus;
 8002178:	1c3b      	adds	r3, r7, #0
 800217a:	330f      	adds	r3, #15
 800217c:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:280
  
}
 800217e:	1c18      	adds	r0, r3, #0
 8002180:	46bd      	mov	sp, r7
 8002182:	b004      	add	sp, #16
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	40010400 	.word	0x40010400

0800218c <EXTI_ClearITPendingBit>:
EXTI_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:289
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:293
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <EXTI_ClearITPendingBit+0x14>)
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_exti.c:294
}
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40010400 	.word	0x40010400

080021a4 <FLASH_SetLatency>:
FLASH_SetLatency():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:136
  *             @arg FLASH_Latency_0: FLASH Zero Latency cycle
  *             @arg FLASH_Latency_1: FLASH One Latency cycle
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:137
   uint32_t tmpreg = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:143

  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));

  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <FLASH_SetLatency+0x30>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:146

  /* Sets the Latency value */
  tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	4393      	bics	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:147
  tmpreg |= FLASH_Latency;
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:150

  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 80021c6:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <FLASH_SetLatency+0x30>)
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:151
}
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b004      	add	sp, #16
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	40022000 	.word	0x40022000

080021d8 <FLASH_PrefetchBufferCmd>:
FLASH_PrefetchBufferCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:160
  * @param  NewState: new state of the FLASH prefetch buffer.
  *          This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	1c02      	adds	r2, r0, #0
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:164
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <FLASH_PrefetchBufferCmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:166
  {
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <FLASH_PrefetchBufferCmd+0x34>)
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <FLASH_PrefetchBufferCmd+0x34>)
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	2110      	movs	r1, #16
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e005      	b.n	8002206 <FLASH_PrefetchBufferCmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:170
  }
  else
  {
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <FLASH_PrefetchBufferCmd+0x34>)
 80021fc:	4a03      	ldr	r2, [pc, #12]	; (800220c <FLASH_PrefetchBufferCmd+0x34>)
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	2110      	movs	r1, #16
 8002202:	438a      	bics	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:172
  }
}
 8002206:	46bd      	mov	sp, r7
 8002208:	b002      	add	sp, #8
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40022000 	.word	0x40022000

08002210 <FLASH_GetPrefetchBufferStatus>:
FLASH_GetPrefetchBufferStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:180
  * @brief  Checks whether the FLASH Prefetch Buffer status is set or not.
  * @param  None
  * @retval FLASH Prefetch Buffer Status (SET or RESET).
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:181
  FlagStatus bitstatus = RESET;
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:183

  if ((FLASH->ACR & FLASH_ACR_PRFTBS) != (uint32_t)RESET)
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <FLASH_GetPrefetchBufferStatus+0x30>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2320      	movs	r3, #32
 8002222:	4013      	ands	r3, r2
 8002224:	d003      	beq.n	800222e <FLASH_GetPrefetchBufferStatus+0x1e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:185
  {
    bitstatus = SET;
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e002      	b.n	8002234 <FLASH_GetPrefetchBufferStatus+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:189
  }
  else
  {
    bitstatus = RESET;
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:192
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:193
}
 8002238:	1c18      	adds	r0, r3, #0
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40022000 	.word	0x40022000

08002244 <FLASH_Unlock>:
FLASH_Unlock():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:233
  * @brief  Unlocks the FLASH control register and program memory access.
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:234
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <FLASH_Unlock+0x20>)
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	4013      	ands	r3, r2
 8002250:	d005      	beq.n	800225e <FLASH_Unlock+0x1a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:237
  {
    /* Unlocking the program memory access */
    FLASH->KEYR = FLASH_FKEY1;
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <FLASH_Unlock+0x20>)
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <FLASH_Unlock+0x24>)
 8002256:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:238
    FLASH->KEYR = FLASH_FKEY2;
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <FLASH_Unlock+0x20>)
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <FLASH_Unlock+0x28>)
 800225c:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:240
  }
}
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	40022000 	.word	0x40022000
 8002268:	45670123 	.word	0x45670123
 800226c:	cdef89ab 	.word	0xcdef89ab

08002270 <FLASH_Lock>:
FLASH_Lock():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:248
  * @brief  Locks the Program memory access.
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:250
  /* Set the LOCK Bit to lock the FLASH control register and program memory access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <FLASH_Lock+0x14>)
 8002276:	4a03      	ldr	r2, [pc, #12]	; (8002284 <FLASH_Lock+0x14>)
 8002278:	6912      	ldr	r2, [r2, #16]
 800227a:	2180      	movs	r1, #128	; 0x80
 800227c:	430a      	orrs	r2, r1
 800227e:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:251
}
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40022000 	.word	0x40022000

08002288 <FLASH_ErasePage>:
FLASH_ErasePage():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:265
  *         is the start address of a page (multiple of 1024 bytes).
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:266
  FLASH_Status status = FLASH_COMPLETE;
 8002290:	1c3b      	adds	r3, r7, #0
 8002292:	330f      	adds	r3, #15
 8002294:	2204      	movs	r2, #4
 8002296:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:272

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002298:	1c3c      	adds	r4, r7, #0
 800229a:	340f      	adds	r4, #15
 800229c:	23b0      	movs	r3, #176	; 0xb0
 800229e:	031b      	lsls	r3, r3, #12
 80022a0:	1c18      	adds	r0, r3, #0
 80022a2:	f000 fccf 	bl	8002c44 <FLASH_WaitForLastOperation>
 80022a6:	1c03      	adds	r3, r0, #0
 80022a8:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:274
  
  if(status == FLASH_COMPLETE)
 80022aa:	1c3b      	adds	r3, r7, #0
 80022ac:	330f      	adds	r3, #15
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d11d      	bne.n	80022f0 <FLASH_ErasePage+0x68>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:277
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <FLASH_ErasePage+0x78>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <FLASH_ErasePage+0x78>)
 80022b8:	6912      	ldr	r2, [r2, #16]
 80022ba:	2102      	movs	r1, #2
 80022bc:	430a      	orrs	r2, r1
 80022be:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:278
    FLASH->AR  = Page_Address;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <FLASH_ErasePage+0x78>)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:279
    FLASH->CR |= FLASH_CR_STRT;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <FLASH_ErasePage+0x78>)
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <FLASH_ErasePage+0x78>)
 80022ca:	6912      	ldr	r2, [r2, #16]
 80022cc:	2140      	movs	r1, #64	; 0x40
 80022ce:	430a      	orrs	r2, r1
 80022d0:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:282
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80022d2:	1c3c      	adds	r4, r7, #0
 80022d4:	340f      	adds	r4, #15
 80022d6:	23b0      	movs	r3, #176	; 0xb0
 80022d8:	031b      	lsls	r3, r3, #12
 80022da:	1c18      	adds	r0, r3, #0
 80022dc:	f000 fcb2 	bl	8002c44 <FLASH_WaitForLastOperation>
 80022e0:	1c03      	adds	r3, r0, #0
 80022e2:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:285
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <FLASH_ErasePage+0x78>)
 80022e6:	4a06      	ldr	r2, [pc, #24]	; (8002300 <FLASH_ErasePage+0x78>)
 80022e8:	6912      	ldr	r2, [r2, #16]
 80022ea:	2102      	movs	r1, #2
 80022ec:	438a      	bics	r2, r1
 80022ee:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:289
  }
    
  /* Return the Erase Status */
  return status;
 80022f0:	1c3b      	adds	r3, r7, #0
 80022f2:	330f      	adds	r3, #15
 80022f4:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:290
}
 80022f6:	1c18      	adds	r0, r3, #0
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b005      	add	sp, #20
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	40022000 	.word	0x40022000

08002304 <FLASH_EraseAllPages>:
FLASH_EraseAllPages():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:302
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllPages(void)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:303
  FLASH_Status status = FLASH_COMPLETE;
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	2204      	movs	r2, #4
 800230e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:306

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002310:	1dfc      	adds	r4, r7, #7
 8002312:	23b0      	movs	r3, #176	; 0xb0
 8002314:	031b      	lsls	r3, r3, #12
 8002316:	1c18      	adds	r0, r3, #0
 8002318:	f000 fc94 	bl	8002c44 <FLASH_WaitForLastOperation>
 800231c:	1c03      	adds	r3, r0, #0
 800231e:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:308
  
  if(status == FLASH_COMPLETE)
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d119      	bne.n	800235c <FLASH_EraseAllPages+0x58>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:311
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= FLASH_CR_MER;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <FLASH_EraseAllPages+0x64>)
 800232a:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <FLASH_EraseAllPages+0x64>)
 800232c:	6912      	ldr	r2, [r2, #16]
 800232e:	2104      	movs	r1, #4
 8002330:	430a      	orrs	r2, r1
 8002332:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:312
     FLASH->CR |= FLASH_CR_STRT;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <FLASH_EraseAllPages+0x64>)
 8002336:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <FLASH_EraseAllPages+0x64>)
 8002338:	6912      	ldr	r2, [r2, #16]
 800233a:	2140      	movs	r1, #64	; 0x40
 800233c:	430a      	orrs	r2, r1
 800233e:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:315
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002340:	1dfc      	adds	r4, r7, #7
 8002342:	23b0      	movs	r3, #176	; 0xb0
 8002344:	031b      	lsls	r3, r3, #12
 8002346:	1c18      	adds	r0, r3, #0
 8002348:	f000 fc7c 	bl	8002c44 <FLASH_WaitForLastOperation>
 800234c:	1c03      	adds	r3, r0, #0
 800234e:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:318

    /* Disable the MER Bit */
    FLASH->CR &= ~FLASH_CR_MER;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <FLASH_EraseAllPages+0x64>)
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <FLASH_EraseAllPages+0x64>)
 8002354:	6912      	ldr	r2, [r2, #16]
 8002356:	2104      	movs	r1, #4
 8002358:	438a      	bics	r2, r1
 800235a:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:322
  }

  /* Return the Erase Status */
  return status;
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:323
}
 8002360:	1c18      	adds	r0, r3, #0
 8002362:	46bd      	mov	sp, r7
 8002364:	b003      	add	sp, #12
 8002366:	bd90      	pop	{r4, r7, pc}
 8002368:	40022000 	.word	0x40022000

0800236c <FLASH_ProgramWord>:
FLASH_ProgramWord():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:336
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:337
  FLASH_Status status = FLASH_COMPLETE;
 8002376:	1c3b      	adds	r3, r7, #0
 8002378:	330f      	adds	r3, #15
 800237a:	2204      	movs	r2, #4
 800237c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:338
  __IO uint32_t tmp = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:344

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002382:	1c3c      	adds	r4, r7, #0
 8002384:	340f      	adds	r4, #15
 8002386:	23b0      	movs	r3, #176	; 0xb0
 8002388:	031b      	lsls	r3, r3, #12
 800238a:	1c18      	adds	r0, r3, #0
 800238c:	f000 fc5a 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002390:	1c03      	adds	r3, r0, #0
 8002392:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:346
  
  if(status == FLASH_COMPLETE)
 8002394:	1c3b      	adds	r3, r7, #0
 8002396:	330f      	adds	r3, #15
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b04      	cmp	r3, #4
 800239c:	d135      	bne.n	800240a <FLASH_ProgramWord+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:350
  {
    /* If the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= FLASH_CR_PG;
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <FLASH_ProgramWord+0xac>)
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <FLASH_ProgramWord+0xac>)
 80023a2:	6912      	ldr	r2, [r2, #16]
 80023a4:	2101      	movs	r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:352
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b292      	uxth	r2, r2
 80023b0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:355
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80023b2:	1c3c      	adds	r4, r7, #0
 80023b4:	340f      	adds	r4, #15
 80023b6:	23b0      	movs	r3, #176	; 0xb0
 80023b8:	031b      	lsls	r3, r3, #12
 80023ba:	1c18      	adds	r0, r3, #0
 80023bc:	f000 fc42 	bl	8002c44 <FLASH_WaitForLastOperation>
 80023c0:	1c03      	adds	r3, r0, #0
 80023c2:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:357
 
    if(status == FLASH_COMPLETE)
 80023c4:	1c3b      	adds	r3, r7, #0
 80023c6:	330f      	adds	r3, #15
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d117      	bne.n	80023fe <FLASH_ProgramWord+0x92>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:361
    {
      /* If the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3302      	adds	r3, #2
 80023d2:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:363

      *(__IO uint16_t*) tmp = Data >> 16;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	0c12      	lsrs	r2, r2, #16
 80023da:	b292      	uxth	r2, r2
 80023dc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:366
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80023de:	1c3c      	adds	r4, r7, #0
 80023e0:	340f      	adds	r4, #15
 80023e2:	23b0      	movs	r3, #176	; 0xb0
 80023e4:	031b      	lsls	r3, r3, #12
 80023e6:	1c18      	adds	r0, r3, #0
 80023e8:	f000 fc2c 	bl	8002c44 <FLASH_WaitForLastOperation>
 80023ec:	1c03      	adds	r3, r0, #0
 80023ee:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:369
        
      /* Disable the PG Bit */
      FLASH->CR &= ~FLASH_CR_PG;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <FLASH_ProgramWord+0xac>)
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <FLASH_ProgramWord+0xac>)
 80023f4:	6912      	ldr	r2, [r2, #16]
 80023f6:	2101      	movs	r1, #1
 80023f8:	438a      	bics	r2, r1
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	e005      	b.n	800240a <FLASH_ProgramWord+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:374
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= ~FLASH_CR_PG;
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <FLASH_ProgramWord+0xac>)
 8002400:	4a05      	ldr	r2, [pc, #20]	; (8002418 <FLASH_ProgramWord+0xac>)
 8002402:	6912      	ldr	r2, [r2, #16]
 8002404:	2101      	movs	r1, #1
 8002406:	438a      	bics	r2, r1
 8002408:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:379
    }
  }
   
  /* Return the Program Status */
  return status;
 800240a:	1c3b      	adds	r3, r7, #0
 800240c:	330f      	adds	r3, #15
 800240e:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:380
}
 8002410:	1c18      	adds	r0, r3, #0
 8002412:	46bd      	mov	sp, r7
 8002414:	b005      	add	sp, #20
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	40022000 	.word	0x40022000

0800241c <FLASH_ProgramHalfWord>:
FLASH_ProgramHalfWord():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:393
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	1c0a      	adds	r2, r1, #0
 8002426:	1cbb      	adds	r3, r7, #2
 8002428:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:394
  FLASH_Status status = FLASH_COMPLETE;
 800242a:	1c3b      	adds	r3, r7, #0
 800242c:	330f      	adds	r3, #15
 800242e:	2204      	movs	r2, #4
 8002430:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:400

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002432:	1c3c      	adds	r4, r7, #0
 8002434:	340f      	adds	r4, #15
 8002436:	23b0      	movs	r3, #176	; 0xb0
 8002438:	031b      	lsls	r3, r3, #12
 800243a:	1c18      	adds	r0, r3, #0
 800243c:	f000 fc02 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002440:	1c03      	adds	r3, r0, #0
 8002442:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:402
  
  if(status == FLASH_COMPLETE)
 8002444:	1c3b      	adds	r3, r7, #0
 8002446:	330f      	adds	r3, #15
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b04      	cmp	r3, #4
 800244c:	d118      	bne.n	8002480 <FLASH_ProgramHalfWord+0x64>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:405
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <FLASH_ProgramHalfWord+0x74>)
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <FLASH_ProgramHalfWord+0x74>)
 8002452:	6912      	ldr	r2, [r2, #16]
 8002454:	2101      	movs	r1, #1
 8002456:	430a      	orrs	r2, r1
 8002458:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:407
  
    *(__IO uint16_t*)Address = Data;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	1cba      	adds	r2, r7, #2
 800245e:	8812      	ldrh	r2, [r2, #0]
 8002460:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:410

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002462:	1c3c      	adds	r4, r7, #0
 8002464:	340f      	adds	r4, #15
 8002466:	23b0      	movs	r3, #176	; 0xb0
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	1c18      	adds	r0, r3, #0
 800246c:	f000 fbea 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002470:	1c03      	adds	r3, r0, #0
 8002472:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:413
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <FLASH_ProgramHalfWord+0x74>)
 8002476:	4a06      	ldr	r2, [pc, #24]	; (8002490 <FLASH_ProgramHalfWord+0x74>)
 8002478:	6912      	ldr	r2, [r2, #16]
 800247a:	2101      	movs	r1, #1
 800247c:	438a      	bics	r2, r1
 800247e:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:417
  } 
  
  /* Return the Program Status */
  return status;
 8002480:	1c3b      	adds	r3, r7, #0
 8002482:	330f      	adds	r3, #15
 8002484:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:418
}
 8002486:	1c18      	adds	r0, r3, #0
 8002488:	46bd      	mov	sp, r7
 800248a:	b005      	add	sp, #20
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	40022000 	.word	0x40022000

08002494 <FLASH_OB_Unlock>:
FLASH_OB_Unlock():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:483
  * @brief  Unlocks the option bytes block access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:484
  if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <FLASH_OB_Unlock+0x20>)
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	d105      	bne.n	80024b0 <FLASH_OB_Unlock+0x1c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:487
  { 
    /* Unlocking the option bytes block access */
    FLASH->OPTKEYR = FLASH_OPTKEY1;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <FLASH_OB_Unlock+0x20>)
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <FLASH_OB_Unlock+0x24>)
 80024a8:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:488
    FLASH->OPTKEYR = FLASH_OPTKEY2;
 80024aa:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <FLASH_OB_Unlock+0x20>)
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <FLASH_OB_Unlock+0x28>)
 80024ae:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:490
  }
}
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40022000 	.word	0x40022000
 80024b8:	45670123 	.word	0x45670123
 80024bc:	cdef89ab 	.word	0xcdef89ab

080024c0 <FLASH_OB_Lock>:
FLASH_OB_Lock():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:498
  * @brief  Locks the option bytes block access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:500
  /* Set the OPTWREN Bit to lock the option bytes block access */
  FLASH->CR &= ~FLASH_CR_OPTWRE;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <FLASH_OB_Lock+0x14>)
 80024c6:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <FLASH_OB_Lock+0x14>)
 80024c8:	6911      	ldr	r1, [r2, #16]
 80024ca:	4a03      	ldr	r2, [pc, #12]	; (80024d8 <FLASH_OB_Lock+0x18>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:501
}
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40022000 	.word	0x40022000
 80024d8:	fffffdff 	.word	0xfffffdff

080024dc <FLASH_OB_Launch>:
FLASH_OB_Launch():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:509
  * @brief  Launch the option byte loading.
  * @param  None
  * @retval None
  */
void FLASH_OB_Launch(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:511
  /* Set the OBL_Launch bit to launch the option byte loading */
  FLASH->CR |= FLASH_CR_OBL_LAUNCH;
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <FLASH_OB_Launch+0x18>)
 80024e2:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <FLASH_OB_Launch+0x18>)
 80024e4:	6912      	ldr	r2, [r2, #16]
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	0189      	lsls	r1, r1, #6
 80024ea:	430a      	orrs	r2, r1
 80024ec:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:512
}
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	40022000 	.word	0x40022000

080024f8 <FLASH_OB_Erase>:
FLASH_OB_Erase():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:525
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_Erase(void)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:526
  uint16_t rdptmp = OB_RDP_Level_0;
 80024fe:	1dbb      	adds	r3, r7, #6
 8002500:	22aa      	movs	r2, #170	; 0xaa
 8002502:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:528

  FLASH_Status status = FLASH_COMPLETE;
 8002504:	1d7b      	adds	r3, r7, #5
 8002506:	2204      	movs	r2, #4
 8002508:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:531

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_OB_GetRDP() != RESET)
 800250a:	f000 fb09 	bl	8002b20 <FLASH_OB_GetRDP>
 800250e:	1c03      	adds	r3, r0, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <FLASH_OB_Erase+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:533
  {
    rdptmp = 0x00;  
 8002514:	1dbb      	adds	r3, r7, #6
 8002516:	2200      	movs	r2, #0
 8002518:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:537
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800251a:	1d7c      	adds	r4, r7, #5
 800251c:	23b0      	movs	r3, #176	; 0xb0
 800251e:	031b      	lsls	r3, r3, #12
 8002520:	1c18      	adds	r0, r3, #0
 8002522:	f000 fb8f 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002526:	1c03      	adds	r3, r0, #0
 8002528:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:539

  if(status == FLASH_COMPLETE)
 800252a:	1d7b      	adds	r3, r7, #5
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d144      	bne.n	80025bc <FLASH_OB_Erase+0xc4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:542
  {   
    /* If the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= FLASH_CR_OPTER;
 8002532:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 8002534:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 8002536:	6912      	ldr	r2, [r2, #16]
 8002538:	2120      	movs	r1, #32
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:543
    FLASH->CR |= FLASH_CR_STRT;
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 8002540:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 8002542:	6912      	ldr	r2, [r2, #16]
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	430a      	orrs	r2, r1
 8002548:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:546

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800254a:	1d7c      	adds	r4, r7, #5
 800254c:	23b0      	movs	r3, #176	; 0xb0
 800254e:	031b      	lsls	r3, r3, #12
 8002550:	1c18      	adds	r0, r3, #0
 8002552:	f000 fb77 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002556:	1c03      	adds	r3, r0, #0
 8002558:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:548
    
    if(status == FLASH_COMPLETE)
 800255a:	1d7b      	adds	r3, r7, #5
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d122      	bne.n	80025a8 <FLASH_OB_Erase+0xb0>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:551
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 8002562:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 8002564:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 8002566:	6912      	ldr	r2, [r2, #16]
 8002568:	2120      	movs	r1, #32
 800256a:	438a      	bics	r2, r1
 800256c:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:554
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 8002570:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 8002572:	6912      	ldr	r2, [r2, #16]
 8002574:	2110      	movs	r1, #16
 8002576:	430a      	orrs	r2, r1
 8002578:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:557

      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <FLASH_OB_Erase+0xd4>)
 800257c:	1dba      	adds	r2, r7, #6
 800257e:	8812      	ldrh	r2, [r2, #0]
 8002580:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:560

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002582:	1d7c      	adds	r4, r7, #5
 8002584:	23b0      	movs	r3, #176	; 0xb0
 8002586:	031b      	lsls	r3, r3, #12
 8002588:	1c18      	adds	r0, r3, #0
 800258a:	f000 fb5b 	bl	8002c44 <FLASH_WaitForLastOperation>
 800258e:	1c03      	adds	r3, r0, #0
 8002590:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:562
 
      if(status != FLASH_TIMEOUT)
 8002592:	1d7b      	adds	r3, r7, #5
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d010      	beq.n	80025bc <FLASH_OB_Erase+0xc4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:565
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 800259c:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 800259e:	6912      	ldr	r2, [r2, #16]
 80025a0:	2110      	movs	r1, #16
 80025a2:	438a      	bics	r2, r1
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	e009      	b.n	80025bc <FLASH_OB_Erase+0xc4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:570
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
 80025a8:	1d7b      	adds	r3, r7, #5
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d005      	beq.n	80025bc <FLASH_OB_Erase+0xc4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:573
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <FLASH_OB_Erase+0xd0>)
 80025b4:	6912      	ldr	r2, [r2, #16]
 80025b6:	2110      	movs	r1, #16
 80025b8:	438a      	bics	r2, r1
 80025ba:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:578
      }
    }  
  }
  /* Return the erase status */
  return status;
 80025bc:	1d7b      	adds	r3, r7, #5
 80025be:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:579
}
 80025c0:	1c18      	adds	r0, r3, #0
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b003      	add	sp, #12
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	40022000 	.word	0x40022000
 80025cc:	1ffff800 	.word	0x1ffff800

080025d0 <FLASH_OB_EnableWRP>:
FLASH_OB_EnableWRP():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:594
  *             @arg OB_WRP_AllPages
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:595
  uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF;
 80025d8:	1c3b      	adds	r3, r7, #0
 80025da:	330c      	adds	r3, #12
 80025dc:	2201      	movs	r2, #1
 80025de:	4252      	negs	r2, r2
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	1c3b      	adds	r3, r7, #0
 80025e4:	330a      	adds	r3, #10
 80025e6:	2201      	movs	r2, #1
 80025e8:	4252      	negs	r2, r2
 80025ea:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:597

  FLASH_Status status = FLASH_COMPLETE;
 80025ec:	1c3b      	adds	r3, r7, #0
 80025ee:	330f      	adds	r3, #15
 80025f0:	2204      	movs	r2, #4
 80025f2:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:602

  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));

  OB_WRP = (uint32_t)(~OB_WRP);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:603
  WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	b299      	uxth	r1, r3
 80025fe:	1c3b      	adds	r3, r7, #0
 8002600:	330c      	adds	r3, #12
 8002602:	22ff      	movs	r2, #255	; 0xff
 8002604:	400a      	ands	r2, r1
 8002606:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:604
  WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	23ff      	movs	r3, #255	; 0xff
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	4013      	ands	r3, r2
 8002610:	0a1a      	lsrs	r2, r3, #8
 8002612:	1c3b      	adds	r3, r7, #0
 8002614:	330a      	adds	r3, #10
 8002616:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:607

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002618:	1c3c      	adds	r4, r7, #0
 800261a:	340f      	adds	r4, #15
 800261c:	23b0      	movs	r3, #176	; 0xb0
 800261e:	031b      	lsls	r3, r3, #12
 8002620:	1c18      	adds	r0, r3, #0
 8002622:	f000 fb0f 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002626:	1c03      	adds	r3, r0, #0
 8002628:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:609

  if(status == FLASH_COMPLETE)
 800262a:	1c3b      	adds	r3, r7, #0
 800262c:	330f      	adds	r3, #15
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b04      	cmp	r3, #4
 8002632:	d13b      	bne.n	80026ac <FLASH_OB_EnableWRP+0xdc>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:611
  {
    FLASH->CR |= FLASH_CR_OPTPG;
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <FLASH_OB_EnableWRP+0xec>)
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <FLASH_OB_EnableWRP+0xec>)
 8002638:	6912      	ldr	r2, [r2, #16]
 800263a:	2110      	movs	r1, #16
 800263c:	430a      	orrs	r2, r1
 800263e:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:613

    if(WRP0_Data != 0xFF)
 8002640:	1c3b      	adds	r3, r7, #0
 8002642:	330c      	adds	r3, #12
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	2bff      	cmp	r3, #255	; 0xff
 8002648:	d00d      	beq.n	8002666 <FLASH_OB_EnableWRP+0x96>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:615
    {
      OB->WRP0 = WRP0_Data;
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <FLASH_OB_EnableWRP+0xf0>)
 800264c:	1c3a      	adds	r2, r7, #0
 800264e:	320c      	adds	r2, #12
 8002650:	8812      	ldrh	r2, [r2, #0]
 8002652:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:618
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002654:	1c3c      	adds	r4, r7, #0
 8002656:	340f      	adds	r4, #15
 8002658:	23b0      	movs	r3, #176	; 0xb0
 800265a:	031b      	lsls	r3, r3, #12
 800265c:	1c18      	adds	r0, r3, #0
 800265e:	f000 faf1 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002662:	1c03      	adds	r3, r0, #0
 8002664:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:620
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8002666:	1c3b      	adds	r3, r7, #0
 8002668:	330f      	adds	r3, #15
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d112      	bne.n	8002696 <FLASH_OB_EnableWRP+0xc6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:620 (discriminator 1)
 8002670:	1c3b      	adds	r3, r7, #0
 8002672:	330a      	adds	r3, #10
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	2bff      	cmp	r3, #255	; 0xff
 8002678:	d00d      	beq.n	8002696 <FLASH_OB_EnableWRP+0xc6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:622
    {
      OB->WRP1 = WRP1_Data;
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <FLASH_OB_EnableWRP+0xf0>)
 800267c:	1c3a      	adds	r2, r7, #0
 800267e:	320a      	adds	r2, #10
 8002680:	8812      	ldrh	r2, [r2, #0]
 8002682:	815a      	strh	r2, [r3, #10]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:625
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002684:	1c3c      	adds	r4, r7, #0
 8002686:	340f      	adds	r4, #15
 8002688:	23b0      	movs	r3, #176	; 0xb0
 800268a:	031b      	lsls	r3, r3, #12
 800268c:	1c18      	adds	r0, r3, #0
 800268e:	f000 fad9 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002692:	1c03      	adds	r3, r0, #0
 8002694:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:628
    }
          
    if(status != FLASH_TIMEOUT)
 8002696:	1c3b      	adds	r3, r7, #0
 8002698:	330f      	adds	r3, #15
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b05      	cmp	r3, #5
 800269e:	d005      	beq.n	80026ac <FLASH_OB_EnableWRP+0xdc>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:631
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <FLASH_OB_EnableWRP+0xec>)
 80026a2:	4a06      	ldr	r2, [pc, #24]	; (80026bc <FLASH_OB_EnableWRP+0xec>)
 80026a4:	6912      	ldr	r2, [r2, #16]
 80026a6:	2110      	movs	r1, #16
 80026a8:	438a      	bics	r2, r1
 80026aa:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:635
    }
  } 
  /* Return the write protection operation Status */
  return status;
 80026ac:	1c3b      	adds	r3, r7, #0
 80026ae:	330f      	adds	r3, #15
 80026b0:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:636
}
 80026b2:	1c18      	adds	r0, r3, #0
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b005      	add	sp, #20
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	40022000 	.word	0x40022000
 80026c0:	1ffff800 	.word	0x1ffff800

080026c4 <FLASH_OB_RDPConfig>:
FLASH_OB_RDPConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:653
  * @note   When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	1c02      	adds	r2, r0, #0
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:654
  FLASH_Status status = FLASH_COMPLETE;
 80026d0:	1c3b      	adds	r3, r7, #0
 80026d2:	330f      	adds	r3, #15
 80026d4:	2204      	movs	r2, #4
 80026d6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:658
  
  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80026d8:	1c3c      	adds	r4, r7, #0
 80026da:	340f      	adds	r4, #15
 80026dc:	23b0      	movs	r3, #176	; 0xb0
 80026de:	031b      	lsls	r3, r3, #12
 80026e0:	1c18      	adds	r0, r3, #0
 80026e2:	f000 faaf 	bl	8002c44 <FLASH_WaitForLastOperation>
 80026e6:	1c03      	adds	r3, r0, #0
 80026e8:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:660
  
  if(status == FLASH_COMPLETE)
 80026ea:	1c3b      	adds	r3, r7, #0
 80026ec:	330f      	adds	r3, #15
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d14a      	bne.n	800278a <FLASH_OB_RDPConfig+0xc6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:662
  {
    FLASH->CR |= FLASH_CR_OPTER;
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 80026f6:	4a28      	ldr	r2, [pc, #160]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 80026f8:	6912      	ldr	r2, [r2, #16]
 80026fa:	2120      	movs	r1, #32
 80026fc:	430a      	orrs	r2, r1
 80026fe:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:663
    FLASH->CR |= FLASH_CR_STRT;
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 8002702:	4a25      	ldr	r2, [pc, #148]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 8002704:	6912      	ldr	r2, [r2, #16]
 8002706:	2140      	movs	r1, #64	; 0x40
 8002708:	430a      	orrs	r2, r1
 800270a:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:666
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800270c:	1c3c      	adds	r4, r7, #0
 800270e:	340f      	adds	r4, #15
 8002710:	23b0      	movs	r3, #176	; 0xb0
 8002712:	031b      	lsls	r3, r3, #12
 8002714:	1c18      	adds	r0, r3, #0
 8002716:	f000 fa95 	bl	8002c44 <FLASH_WaitForLastOperation>
 800271a:	1c03      	adds	r3, r0, #0
 800271c:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:668
    
    if(status == FLASH_COMPLETE)
 800271e:	1c3b      	adds	r3, r7, #0
 8002720:	330f      	adds	r3, #15
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d125      	bne.n	8002774 <FLASH_OB_RDPConfig+0xb0>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:671
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 800272a:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 800272c:	6912      	ldr	r2, [r2, #16]
 800272e:	2120      	movs	r1, #32
 8002730:	438a      	bics	r2, r1
 8002732:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:674
      
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 8002736:	4a18      	ldr	r2, [pc, #96]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 8002738:	6912      	ldr	r2, [r2, #16]
 800273a:	2110      	movs	r1, #16
 800273c:	430a      	orrs	r2, r1
 800273e:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:676
       
      OB->RDP = OB_RDP;
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <FLASH_OB_RDPConfig+0xd8>)
 8002742:	1dfa      	adds	r2, r7, #7
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	b292      	uxth	r2, r2
 8002748:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:679

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 800274a:	1c3c      	adds	r4, r7, #0
 800274c:	340f      	adds	r4, #15
 800274e:	23b0      	movs	r3, #176	; 0xb0
 8002750:	031b      	lsls	r3, r3, #12
 8002752:	1c18      	adds	r0, r3, #0
 8002754:	f000 fa76 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002758:	1c03      	adds	r3, r0, #0
 800275a:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:681
    
      if(status != FLASH_TIMEOUT)
 800275c:	1c3b      	adds	r3, r7, #0
 800275e:	330f      	adds	r3, #15
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d011      	beq.n	800278a <FLASH_OB_RDPConfig+0xc6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:684
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 8002768:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 800276a:	6912      	ldr	r2, [r2, #16]
 800276c:	2110      	movs	r1, #16
 800276e:	438a      	bics	r2, r1
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e00a      	b.n	800278a <FLASH_OB_RDPConfig+0xc6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:689
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
 8002774:	1c3b      	adds	r3, r7, #0
 8002776:	330f      	adds	r3, #15
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b05      	cmp	r3, #5
 800277c:	d005      	beq.n	800278a <FLASH_OB_RDPConfig+0xc6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:692
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= ~FLASH_CR_OPTER;
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 8002780:	4a05      	ldr	r2, [pc, #20]	; (8002798 <FLASH_OB_RDPConfig+0xd4>)
 8002782:	6912      	ldr	r2, [r2, #16]
 8002784:	2120      	movs	r1, #32
 8002786:	438a      	bics	r2, r1
 8002788:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:697
      }
    }
  }
  /* Return the protection operation Status */
  return status;
 800278a:	1c3b      	adds	r3, r7, #0
 800278c:	330f      	adds	r3, #15
 800278e:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:698
}
 8002790:	1c18      	adds	r0, r3, #0
 8002792:	46bd      	mov	sp, r7
 8002794:	b005      	add	sp, #20
 8002796:	bd90      	pop	{r4, r7, pc}
 8002798:	40022000 	.word	0x40022000
 800279c:	1ffff800 	.word	0x1ffff800

080027a0 <FLASH_OB_UserConfig>:
FLASH_OB_UserConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:721
  *             @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	7018      	strb	r0, [r3, #0]
 80027aa:	1dbb      	adds	r3, r7, #6
 80027ac:	7019      	strb	r1, [r3, #0]
 80027ae:	1d7b      	adds	r3, r7, #5
 80027b0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:722
  FLASH_Status status = FLASH_COMPLETE; 
 80027b2:	1c3b      	adds	r3, r7, #0
 80027b4:	330f      	adds	r3, #15
 80027b6:	2204      	movs	r2, #4
 80027b8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:730
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80027ba:	1c3c      	adds	r4, r7, #0
 80027bc:	340f      	adds	r4, #15
 80027be:	23b0      	movs	r3, #176	; 0xb0
 80027c0:	031b      	lsls	r3, r3, #12
 80027c2:	1c18      	adds	r0, r3, #0
 80027c4:	f000 fa3e 	bl	8002c44 <FLASH_WaitForLastOperation>
 80027c8:	1c03      	adds	r3, r0, #0
 80027ca:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:732
  
  if(status == FLASH_COMPLETE)
 80027cc:	1c3b      	adds	r3, r7, #0
 80027ce:	330f      	adds	r3, #15
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d129      	bne.n	800282a <FLASH_OB_UserConfig+0x8a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:735
  {
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <FLASH_OB_UserConfig+0x98>)
 80027d8:	4a17      	ldr	r2, [pc, #92]	; (8002838 <FLASH_OB_UserConfig+0x98>)
 80027da:	6912      	ldr	r2, [r2, #16]
 80027dc:	2110      	movs	r1, #16
 80027de:	430a      	orrs	r2, r1
 80027e0:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:737

    OB->USER = (uint16_t)((uint16_t)(OB_IWDG | OB_STOP) | (uint16_t)(OB_STDBY | 0xF8));
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <FLASH_OB_UserConfig+0x9c>)
 80027e4:	1df9      	adds	r1, r7, #7
 80027e6:	1dba      	adds	r2, r7, #6
 80027e8:	7809      	ldrb	r1, [r1, #0]
 80027ea:	7812      	ldrb	r2, [r2, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	b2d1      	uxtb	r1, r2
 80027f0:	1d7a      	adds	r2, r7, #5
 80027f2:	7812      	ldrb	r2, [r2, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	2108      	movs	r1, #8
 80027fa:	4249      	negs	r1, r1
 80027fc:	430a      	orrs	r2, r1
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:740
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002802:	1c3c      	adds	r4, r7, #0
 8002804:	340f      	adds	r4, #15
 8002806:	23b0      	movs	r3, #176	; 0xb0
 8002808:	031b      	lsls	r3, r3, #12
 800280a:	1c18      	adds	r0, r3, #0
 800280c:	f000 fa1a 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002810:	1c03      	adds	r3, r0, #0
 8002812:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:742

    if(status != FLASH_TIMEOUT)
 8002814:	1c3b      	adds	r3, r7, #0
 8002816:	330f      	adds	r3, #15
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d005      	beq.n	800282a <FLASH_OB_UserConfig+0x8a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:745
    {
      /* If the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <FLASH_OB_UserConfig+0x98>)
 8002820:	4a05      	ldr	r2, [pc, #20]	; (8002838 <FLASH_OB_UserConfig+0x98>)
 8002822:	6912      	ldr	r2, [r2, #16]
 8002824:	2110      	movs	r1, #16
 8002826:	438a      	bics	r2, r1
 8002828:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:749
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 800282a:	1c3b      	adds	r3, r7, #0
 800282c:	330f      	adds	r3, #15
 800282e:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:750
}
 8002830:	1c18      	adds	r0, r3, #0
 8002832:	46bd      	mov	sp, r7
 8002834:	b005      	add	sp, #20
 8002836:	bd90      	pop	{r4, r7, pc}
 8002838:	40022000 	.word	0x40022000
 800283c:	1ffff800 	.word	0x1ffff800

08002840 <FLASH_OB_BOOTConfig>:
FLASH_OB_BOOTConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:761
  *             @arg OB_BOOT1_RESET: BOOT1 option bit reset
  *             @arg OB_BOOT1_SET: BOOT1 option bit set
  * @retval None
  */
FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	1c02      	adds	r2, r0, #0
 8002848:	1dfb      	adds	r3, r7, #7
 800284a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:762
  FLASH_Status status = FLASH_COMPLETE; 
 800284c:	1c3b      	adds	r3, r7, #0
 800284e:	330f      	adds	r3, #15
 8002850:	2204      	movs	r2, #4
 8002852:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:768

  /* Check the parameters */
  assert_param(IS_OB_BOOT1(OB_BOOT1));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002854:	1c3c      	adds	r4, r7, #0
 8002856:	340f      	adds	r4, #15
 8002858:	23b0      	movs	r3, #176	; 0xb0
 800285a:	031b      	lsls	r3, r3, #12
 800285c:	1c18      	adds	r0, r3, #0
 800285e:	f000 f9f1 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002862:	1c03      	adds	r3, r0, #0
 8002864:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:770
  
  if(status == FLASH_COMPLETE)
 8002866:	1c3b      	adds	r3, r7, #0
 8002868:	330f      	adds	r3, #15
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d121      	bne.n	80028b4 <FLASH_OB_BOOTConfig+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:773
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG;
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <FLASH_OB_BOOTConfig+0x84>)
 8002872:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <FLASH_OB_BOOTConfig+0x84>)
 8002874:	6912      	ldr	r2, [r2, #16]
 8002876:	2110      	movs	r1, #16
 8002878:	430a      	orrs	r2, r1
 800287a:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:775

    OB->USER = OB_BOOT1 | 0xEF;
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <FLASH_OB_BOOTConfig+0x88>)
 800287e:	1dfa      	adds	r2, r7, #7
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	2111      	movs	r1, #17
 8002884:	4249      	negs	r1, r1
 8002886:	430a      	orrs	r2, r1
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:778
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800288c:	1c3c      	adds	r4, r7, #0
 800288e:	340f      	adds	r4, #15
 8002890:	23b0      	movs	r3, #176	; 0xb0
 8002892:	031b      	lsls	r3, r3, #12
 8002894:	1c18      	adds	r0, r3, #0
 8002896:	f000 f9d5 	bl	8002c44 <FLASH_WaitForLastOperation>
 800289a:	1c03      	adds	r3, r0, #0
 800289c:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:780

    if(status != FLASH_TIMEOUT)
 800289e:	1c3b      	adds	r3, r7, #0
 80028a0:	330f      	adds	r3, #15
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d005      	beq.n	80028b4 <FLASH_OB_BOOTConfig+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:783
    {
      /* If the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <FLASH_OB_BOOTConfig+0x84>)
 80028aa:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <FLASH_OB_BOOTConfig+0x84>)
 80028ac:	6912      	ldr	r2, [r2, #16]
 80028ae:	2110      	movs	r1, #16
 80028b0:	438a      	bics	r2, r1
 80028b2:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:787
    }
  }
  /* Return the Option Byte program Status */
  return status;
 80028b4:	1c3b      	adds	r3, r7, #0
 80028b6:	330f      	adds	r3, #15
 80028b8:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:788
}
 80028ba:	1c18      	adds	r0, r3, #0
 80028bc:	46bd      	mov	sp, r7
 80028be:	b005      	add	sp, #20
 80028c0:	bd90      	pop	{r4, r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	40022000 	.word	0x40022000
 80028c8:	1ffff800 	.word	0x1ffff800

080028cc <FLASH_OB_VDDAConfig>:
FLASH_OB_VDDAConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:799
  *             @arg OB_VDDA_ANALOG_ON: Analog monitoring on VDDA Power source ON
  *             @arg OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source OFF
  * @retval None
  */
FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	1c02      	adds	r2, r0, #0
 80028d4:	1dfb      	adds	r3, r7, #7
 80028d6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:800
  FLASH_Status status = FLASH_COMPLETE; 
 80028d8:	1c3b      	adds	r3, r7, #0
 80028da:	330f      	adds	r3, #15
 80028dc:	2204      	movs	r2, #4
 80028de:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:806

  /* Check the parameters */
  assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80028e0:	1c3c      	adds	r4, r7, #0
 80028e2:	340f      	adds	r4, #15
 80028e4:	23b0      	movs	r3, #176	; 0xb0
 80028e6:	031b      	lsls	r3, r3, #12
 80028e8:	1c18      	adds	r0, r3, #0
 80028ea:	f000 f9ab 	bl	8002c44 <FLASH_WaitForLastOperation>
 80028ee:	1c03      	adds	r3, r0, #0
 80028f0:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:808
  
  if(status == FLASH_COMPLETE)
 80028f2:	1c3b      	adds	r3, r7, #0
 80028f4:	330f      	adds	r3, #15
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d121      	bne.n	8002940 <FLASH_OB_VDDAConfig+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:811
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <FLASH_OB_VDDAConfig+0x84>)
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <FLASH_OB_VDDAConfig+0x84>)
 8002900:	6912      	ldr	r2, [r2, #16]
 8002902:	2110      	movs	r1, #16
 8002904:	430a      	orrs	r2, r1
 8002906:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:813

    OB->USER = OB_VDDA_ANALOG | 0xDF;
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <FLASH_OB_VDDAConfig+0x88>)
 800290a:	1dfa      	adds	r2, r7, #7
 800290c:	7812      	ldrb	r2, [r2, #0]
 800290e:	2121      	movs	r1, #33	; 0x21
 8002910:	4249      	negs	r1, r1
 8002912:	430a      	orrs	r2, r1
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:816
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002918:	1c3c      	adds	r4, r7, #0
 800291a:	340f      	adds	r4, #15
 800291c:	23b0      	movs	r3, #176	; 0xb0
 800291e:	031b      	lsls	r3, r3, #12
 8002920:	1c18      	adds	r0, r3, #0
 8002922:	f000 f98f 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002926:	1c03      	adds	r3, r0, #0
 8002928:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:818

    if(status != FLASH_TIMEOUT)
 800292a:	1c3b      	adds	r3, r7, #0
 800292c:	330f      	adds	r3, #15
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d005      	beq.n	8002940 <FLASH_OB_VDDAConfig+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:821
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <FLASH_OB_VDDAConfig+0x84>)
 8002936:	4a06      	ldr	r2, [pc, #24]	; (8002950 <FLASH_OB_VDDAConfig+0x84>)
 8002938:	6912      	ldr	r2, [r2, #16]
 800293a:	2110      	movs	r1, #16
 800293c:	438a      	bics	r2, r1
 800293e:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:825
    }
  }
  /* Return the Option Byte program Status */
  return status;
 8002940:	1c3b      	adds	r3, r7, #0
 8002942:	330f      	adds	r3, #15
 8002944:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:826
}
 8002946:	1c18      	adds	r0, r3, #0
 8002948:	46bd      	mov	sp, r7
 800294a:	b005      	add	sp, #20
 800294c:	bd90      	pop	{r4, r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40022000 	.word	0x40022000
 8002954:	1ffff800 	.word	0x1ffff800

08002958 <FLASH_OB_SRAMParityConfig>:
FLASH_OB_SRAMParityConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:837
  *             @arg OB_SRAM_PARITY_SET: Set SRAM parity.
  *             @arg OB_SRAM_PARITY_RESET: Reset SRAM parity.
  * @retval None
  */
FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	1c02      	adds	r2, r0, #0
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:838
  FLASH_Status status = FLASH_COMPLETE; 
 8002964:	1c3b      	adds	r3, r7, #0
 8002966:	330f      	adds	r3, #15
 8002968:	2204      	movs	r2, #4
 800296a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:844

  /* Check the parameters */
  assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800296c:	1c3c      	adds	r4, r7, #0
 800296e:	340f      	adds	r4, #15
 8002970:	23b0      	movs	r3, #176	; 0xb0
 8002972:	031b      	lsls	r3, r3, #12
 8002974:	1c18      	adds	r0, r3, #0
 8002976:	f000 f965 	bl	8002c44 <FLASH_WaitForLastOperation>
 800297a:	1c03      	adds	r3, r0, #0
 800297c:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:846
  
  if(status == FLASH_COMPLETE)
 800297e:	1c3b      	adds	r3, r7, #0
 8002980:	330f      	adds	r3, #15
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d121      	bne.n	80029cc <FLASH_OB_SRAMParityConfig+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:849
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002988:	4b14      	ldr	r3, [pc, #80]	; (80029dc <FLASH_OB_SRAMParityConfig+0x84>)
 800298a:	4a14      	ldr	r2, [pc, #80]	; (80029dc <FLASH_OB_SRAMParityConfig+0x84>)
 800298c:	6912      	ldr	r2, [r2, #16]
 800298e:	2110      	movs	r1, #16
 8002990:	430a      	orrs	r2, r1
 8002992:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:851

    OB->USER = OB_SRAM_Parity | 0xBF;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <FLASH_OB_SRAMParityConfig+0x88>)
 8002996:	1dfa      	adds	r2, r7, #7
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	2141      	movs	r1, #65	; 0x41
 800299c:	4249      	negs	r1, r1
 800299e:	430a      	orrs	r2, r1
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:854
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80029a4:	1c3c      	adds	r4, r7, #0
 80029a6:	340f      	adds	r4, #15
 80029a8:	23b0      	movs	r3, #176	; 0xb0
 80029aa:	031b      	lsls	r3, r3, #12
 80029ac:	1c18      	adds	r0, r3, #0
 80029ae:	f000 f949 	bl	8002c44 <FLASH_WaitForLastOperation>
 80029b2:	1c03      	adds	r3, r0, #0
 80029b4:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:856

    if(status != FLASH_TIMEOUT)
 80029b6:	1c3b      	adds	r3, r7, #0
 80029b8:	330f      	adds	r3, #15
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d005      	beq.n	80029cc <FLASH_OB_SRAMParityConfig+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:859
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <FLASH_OB_SRAMParityConfig+0x84>)
 80029c2:	4a06      	ldr	r2, [pc, #24]	; (80029dc <FLASH_OB_SRAMParityConfig+0x84>)
 80029c4:	6912      	ldr	r2, [r2, #16]
 80029c6:	2110      	movs	r1, #16
 80029c8:	438a      	bics	r2, r1
 80029ca:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:863
    }
  }
  /* Return the Option Byte program Status */
  return status;
 80029cc:	1c3b      	adds	r3, r7, #0
 80029ce:	330f      	adds	r3, #15
 80029d0:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:864
}
 80029d2:	1c18      	adds	r0, r3, #0
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b005      	add	sp, #20
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	40022000 	.word	0x40022000
 80029e0:	1ffff800 	.word	0x1ffff800

080029e4 <FLASH_OB_WriteUser>:
FLASH_OB_WriteUser():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:884
  *             @arg OB_SRAM_PARITY_SET / OB_SRAM_PARITY_RESET: SRAM Parity SET / RESET   
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	1c02      	adds	r2, r0, #0
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:885
  FLASH_Status status = FLASH_COMPLETE; 
 80029f0:	1c3b      	adds	r3, r7, #0
 80029f2:	330f      	adds	r3, #15
 80029f4:	2204      	movs	r2, #4
 80029f6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:888

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80029f8:	1c3c      	adds	r4, r7, #0
 80029fa:	340f      	adds	r4, #15
 80029fc:	23b0      	movs	r3, #176	; 0xb0
 80029fe:	031b      	lsls	r3, r3, #12
 8002a00:	1c18      	adds	r0, r3, #0
 8002a02:	f000 f91f 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002a06:	1c03      	adds	r3, r0, #0
 8002a08:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:890
  
  if(status == FLASH_COMPLETE)
 8002a0a:	1c3b      	adds	r3, r7, #0
 8002a0c:	330f      	adds	r3, #15
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d121      	bne.n	8002a58 <FLASH_OB_WriteUser+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:893
  {
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <FLASH_OB_WriteUser+0x84>)
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <FLASH_OB_WriteUser+0x84>)
 8002a18:	6912      	ldr	r2, [r2, #16]
 8002a1a:	2110      	movs	r1, #16
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:895

    OB->USER = OB_USER | 0x88;
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <FLASH_OB_WriteUser+0x88>)
 8002a22:	1dfa      	adds	r2, r7, #7
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	2178      	movs	r1, #120	; 0x78
 8002a28:	4249      	negs	r1, r1
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:898
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002a30:	1c3c      	adds	r4, r7, #0
 8002a32:	340f      	adds	r4, #15
 8002a34:	23b0      	movs	r3, #176	; 0xb0
 8002a36:	031b      	lsls	r3, r3, #12
 8002a38:	1c18      	adds	r0, r3, #0
 8002a3a:	f000 f903 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002a3e:	1c03      	adds	r3, r0, #0
 8002a40:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:900

    if(status != FLASH_TIMEOUT)
 8002a42:	1c3b      	adds	r3, r7, #0
 8002a44:	330f      	adds	r3, #15
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d005      	beq.n	8002a58 <FLASH_OB_WriteUser+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:903
    {
      /* If the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <FLASH_OB_WriteUser+0x84>)
 8002a4e:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <FLASH_OB_WriteUser+0x84>)
 8002a50:	6912      	ldr	r2, [r2, #16]
 8002a52:	2110      	movs	r1, #16
 8002a54:	438a      	bics	r2, r1
 8002a56:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:907
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 8002a58:	1c3b      	adds	r3, r7, #0
 8002a5a:	330f      	adds	r3, #15
 8002a5c:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:909

}
 8002a5e:	1c18      	adds	r0, r3, #0
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b005      	add	sp, #20
 8002a64:	bd90      	pop	{r4, r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	1ffff800 	.word	0x1ffff800

08002a70 <FLASH_ProgramOptionByteData>:
FLASH_ProgramOptionByteData():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:923
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	1c0a      	adds	r2, r1, #0
 8002a7a:	1cfb      	adds	r3, r7, #3
 8002a7c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:924
  FLASH_Status status = FLASH_COMPLETE;
 8002a7e:	1c3b      	adds	r3, r7, #0
 8002a80:	330f      	adds	r3, #15
 8002a82:	2204      	movs	r2, #4
 8002a84:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:927
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002a86:	1c3c      	adds	r4, r7, #0
 8002a88:	340f      	adds	r4, #15
 8002a8a:	23b0      	movs	r3, #176	; 0xb0
 8002a8c:	031b      	lsls	r3, r3, #12
 8002a8e:	1c18      	adds	r0, r3, #0
 8002a90:	f000 f8d8 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002a94:	1c03      	adds	r3, r0, #0
 8002a96:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:929

  if(status == FLASH_COMPLETE)
 8002a98:	1c3b      	adds	r3, r7, #0
 8002a9a:	330f      	adds	r3, #15
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d11e      	bne.n	8002ae0 <FLASH_ProgramOptionByteData+0x70>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:932
  {
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <FLASH_ProgramOptionByteData+0x80>)
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <FLASH_ProgramOptionByteData+0x80>)
 8002aa6:	6912      	ldr	r2, [r2, #16]
 8002aa8:	2110      	movs	r1, #16
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:933
    *(__IO uint16_t*)Address = Data;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	1cfa      	adds	r2, r7, #3
 8002ab2:	7812      	ldrb	r2, [r2, #0]
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:936
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002ab8:	1c3c      	adds	r4, r7, #0
 8002aba:	340f      	adds	r4, #15
 8002abc:	23b0      	movs	r3, #176	; 0xb0
 8002abe:	031b      	lsls	r3, r3, #12
 8002ac0:	1c18      	adds	r0, r3, #0
 8002ac2:	f000 f8bf 	bl	8002c44 <FLASH_WaitForLastOperation>
 8002ac6:	1c03      	adds	r3, r0, #0
 8002ac8:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:938
    
    if(status != FLASH_TIMEOUT)
 8002aca:	1c3b      	adds	r3, r7, #0
 8002acc:	330f      	adds	r3, #15
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d005      	beq.n	8002ae0 <FLASH_ProgramOptionByteData+0x70>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:941
    {
      /* If the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <FLASH_ProgramOptionByteData+0x80>)
 8002ad6:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <FLASH_ProgramOptionByteData+0x80>)
 8002ad8:	6912      	ldr	r2, [r2, #16]
 8002ada:	2110      	movs	r1, #16
 8002adc:	438a      	bics	r2, r1
 8002ade:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:945
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8002ae0:	1c3b      	adds	r3, r7, #0
 8002ae2:	330f      	adds	r3, #15
 8002ae4:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:946
}
 8002ae6:	1c18      	adds	r0, r3, #0
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b005      	add	sp, #20
 8002aec:	bd90      	pop	{r4, r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40022000 	.word	0x40022000

08002af4 <FLASH_OB_GetUser>:
FLASH_OB_GetUser():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:954
  * @brief  Returns the FLASH User Option Bytes values.
  * @param  None
  * @retval The FLASH User Option Bytes .
  */
uint8_t FLASH_OB_GetUser(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:956
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OBR >> 8);
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <FLASH_OB_GetUser+0x14>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:957
}
 8002b00:	1c18      	adds	r0, r3, #0
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	40022000 	.word	0x40022000

08002b0c <FLASH_OB_GetWRP>:
FLASH_OB_GetWRP():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:965
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection Option Bytes value
  */
uint32_t FLASH_OB_GetWRP(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:967
  /* Return the FLASH write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 8002b10:	4b02      	ldr	r3, [pc, #8]	; (8002b1c <FLASH_OB_GetWRP+0x10>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:968
}
 8002b14:	1c18      	adds	r0, r3, #0
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	40022000 	.word	0x40022000

08002b20 <FLASH_OB_GetRDP>:
FLASH_OB_GetRDP():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:976
  * @brief  Checks whether the FLASH Read out Protection Status is set or not.
  * @param  None
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:977
  FlagStatus readstatus = RESET;
 8002b26:	1dfb      	adds	r3, r7, #7
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:979
  
  if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <FLASH_OB_GetRDP+0x34>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	1c1a      	adds	r2, r3, #0
 8002b34:	2306      	movs	r3, #6
 8002b36:	4013      	ands	r3, r2
 8002b38:	d003      	beq.n	8002b42 <FLASH_OB_GetRDP+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:981
  {
    readstatus = SET;
 8002b3a:	1dfb      	adds	r3, r7, #7
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e002      	b.n	8002b48 <FLASH_OB_GetRDP+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:985
  }
  else
  {
    readstatus = RESET;
 8002b42:	1dfb      	adds	r3, r7, #7
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:987
  }
  return readstatus;
 8002b48:	1dfb      	adds	r3, r7, #7
 8002b4a:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:988
}
 8002b4c:	1c18      	adds	r0, r3, #0
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40022000 	.word	0x40022000

08002b58 <FLASH_ITConfig>:
FLASH_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1016
  *             @arg FLASH_IT_EOP: FLASH end of programming Interrupt
  *             @arg FLASH_IT_ERR: FLASH Error Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	1c0a      	adds	r2, r1, #0
 8002b62:	1cfb      	adds	r3, r7, #3
 8002b64:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1021
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8002b66:	1cfb      	adds	r3, r7, #3
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <FLASH_ITConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1024
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <FLASH_ITConfig+0x38>)
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <FLASH_ITConfig+0x38>)
 8002b72:	6911      	ldr	r1, [r2, #16]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	611a      	str	r2, [r3, #16]
 8002b7a:	e006      	b.n	8002b8a <FLASH_ITConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1029
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <FLASH_ITConfig+0x38>)
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <FLASH_ITConfig+0x38>)
 8002b80:	6912      	ldr	r2, [r2, #16]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	43c9      	mvns	r1, r1
 8002b86:	400a      	ands	r2, r1
 8002b88:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1031
  }
}
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40022000 	.word	0x40022000

08002b94 <FLASH_GetFlagStatus>:
FLASH_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1044
  *             @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *             @arg FLASH_FLAG_EOP: FLASH End of Programming flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1045
  FlagStatus bitstatus = RESET;
 8002b9c:	1c3b      	adds	r3, r7, #0
 8002b9e:	330f      	adds	r3, #15
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1050

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <FLASH_GetFlagStatus+0x3c>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4013      	ands	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <FLASH_GetFlagStatus+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1052
  {
    bitstatus = SET;
 8002bae:	1c3b      	adds	r3, r7, #0
 8002bb0:	330f      	adds	r3, #15
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	e003      	b.n	8002bc0 <FLASH_GetFlagStatus+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1056
  }
  else
  {
    bitstatus = RESET;
 8002bb8:	1c3b      	adds	r3, r7, #0
 8002bba:	330f      	adds	r3, #15
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1059
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8002bc0:	1c3b      	adds	r3, r7, #0
 8002bc2:	330f      	adds	r3, #15
 8002bc4:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1060
}
 8002bc6:	1c18      	adds	r0, r3, #0
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	40022000 	.word	0x40022000

08002bd4 <FLASH_ClearFlag>:
FLASH_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1072
  *             @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *             @arg FLASH_FLAG_EOP: FLASH End of Programming flag
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1077
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8002bdc:	4b02      	ldr	r3, [pc, #8]	; (8002be8 <FLASH_ClearFlag+0x14>)
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1078
}
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40022000 	.word	0x40022000

08002bec <FLASH_GetStatus>:
FLASH_GetStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1087
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1088
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1090
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <FLASH_GetStatus+0x54>)
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d003      	beq.n	8002c0a <FLASH_GetStatus+0x1e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1092
  {
    FLASHstatus = FLASH_BUSY;
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e014      	b.n	8002c34 <FLASH_GetStatus+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1096
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <FLASH_GetStatus+0x54>)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	2310      	movs	r3, #16
 8002c10:	4013      	ands	r3, r2
 8002c12:	d003      	beq.n	8002c1c <FLASH_GetStatus+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1098
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e00b      	b.n	8002c34 <FLASH_GetStatus+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1102
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <FLASH_GetStatus+0x54>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	2304      	movs	r3, #4
 8002c22:	4013      	ands	r3, r2
 8002c24:	d003      	beq.n	8002c2e <FLASH_GetStatus+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1104
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 8002c26:	1dfb      	adds	r3, r7, #7
 8002c28:	2203      	movs	r2, #3
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e002      	b.n	8002c34 <FLASH_GetStatus+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1108
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	2204      	movs	r2, #4
 8002c32:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1113
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
 8002c34:	1dfb      	adds	r3, r7, #7
 8002c36:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1114
}
 8002c38:	1c18      	adds	r0, r3, #0
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40022000 	.word	0x40022000

08002c44 <FLASH_WaitForLastOperation>:
FLASH_WaitForLastOperation():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1124
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1125
  FLASH_Status status = FLASH_COMPLETE;
 8002c4c:	1c3b      	adds	r3, r7, #0
 8002c4e:	330f      	adds	r3, #15
 8002c50:	2204      	movs	r2, #4
 8002c52:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1128
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8002c54:	1c3c      	adds	r4, r7, #0
 8002c56:	340f      	adds	r4, #15
 8002c58:	f7ff ffc8 	bl	8002bec <FLASH_GetStatus>
 8002c5c:	1c03      	adds	r3, r0, #0
 8002c5e:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1131
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002c60:	e008      	b.n	8002c74 <FLASH_WaitForLastOperation+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1133
  {
    status = FLASH_GetStatus();
 8002c62:	1c3c      	adds	r4, r7, #0
 8002c64:	340f      	adds	r4, #15
 8002c66:	f7ff ffc1 	bl	8002bec <FLASH_GetStatus>
 8002c6a:	1c03      	adds	r3, r0, #0
 8002c6c:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1134
    Timeout--;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1131 (discriminator 1)
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002c74:	1c3b      	adds	r3, r7, #0
 8002c76:	330f      	adds	r3, #15
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d102      	bne.n	8002c84 <FLASH_WaitForLastOperation+0x40>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1131 (discriminator 2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ee      	bne.n	8002c62 <FLASH_WaitForLastOperation+0x1e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1137
  {
    status = FLASH_GetStatus();
    Timeout--;
  }
  
  if(Timeout == 0x00 )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <FLASH_WaitForLastOperation+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1139
  {
    status = FLASH_TIMEOUT;
 8002c8a:	1c3b      	adds	r3, r7, #0
 8002c8c:	330f      	adds	r3, #15
 8002c8e:	2205      	movs	r2, #5
 8002c90:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1142
  }
  /* Return the operation status */
  return status;
 8002c92:	1c3b      	adds	r3, r7, #0
 8002c94:	330f      	adds	r3, #15
 8002c96:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c:1143
}
 8002c98:	1c18      	adds	r0, r3, #0
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b005      	add	sp, #20
 8002c9e:	bd90      	pop	{r4, r7, pc}

08002ca0 <GPIO_DeInit>:
GPIO_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:118
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:122
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	2390      	movs	r3, #144	; 0x90
 8002cac:	05db      	lsls	r3, r3, #23
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10c      	bne.n	8002ccc <GPIO_DeInit+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:124
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	029b      	lsls	r3, r3, #10
 8002cb6:	1c18      	adds	r0, r3, #0
 8002cb8:	2101      	movs	r1, #1
 8002cba:	f001 fda3 	bl	8004804 <RCC_AHBPeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:125
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	1c18      	adds	r0, r3, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	f001 fd9d 	bl	8004804 <RCC_AHBPeriphResetCmd>
 8002cca:	e042      	b.n	8002d52 <GPIO_DeInit+0xb2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:127
  }
  else if(GPIOx == GPIOB)
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <GPIO_DeInit+0xb8>)
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d10c      	bne.n	8002cee <GPIO_DeInit+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:129
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	02db      	lsls	r3, r3, #11
 8002cd8:	1c18      	adds	r0, r3, #0
 8002cda:	2101      	movs	r1, #1
 8002cdc:	f001 fd92 	bl	8004804 <RCC_AHBPeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:130
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	02db      	lsls	r3, r3, #11
 8002ce4:	1c18      	adds	r0, r3, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f001 fd8c 	bl	8004804 <RCC_AHBPeriphResetCmd>
 8002cec:	e031      	b.n	8002d52 <GPIO_DeInit+0xb2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:132
  }
  else if(GPIOx == GPIOC)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <GPIO_DeInit+0xbc>)
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d10c      	bne.n	8002d10 <GPIO_DeInit+0x70>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:134
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	031b      	lsls	r3, r3, #12
 8002cfa:	1c18      	adds	r0, r3, #0
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	f001 fd81 	bl	8004804 <RCC_AHBPeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:135
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	031b      	lsls	r3, r3, #12
 8002d06:	1c18      	adds	r0, r3, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	f001 fd7b 	bl	8004804 <RCC_AHBPeriphResetCmd>
 8002d0e:	e020      	b.n	8002d52 <GPIO_DeInit+0xb2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:137
  }
  else if(GPIOx == GPIOD)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <GPIO_DeInit+0xc0>)
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d10c      	bne.n	8002d32 <GPIO_DeInit+0x92>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:139
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	035b      	lsls	r3, r3, #13
 8002d1c:	1c18      	adds	r0, r3, #0
 8002d1e:	2101      	movs	r1, #1
 8002d20:	f001 fd70 	bl	8004804 <RCC_AHBPeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:140
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	035b      	lsls	r3, r3, #13
 8002d28:	1c18      	adds	r0, r3, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	f001 fd6a 	bl	8004804 <RCC_AHBPeriphResetCmd>
 8002d30:	e00f      	b.n	8002d52 <GPIO_DeInit+0xb2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:144
  }
  else
  {
    if(GPIOx == GPIOF)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <GPIO_DeInit+0xc4>)
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10b      	bne.n	8002d52 <GPIO_DeInit+0xb2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:146
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	03db      	lsls	r3, r3, #15
 8002d3e:	1c18      	adds	r0, r3, #0
 8002d40:	2101      	movs	r1, #1
 8002d42:	f001 fd5f 	bl	8004804 <RCC_AHBPeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:147
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	03db      	lsls	r3, r3, #15
 8002d4a:	1c18      	adds	r0, r3, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f001 fd59 	bl	8004804 <RCC_AHBPeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:150
    }
  }
}
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b002      	add	sp, #8
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	48000400 	.word	0x48000400
 8002d5c:	48000800 	.word	0x48000800
 8002d60:	48000c00 	.word	0x48000c00
 8002d64:	48001400 	.word	0x48001400

08002d68 <GPIO_Init>:
GPIO_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:163
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:164
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:174
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e085      	b.n	8002e90 <GPIO_Init+0x128>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:176
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2201      	movs	r2, #1
 8002d88:	1c10      	adds	r0, r2, #0
 8002d8a:	4098      	lsls	r0, r3
 8002d8c:	1c03      	adds	r3, r0, #0
 8002d8e:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:179

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:181

    if (currentpin == pos)
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d173      	bne.n	8002e8a <GPIO_Init+0x122>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:183
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	791b      	ldrb	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d003      	beq.n	8002db2 <GPIO_Init+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:183 (discriminator 1)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	791b      	ldrb	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d138      	bne.n	8002e24 <GPIO_Init+0xbc>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:189
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	0052      	lsls	r2, r2, #1
 8002dba:	2103      	movs	r1, #3
 8002dbc:	1c08      	adds	r0, r1, #0
 8002dbe:	4090      	lsls	r0, r2
 8002dc0:	1c02      	adds	r2, r0, #0
 8002dc2:	43d2      	mvns	r2, r2
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:190
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	795b      	ldrb	r3, [r3, #5]
 8002dd2:	1c19      	adds	r1, r3, #0
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	1c08      	adds	r0, r1, #0
 8002dda:	4098      	lsls	r0, r3
 8002ddc:	1c03      	adds	r3, r0, #0
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:196

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	889b      	ldrh	r3, [r3, #4]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	b292      	uxth	r2, r2
 8002dee:	2101      	movs	r1, #1
 8002df0:	1c08      	adds	r0, r1, #0
 8002df2:	4090      	lsls	r0, r2
 8002df4:	1c02      	adds	r2, r0, #0
 8002df6:	b292      	uxth	r2, r2
 8002df8:	43d2      	mvns	r2, r2
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:197
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	889b      	ldrh	r3, [r3, #4]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	799b      	ldrb	r3, [r3, #6]
 8002e0e:	1c19      	adds	r1, r3, #0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	1c08      	adds	r0, r1, #0
 8002e16:	4098      	lsls	r0, r3
 8002e18:	1c03      	adds	r3, r0, #0
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:200
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	0052      	lsls	r2, r2, #1
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	1c08      	adds	r0, r1, #0
 8002e30:	4090      	lsls	r0, r2
 8002e32:	1c02      	adds	r2, r0, #0
 8002e34:	43d2      	mvns	r2, r2
 8002e36:	401a      	ands	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:202

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	791b      	ldrb	r3, [r3, #4]
 8002e44:	1c19      	adds	r1, r3, #0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	1c08      	adds	r0, r1, #0
 8002e4c:	4098      	lsls	r0, r3
 8002e4e:	1c03      	adds	r3, r0, #0
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:205

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	0052      	lsls	r2, r2, #1
 8002e60:	2103      	movs	r1, #3
 8002e62:	1c08      	adds	r0, r1, #0
 8002e64:	4090      	lsls	r0, r2
 8002e66:	1c02      	adds	r2, r0, #0
 8002e68:	43d2      	mvns	r2, r2
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:206
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	79db      	ldrb	r3, [r3, #7]
 8002e78:	1c19      	adds	r1, r3, #0
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	1c08      	adds	r0, r1, #0
 8002e80:	4098      	lsls	r0, r3
 8002e82:	1c03      	adds	r3, r0, #0
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:174
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:174 (discriminator 1)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d800      	bhi.n	8002e98 <GPIO_Init+0x130>
 8002e96:	e775      	b.n	8002d84 <GPIO_Init+0x1c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:209
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b006      	add	sp, #24
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)

08002ea0 <GPIO_StructInit>:
GPIO_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:218
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:220
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <GPIO_StructInit+0x2c>)
 8002eac:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:221
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:222
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:223
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:224
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:225
}
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	0000ffff 	.word	0x0000ffff

08002ed0 <GPIO_PinLockConfig>:
GPIO_PinLockConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:239
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	1c0a      	adds	r2, r1, #0
 8002eda:	1cbb      	adds	r3, r7, #2
 8002edc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:240
  __IO uint32_t tmp = 0x00010000;
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:246

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8002ee4:	1cbb      	adds	r3, r7, #2
 8002ee6:	881a      	ldrh	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:248
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	61da      	str	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:250
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8002ef4:	1cbb      	adds	r3, r7, #2
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	61da      	str	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:252
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	61da      	str	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:254
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:256
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:257
}
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b004      	add	sp, #16
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <GPIO_ReadInputDataBit>:
GPIO_ReadInputDataBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:284
  * @note   This parameter can be GPIO_Pin_x where x can be:(0..15) for GPIOA, 
  *         GPIOB or GPIOC,(0..2) for GPIOD and(0..3) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	1c0a      	adds	r2, r1, #0
 8002f1e:	1cbb      	adds	r3, r7, #2
 8002f20:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:285
  uint8_t bitstatus = 0x00;
 8002f22:	1c3b      	adds	r3, r7, #0
 8002f24:	330f      	adds	r3, #15
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:291

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8a1b      	ldrh	r3, [r3, #16]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	1cba      	adds	r2, r7, #2
 8002f32:	8812      	ldrh	r2, [r2, #0]
 8002f34:	4013      	ands	r3, r2
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <GPIO_ReadInputDataBit+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:293
  {
    bitstatus = (uint8_t)Bit_SET;
 8002f3c:	1c3b      	adds	r3, r7, #0
 8002f3e:	330f      	adds	r3, #15
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e003      	b.n	8002f4e <GPIO_ReadInputDataBit+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:297
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8002f46:	1c3b      	adds	r3, r7, #0
 8002f48:	330f      	adds	r3, #15
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:299
  }
  return bitstatus;
 8002f4e:	1c3b      	adds	r3, r7, #0
 8002f50:	330f      	adds	r3, #15
 8002f52:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:300
}
 8002f54:	1c18      	adds	r0, r3, #0
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b004      	add	sp, #16
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <GPIO_ReadInputData>:
GPIO_ReadInputData():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:308
  * @brief  Reads the specified input port pin.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval The input port pin value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:312
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8a1b      	ldrh	r3, [r3, #16]
 8002f68:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:313
}
 8002f6a:	1c18      	adds	r0, r3, #0
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)

08002f74 <GPIO_ReadOutputDataBit>:
GPIO_ReadOutputDataBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:324
  * @note   This parameter can be GPIO_Pin_x where x can be:(0..15) for GPIOA, 
  *         GPIOB or GPIOC,(0..2) for GPIOD and(0..3) for GPIOF.
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	1c0a      	adds	r2, r1, #0
 8002f7e:	1cbb      	adds	r3, r7, #2
 8002f80:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:325
  uint8_t bitstatus = 0x00;
 8002f82:	1c3b      	adds	r3, r7, #0
 8002f84:	330f      	adds	r3, #15
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:331

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8a9b      	ldrh	r3, [r3, #20]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	1cba      	adds	r2, r7, #2
 8002f92:	8812      	ldrh	r2, [r2, #0]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <GPIO_ReadOutputDataBit+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:333
  {
    bitstatus = (uint8_t)Bit_SET;
 8002f9c:	1c3b      	adds	r3, r7, #0
 8002f9e:	330f      	adds	r3, #15
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	e003      	b.n	8002fae <GPIO_ReadOutputDataBit+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:337
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8002fa6:	1c3b      	adds	r3, r7, #0
 8002fa8:	330f      	adds	r3, #15
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:339
  }
  return bitstatus;
 8002fae:	1c3b      	adds	r3, r7, #0
 8002fb0:	330f      	adds	r3, #15
 8002fb2:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:340
}
 8002fb4:	1c18      	adds	r0, r3, #0
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b004      	add	sp, #16
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <GPIO_ReadOutputData>:
GPIO_ReadOutputData():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:348
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:352
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8a9b      	ldrh	r3, [r3, #20]
 8002fc8:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:353
}
 8002fca:	1c18      	adds	r0, r3, #0
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)

08002fd4 <GPIO_SetBits>:
GPIO_SetBits():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:364
  * @note   This parameter can be GPIO_Pin_x where x can be:(0..15) for GPIOA, 
  *         GPIOB or GPIOC,(0..2) for GPIOD and(0..3) for GPIOF.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	1c0a      	adds	r2, r1, #0
 8002fde:	1cbb      	adds	r3, r7, #2
 8002fe0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:369
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8002fe2:	1cbb      	adds	r3, r7, #2
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:370
}
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b002      	add	sp, #8
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <GPIO_ResetBits>:
GPIO_ResetBits():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:381
  * @note   This parameter can be GPIO_Pin_x where x can be: (0..15) for GPIOA, 
  *         GPIOB or GPIOC,(0..2) for GPIOD and(0..3) for GPIOF.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	1c0a      	adds	r2, r1, #0
 8002ffa:	1cbb      	adds	r3, r7, #2
 8002ffc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:386
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	1cba      	adds	r2, r7, #2
 8003002:	8812      	ldrh	r2, [r2, #0]
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:387
}
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bd80      	pop	{r7, pc}

0800300c <GPIO_WriteBit>:
GPIO_WriteBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:402
  * @note   The GPIO_Pin parameter can be GPIO_Pin_x where x can be: (0..15) for GPIOA, 
  *         GPIOB or GPIOC,(0..2) for GPIOD and(0..3) for GPIOF.  
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	1cbb      	adds	r3, r7, #2
 8003016:	8019      	strh	r1, [r3, #0]
 8003018:	1c7b      	adds	r3, r7, #1
 800301a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:408
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800301c:	1c7b      	adds	r3, r7, #1
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <GPIO_WriteBit+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:410
  {
    GPIOx->BSRR = GPIO_Pin;
 8003024:	1cbb      	adds	r3, r7, #2
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]
 800302c:	e003      	b.n	8003036 <GPIO_WriteBit+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:414
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	1cba      	adds	r2, r7, #2
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:416
  }
}
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <GPIO_Write>:
GPIO_Write():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:425
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	1c0a      	adds	r2, r1, #0
 8003046:	1cbb      	adds	r3, r7, #2
 8003048:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:429
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1cba      	adds	r2, r7, #2
 800304e:	8812      	ldrh	r2, [r2, #0]
 8003050:	829a      	strh	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:430
}
 8003052:	46bd      	mov	sp, r7
 8003054:	b002      	add	sp, #8
 8003056:	bd80      	pop	{r7, pc}

08003058 <GPIO_PinAFConfig>:
GPIO_PinAFConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:472
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	1cbb      	adds	r3, r7, #2
 8003062:	8019      	strh	r1, [r3, #0]
 8003064:	1c7b      	adds	r3, r7, #1
 8003066:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:473
  uint32_t temp = 0x00;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:474
  uint32_t temp_2 = 0x00;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:481
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8003070:	1c7b      	adds	r3, r7, #1
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	1cbb      	adds	r3, r7, #2
 8003076:	8819      	ldrh	r1, [r3, #0]
 8003078:	2307      	movs	r3, #7
 800307a:	400b      	ands	r3, r1
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	1c11      	adds	r1, r2, #0
 8003080:	4099      	lsls	r1, r3
 8003082:	1c0b      	adds	r3, r1, #0
 8003084:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:482
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8003086:	1cbb      	adds	r3, r7, #2
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	b29b      	uxth	r3, r3
 800308e:	1c1a      	adds	r2, r3, #0
 8003090:	1cbb      	adds	r3, r7, #2
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	b29b      	uxth	r3, r3
 8003098:	1c19      	adds	r1, r3, #0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3108      	adds	r1, #8
 800309e:	0089      	lsls	r1, r1, #2
 80030a0:	58cb      	ldr	r3, [r1, r3]
 80030a2:	1cb9      	adds	r1, r7, #2
 80030a4:	8808      	ldrh	r0, [r1, #0]
 80030a6:	2107      	movs	r1, #7
 80030a8:	4001      	ands	r1, r0
 80030aa:	0089      	lsls	r1, r1, #2
 80030ac:	200f      	movs	r0, #15
 80030ae:	1c04      	adds	r4, r0, #0
 80030b0:	408c      	lsls	r4, r1
 80030b2:	1c21      	adds	r1, r4, #0
 80030b4:	43c9      	mvns	r1, r1
 80030b6:	4019      	ands	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	0092      	lsls	r2, r2, #2
 80030be:	50d1      	str	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:483
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80030c0:	1cbb      	adds	r3, r7, #2
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	1c1a      	adds	r2, r3, #0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	58d2      	ldr	r2, [r2, r3]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:484
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80030d8:	1cbb      	adds	r3, r7, #2
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	b29b      	uxth	r3, r3
 80030e0:	1c1a      	adds	r2, r3, #0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	50d1      	str	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_gpio.c:485
}
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b005      	add	sp, #20
 80030f0:	bd90      	pop	{r4, r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)

080030f4 <I2C_DeInit>:
I2C_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:146
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:150
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4b0f      	ldr	r3, [pc, #60]	; (800313c <I2C_DeInit+0x48>)
 8003100:	429a      	cmp	r2, r3
 8003102:	d10c      	bne.n	800311e <I2C_DeInit+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:153
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	039b      	lsls	r3, r3, #14
 8003108:	1c18      	adds	r0, r3, #0
 800310a:	2101      	movs	r1, #1
 800310c:	f001 fbb6 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:155
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	039b      	lsls	r3, r3, #14
 8003114:	1c18      	adds	r0, r3, #0
 8003116:	2100      	movs	r1, #0
 8003118:	f001 fbb0 	bl	800487c <RCC_APB1PeriphResetCmd>
 800311c:	e00b      	b.n	8003136 <I2C_DeInit+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:160
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	03db      	lsls	r3, r3, #15
 8003122:	1c18      	adds	r0, r3, #0
 8003124:	2101      	movs	r1, #1
 8003126:	f001 fba9 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:162
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	03db      	lsls	r3, r3, #15
 800312e:	1c18      	adds	r0, r3, #0
 8003130:	2100      	movs	r1, #0
 8003132:	f001 fba3 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:164
  }
}
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40005400 	.word	0x40005400

08003140 <I2C_Init>:
I2C_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:175
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:176
  uint32_t tmpreg = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:188
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	1c19      	adds	r1, r3, #0
 8003156:	4391      	bics	r1, r2
 8003158:	1c0a      	adds	r2, r1, #0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:192

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:194
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4b27      	ldr	r3, [pc, #156]	; (8003204 <I2C_Init+0xc4>)
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:198
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	4313      	orrs	r3, r2
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:201

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:207

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <I2C_Init+0xc8>)
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:210

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2201      	movs	r2, #1
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:214

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:216
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:218
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:222
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	699a      	ldr	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:223
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:222
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:225
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:227
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	0212      	lsls	r2, r2, #8
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:232

  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:234
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:238

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:240
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <I2C_Init+0xcc>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:243
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:245
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:246
}
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	00cfe0ff 	.word	0x00cfe0ff
 8003208:	f0ffffff 	.word	0xf0ffffff
 800320c:	07ff7fff 	.word	0x07ff7fff

08003210 <I2C_StructInit>:
I2C_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:254
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:257
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:259
  /* Initialize the I2C_AnalogFilter member */
  I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:261
  /* Initialize the I2C_DigitalFilter member */
  I2C_InitStruct->I2C_DigitalFilter = 0;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:263
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:265
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:267
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	0212      	lsls	r2, r2, #8
 800323c:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:269
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:270
}
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)

0800324c <I2C_Cmd>:
I2C_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:280
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	1c0a      	adds	r2, r1, #0
 8003256:	1cfb      	adds	r3, r7, #3
 8003258:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:284
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800325a:	1cfb      	adds	r3, r7, #3
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d006      	beq.n	8003270 <I2C_Cmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:287
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2201      	movs	r2, #1
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e007      	b.n	8003280 <I2C_Cmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:292
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2201      	movs	r2, #1
 8003276:	1c19      	adds	r1, r3, #0
 8003278:	4391      	bics	r1, r2
 800327a:	1c0a      	adds	r2, r1, #0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:294
  }
}
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)

08003288 <I2C_SoftwareResetCmd>:
I2C_SoftwareResetCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:304
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	1c0a      	adds	r2, r1, #0
 8003292:	1cfb      	adds	r3, r7, #3
 8003294:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:308
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003296:	1cfb      	adds	r3, r7, #3
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <I2C_SoftwareResetCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:311
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	0192      	lsls	r2, r2, #6
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e005      	b.n	80032ba <I2C_SoftwareResetCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:316
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SWRST);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <I2C_SoftwareResetCmd+0x38>)
 80032b4:	401a      	ands	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:318
  }
}
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	ffffdfff 	.word	0xffffdfff

080032c4 <I2C_ITConfig>:
I2C_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:337
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint32_t I2C_IT, FunctionalState NewState)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	1dfb      	adds	r3, r7, #7
 80032d0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:343
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80032d2:	1dfb      	adds	r3, r7, #7
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <I2C_ITConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:346
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e006      	b.n	80032f6 <I2C_ITConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:351
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_IT);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	43d2      	mvns	r2, r2
 80032f0:	401a      	ands	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:353
  }
}
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b004      	add	sp, #16
 80032fa:	bd80      	pop	{r7, pc}

080032fc <I2C_StretchClockCmd>:
I2C_StretchClockCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:363
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	1c0a      	adds	r2, r1, #0
 8003306:	1cfb      	adds	r3, r7, #3
 8003308:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:368
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800330a:	1cfb      	adds	r3, r7, #3
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d006      	beq.n	8003320 <I2C_StretchClockCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:371
  {
    /* Enable clock stretching */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <I2C_StretchClockCmd+0x38>)
 8003318:	401a      	ands	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e006      	b.n	800332e <I2C_StretchClockCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:376
  }
  else
  {
    /* Disable clock stretching  */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	0292      	lsls	r2, r2, #10
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:378
  }
}
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}
 8003334:	fffdffff 	.word	0xfffdffff

08003338 <I2C_StopModeCmd>:
I2C_StopModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:388
  * @param  NewState: new state of the I2Cx stop mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StopModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	1c0a      	adds	r2, r1, #0
 8003342:	1cfb      	adds	r3, r7, #3
 8003344:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:393
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003346:	1cfb      	adds	r3, r7, #3
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <I2C_StopModeCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:396
  {
    /* Enable wakeup from stop mode */
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	02d2      	lsls	r2, r2, #11
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e005      	b.n	800336a <I2C_StopModeCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:401
  }
  else
  {
    /* Disable wakeup from stop mode */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b03      	ldr	r3, [pc, #12]	; (8003370 <I2C_StopModeCmd+0x38>)
 8003364:	401a      	ands	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:403
  }
}
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}
 8003370:	fffbffff 	.word	0xfffbffff

08003374 <I2C_DualAddressCmd>:
I2C_DualAddressCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:413
  * @param  NewState: new state of the I2C own address 2.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	1c0a      	adds	r2, r1, #0
 800337e:	1cfb      	adds	r3, r7, #3
 8003380:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:418
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003382:	1cfb      	adds	r3, r7, #3
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <I2C_DualAddressCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:421
  {
    /* Enable own address 2 */
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	0212      	lsls	r2, r2, #8
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	60da      	str	r2, [r3, #12]
 8003398:	e005      	b.n	80033a6 <I2C_DualAddressCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:426
  }
  else
  {
    /* Disable own address 2 */
    I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	4b03      	ldr	r3, [pc, #12]	; (80033ac <I2C_DualAddressCmd+0x38>)
 80033a0:	401a      	ands	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:428
  }
}    
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	ffff7fff 	.word	0xffff7fff

080033b0 <I2C_OwnAddress2Config>:
I2C_OwnAddress2Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:447
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	1cbb      	adds	r3, r7, #2
 80033ba:	8019      	strh	r1, [r3, #0]
 80033bc:	1c7b      	adds	r3, r7, #1
 80033be:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:448
  uint32_t tmpreg = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:456
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_OWN_ADDRESS2(Address));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(Mask));
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:459

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <I2C_OwnAddress2Config+0x4c>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:462

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80033d2:	1cbb      	adds	r3, r7, #2
 80033d4:	881a      	ldrh	r2, [r3, #0]
 80033d6:	23fe      	movs	r3, #254	; 0xfe
 80033d8:	401a      	ands	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:463
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 80033da:	1c7b      	adds	r3, r7, #1
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	0219      	lsls	r1, r3, #8
 80033e0:	23e0      	movs	r3, #224	; 0xe0
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	400b      	ands	r3, r1
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:462

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80033e6:	4313      	orrs	r3, r2
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:466
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:467
}
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	fffff801 	.word	0xfffff801

08003400 <I2C_GeneralCallCmd>:
I2C_GeneralCallCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:477
  * @param  NewState: new state of the I2C general call mode.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	1c0a      	adds	r2, r1, #0
 800340a:	1cfb      	adds	r3, r7, #3
 800340c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:482
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800340e:	1cfb      	adds	r3, r7, #3
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <I2C_GeneralCallCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:485
  {
    /* Enable general call mode */
    I2Cx->CR1 |= I2C_CR1_GCEN;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	0312      	lsls	r2, r2, #12
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e005      	b.n	8003432 <I2C_GeneralCallCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:490
  }
  else
  {
    /* Disable general call mode */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b03      	ldr	r3, [pc, #12]	; (8003438 <I2C_GeneralCallCmd+0x38>)
 800342c:	401a      	ands	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:492
  }
} 
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	fff7ffff 	.word	0xfff7ffff

0800343c <I2C_SlaveByteControlCmd>:
I2C_SlaveByteControlCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:502
  * @param  NewState: new state of the I2C slave byte control.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void I2C_SlaveByteControlCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	1c0a      	adds	r2, r1, #0
 8003446:	1cfb      	adds	r3, r7, #3
 8003448:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:507
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800344a:	1cfb      	adds	r3, r7, #3
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <I2C_SlaveByteControlCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:510
  {
    /* Enable slave byte control */
    I2Cx->CR1 |= I2C_CR1_SBC;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	0252      	lsls	r2, r2, #9
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e005      	b.n	800346e <I2C_SlaveByteControlCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:515
  }
  else
  {
    /* Disable slave byte control */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b03      	ldr	r3, [pc, #12]	; (8003474 <I2C_SlaveByteControlCmd+0x38>)
 8003468:	401a      	ands	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:517
  }
}
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}
 8003474:	fffeffff 	.word	0xfffeffff

08003478 <I2C_SlaveAddressConfig>:
I2C_SlaveAddressConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:527
  * @param  Address: specifies the slave address to be programmed.
  * @note   This function should be called before generating start condition.
  * @retval None
  */
void I2C_SlaveAddressConfig(I2C_TypeDef* I2Cx, uint16_t Address)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	1c0a      	adds	r2, r1, #0
 8003482:	1cbb      	adds	r3, r7, #2
 8003484:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:528
  uint32_t tmpreg = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:535
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:538

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	0a9b      	lsrs	r3, r3, #10
 8003494:	029b      	lsls	r3, r3, #10
 8003496:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:541

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 8003498:	1cbb      	adds	r3, r7, #2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	059b      	lsls	r3, r3, #22
 800349e:	0d9b      	lsrs	r3, r3, #22
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:544

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:545
}
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b004      	add	sp, #16
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)

080034b4 <I2C_10BitAddressingModeCmd>:
I2C_10BitAddressingModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:556
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function should be called before generating start condition.
  * @retval None
  */
void I2C_10BitAddressingModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	1c0a      	adds	r2, r1, #0
 80034be:	1cfb      	adds	r3, r7, #3
 80034c0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:561
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80034c2:	1cfb      	adds	r3, r7, #3
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <I2C_10BitAddressingModeCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:564
  {
    /* Enable 10-bit addressing mode */
    I2Cx->CR2 |= I2C_CR2_ADD10;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	e005      	b.n	80034e6 <I2C_10BitAddressingModeCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:569
  }
  else
  {
    /* Disable 10-bit addressing mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4b03      	ldr	r3, [pc, #12]	; (80034ec <I2C_10BitAddressingModeCmd+0x38>)
 80034e0:	401a      	ands	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:571
  }
} 
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	fffff7ff 	.word	0xfffff7ff

080034f0 <I2C_AutoEndCmd>:
I2C_AutoEndCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:621
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has effect if Reload mode is disabled.
  * @retval None
  */
void I2C_AutoEndCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	1c0a      	adds	r2, r1, #0
 80034fa:	1cfb      	adds	r3, r7, #3
 80034fc:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:626
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80034fe:	1cfb      	adds	r3, r7, #3
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <I2C_AutoEndCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:629
  {
    /* Enable Auto end mode */
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	0492      	lsls	r2, r2, #18
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	e005      	b.n	8003522 <I2C_AutoEndCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:634
  }
  else
  {
    /* Disable Auto end mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	4b03      	ldr	r3, [pc, #12]	; (8003528 <I2C_AutoEndCmd+0x38>)
 800351c:	401a      	ands	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:636
  }
} 
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}
 8003528:	fdffffff 	.word	0xfdffffff

0800352c <I2C_ReloadCmd>:
I2C_ReloadCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:646
  * @param  NewState: new state of the nbytes reload mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ReloadCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	1c0a      	adds	r2, r1, #0
 8003536:	1cfb      	adds	r3, r7, #3
 8003538:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:651
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800353a:	1cfb      	adds	r3, r7, #3
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <I2C_ReloadCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:654
  {
    /* Enable Auto Reload mode */
    I2Cx->CR2 |= I2C_CR2_RELOAD;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	0452      	lsls	r2, r2, #17
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	e005      	b.n	800355e <I2C_ReloadCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:659
  }
  else
  {
    /* Disable Auto Reload mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4b03      	ldr	r3, [pc, #12]	; (8003564 <I2C_ReloadCmd+0x38>)
 8003558:	401a      	ands	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:661
  }
}
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}
 8003564:	feffffff 	.word	0xfeffffff

08003568 <I2C_NumberOfBytesConfig>:
I2C_NumberOfBytesConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:670
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Number_Bytes: specifies the number of bytes to be programmed.
  * @retval None
  */
void I2C_NumberOfBytesConfig(I2C_TypeDef* I2Cx, uint8_t Number_Bytes)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	1c0a      	adds	r2, r1, #0
 8003572:	1cfb      	adds	r3, r7, #3
 8003574:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:671
  uint32_t tmpreg = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:677

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:680

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <I2C_NumberOfBytesConfig+0x40>)
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:683

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 8003588:	1cfb      	adds	r3, r7, #3
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	041a      	lsls	r2, r3, #16
 800358e:	23ff      	movs	r3, #255	; 0xff
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	4013      	ands	r3, r2
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:686

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:687
}  
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b004      	add	sp, #16
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	ff00ffff 	.word	0xff00ffff

080035ac <I2C_MasterRequestConfig>:
I2C_MasterRequestConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:699
  *            @arg I2C_Direction_Transmitter: Master request a write transfer
  *            @arg I2C_Direction_Receiver: Master request a read transfer  
  * @retval None
  */
void I2C_MasterRequestConfig(I2C_TypeDef* I2Cx, uint16_t I2C_Direction)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	1c0a      	adds	r2, r1, #0
 80035b6:	1cbb      	adds	r3, r7, #2
 80035b8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:705
/* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
 80035ba:	1cbb      	adds	r3, r7, #2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <I2C_MasterRequestConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:708
  {
    /* Request a write Transfer */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <I2C_MasterRequestConfig+0x38>)
 80035c8:	401a      	ands	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	e006      	b.n	80035de <I2C_MasterRequestConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:713
  }
  else
  {
    /* Request a read Transfer */
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2280      	movs	r2, #128	; 0x80
 80035d6:	00d2      	lsls	r2, r2, #3
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:715
  }
}  
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	fffffbff 	.word	0xfffffbff

080035e8 <I2C_GenerateSTART>:
I2C_GenerateSTART():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:725
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	1c0a      	adds	r2, r1, #0
 80035f2:	1cfb      	adds	r3, r7, #3
 80035f4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:730
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80035f6:	1cfb      	adds	r3, r7, #3
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <I2C_GenerateSTART+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:733
  {
    /* Generate a START condition */
    I2Cx->CR2 |= I2C_CR2_START;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2280      	movs	r2, #128	; 0x80
 8003604:	0192      	lsls	r2, r2, #6
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	e005      	b.n	800361a <I2C_GenerateSTART+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:738
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4b03      	ldr	r3, [pc, #12]	; (8003620 <I2C_GenerateSTART+0x38>)
 8003614:	401a      	ands	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:740
  }
}  
 800361a:	46bd      	mov	sp, r7
 800361c:	b002      	add	sp, #8
 800361e:	bd80      	pop	{r7, pc}
 8003620:	ffffdfff 	.word	0xffffdfff

08003624 <I2C_GenerateSTOP>:
I2C_GenerateSTOP():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:750
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	1c0a      	adds	r2, r1, #0
 800362e:	1cfb      	adds	r3, r7, #3
 8003630:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:755
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003632:	1cfb      	adds	r3, r7, #3
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d007      	beq.n	800364a <I2C_GenerateSTOP+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:758
  {
    /* Generate a STOP condition */
    I2Cx->CR2 |= I2C_CR2_STOP;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	01d2      	lsls	r2, r2, #7
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	e005      	b.n	8003656 <I2C_GenerateSTOP+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:763
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4b03      	ldr	r3, [pc, #12]	; (800365c <I2C_GenerateSTOP+0x38>)
 8003650:	401a      	ands	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:765
  }
}  
 8003656:	46bd      	mov	sp, r7
 8003658:	b002      	add	sp, #8
 800365a:	bd80      	pop	{r7, pc}
 800365c:	ffffbfff 	.word	0xffffbfff

08003660 <I2C_10BitAddressHeaderCmd>:
I2C_10BitAddressHeaderCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:777
  * @note   This mode can be used only when switching from master transmitter mode 
  *         to master receiver mode.
  * @retval None
  */
void I2C_10BitAddressHeaderCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	1c0a      	adds	r2, r1, #0
 800366a:	1cfb      	adds	r3, r7, #3
 800366c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:782
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800366e:	1cfb      	adds	r3, r7, #3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <I2C_10BitAddressHeaderCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:785
  {
    /* Enable 10-bit header only mode */
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	0152      	lsls	r2, r2, #5
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	e005      	b.n	8003692 <I2C_10BitAddressHeaderCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:790
  }
  else
  {
    /* Disable 10-bit header only mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4b03      	ldr	r3, [pc, #12]	; (8003698 <I2C_10BitAddressHeaderCmd+0x38>)
 800368c:	401a      	ands	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:792
  }
}    
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}
 8003698:	ffffefff 	.word	0xffffefff

0800369c <I2C_AcknowledgeConfig>:
I2C_AcknowledgeConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:802
  * @param  NewState: new state of the Acknowledge.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	1c0a      	adds	r2, r1, #0
 80036a6:	1cfb      	adds	r3, r7, #3
 80036a8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:807
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80036aa:	1cfb      	adds	r3, r7, #3
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <I2C_AcknowledgeConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:810
  {
    /* Enable ACK generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <I2C_AcknowledgeConfig+0x38>)
 80036b8:	401a      	ands	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	e006      	b.n	80036ce <I2C_AcknowledgeConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:815
  }
  else
  {
    /* Enable NACK generation */
    I2Cx->CR2 |= I2C_CR2_NACK;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	0212      	lsls	r2, r2, #8
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:817
  }
}
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	ffff7fff 	.word	0xffff7fff

080036d8 <I2C_GetAddressMatched>:
I2C_GetAddressMatched():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:825
  * @brief  Returns the I2C slave matched address .
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the slave matched address .
  */
uint8_t I2C_GetAddressMatched(I2C_TypeDef* I2Cx)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:830
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	23fe      	movs	r3, #254	; 0xfe
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	4013      	ands	r3, r2
 80036ea:	0c1b      	lsrs	r3, r3, #16
 80036ec:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:831
}
 80036ee:	1c18      	adds	r0, r3, #0
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)

080036f8 <I2C_GetTransferDirection>:
I2C_GetTransferDirection():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:839
  * @brief  Returns the I2C slave received request.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received request.
  */
uint16_t I2C_GetTransferDirection(I2C_TypeDef* I2Cx)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:840
  uint32_t tmpreg = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:841
  uint16_t direction = 0;
 8003704:	1c3b      	adds	r3, r7, #0
 8003706:	330e      	adds	r3, #14
 8003708:	2200      	movs	r2, #0
 800370a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:847
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	025b      	lsls	r3, r3, #9
 8003714:	4013      	ands	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:850
  
  /* If write transfer is requested */
  if (tmpreg == 0)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <I2C_GetTransferDirection+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:853
  {
    /* write transfer is requested */
    direction = I2C_Direction_Transmitter;
 800371e:	1c3b      	adds	r3, r7, #0
 8003720:	330e      	adds	r3, #14
 8003722:	2200      	movs	r2, #0
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	e004      	b.n	8003732 <I2C_GetTransferDirection+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:858
  }
  else
  {
    /* Read transfer is requested */
    direction = I2C_Direction_Receiver;
 8003728:	1c3b      	adds	r3, r7, #0
 800372a:	330e      	adds	r3, #14
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	00d2      	lsls	r2, r2, #3
 8003730:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:860
  }  
  return direction;
 8003732:	1c3b      	adds	r3, r7, #0
 8003734:	330e      	adds	r3, #14
 8003736:	881b      	ldrh	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:861
}
 8003738:	1c18      	adds	r0, r3, #0
 800373a:	46bd      	mov	sp, r7
 800373c:	b004      	add	sp, #16
 800373e:	bd80      	pop	{r7, pc}

08003740 <I2C_TransferHandling>:
I2C_TransferHandling():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:883
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	1c3b      	adds	r3, r7, #0
 800374c:	330a      	adds	r3, #10
 800374e:	8019      	strh	r1, [r3, #0]
 8003750:	1c3b      	adds	r3, r7, #0
 8003752:	3309      	adds	r3, #9
 8003754:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:884
  uint32_t tmpreg = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:893
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:896
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <I2C_TransferHandling+0x5c>)
 8003764:	4013      	ands	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:899
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8003768:	1c3b      	adds	r3, r7, #0
 800376a:	330a      	adds	r3, #10
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	059b      	lsls	r3, r3, #22
 8003770:	0d9a      	lsrs	r2, r3, #22
 8003772:	1c3b      	adds	r3, r7, #0
 8003774:	3309      	adds	r3, #9
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	0419      	lsls	r1, r3, #16
 800377a:	23ff      	movs	r3, #255	; 0xff
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	400b      	ands	r3, r1
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	431a      	orrs	r2, r3
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	4313      	orrs	r3, r2
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:903
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:904
}
 8003796:	46bd      	mov	sp, r7
 8003798:	b006      	add	sp, #24
 800379a:	bd80      	pop	{r7, pc}
 800379c:	fc009800 	.word	0xfc009800

080037a0 <I2C_SMBusAlertCmd>:
I2C_SMBusAlertCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:954
  * @param  NewState: new state of the I2Cx SMBus alert.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SMBusAlertCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	1c0a      	adds	r2, r1, #0
 80037aa:	1cfb      	adds	r3, r7, #3
 80037ac:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:959
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80037ae:	1cfb      	adds	r3, r7, #3
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <I2C_SMBusAlertCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:962
  {
    /* Enable SMBus alert */
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	03d2      	lsls	r2, r2, #15
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e005      	b.n	80037d2 <I2C_SMBusAlertCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:967
  }
  else
  {
    /* Disable SMBus alert */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <I2C_SMBusAlertCmd+0x38>)
 80037cc:	401a      	ands	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:969
  }
}
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	ffbfffff 	.word	0xffbfffff

080037dc <I2C_ClockTimeoutCmd>:
I2C_ClockTimeoutCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:979
  * @param  NewState: new state of the I2Cx clock Timeout.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	1c0a      	adds	r2, r1, #0
 80037e6:	1cfb      	adds	r3, r7, #3
 80037e8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:984
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80037ea:	1cfb      	adds	r3, r7, #3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <I2C_ClockTimeoutCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:987
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	0212      	lsls	r2, r2, #8
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	615a      	str	r2, [r3, #20]
 8003800:	e005      	b.n	800380e <I2C_ClockTimeoutCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:992
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	4b03      	ldr	r3, [pc, #12]	; (8003814 <I2C_ClockTimeoutCmd+0x38>)
 8003808:	401a      	ands	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:994
  }
}
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}
 8003814:	ffff7fff 	.word	0xffff7fff

08003818 <I2C_ExtendedClockTimeoutCmd>:
I2C_ExtendedClockTimeoutCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1004
  * @param  NewState: new state of the I2Cx Extended clock Timeout.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ExtendedClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	1c0a      	adds	r2, r1, #0
 8003822:	1cfb      	adds	r3, r7, #3
 8003824:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1009
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003826:	1cfb      	adds	r3, r7, #3
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <I2C_ExtendedClockTimeoutCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1012
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	0612      	lsls	r2, r2, #24
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	615a      	str	r2, [r3, #20]
 800383c:	e005      	b.n	800384a <I2C_ExtendedClockTimeoutCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1017
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	085a      	lsrs	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1019
  }
}
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}

08003850 <I2C_IdleClockTimeoutCmd>:
I2C_IdleClockTimeoutCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1030
  * @param  NewState: new state of the I2Cx Idle clock Timeout.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_IdleClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	1c0a      	adds	r2, r1, #0
 800385a:	1cfb      	adds	r3, r7, #3
 800385c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1035
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800385e:	1cfb      	adds	r3, r7, #3
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <I2C_IdleClockTimeoutCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1038
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	0152      	lsls	r2, r2, #5
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	615a      	str	r2, [r3, #20]
 8003874:	e005      	b.n	8003882 <I2C_IdleClockTimeoutCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1043
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	4b03      	ldr	r3, [pc, #12]	; (8003888 <I2C_IdleClockTimeoutCmd+0x38>)
 800387c:	401a      	ands	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1045
  }
}
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}
 8003888:	ffffefff 	.word	0xffffefff

0800388c <I2C_TimeoutAConfig>:
I2C_TimeoutAConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1055
  * @param  I2Cx: where x can be 1 to select the I2C peripheral.
  * @param  Timeout: specifies the TimeoutA to be programmed. 
  * @retval None
  */
void I2C_TimeoutAConfig(I2C_TypeDef* I2Cx, uint16_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	1c0a      	adds	r2, r1, #0
 8003896:	1cbb      	adds	r3, r7, #2
 8003898:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1056
  uint32_t tmpreg = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1063
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1066

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	0b1b      	lsrs	r3, r3, #12
 80038a8:	031b      	lsls	r3, r3, #12
 80038aa:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1069

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 80038ac:	1cbb      	adds	r3, r7, #2
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	051b      	lsls	r3, r3, #20
 80038b2:	0d1b      	lsrs	r3, r3, #20
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1072

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1073
}
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b004      	add	sp, #16
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)

080038c8 <I2C_TimeoutBConfig>:
I2C_TimeoutBConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1082
  * @param  I2Cx: where x can be 1 to select the I2C peripheral.
  * @param  Timeout: specifies the TimeoutB to be programmed. 
  * @retval None
  */
void I2C_TimeoutBConfig(I2C_TypeDef* I2Cx, uint16_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	1c0a      	adds	r2, r1, #0
 80038d2:	1cbb      	adds	r3, r7, #2
 80038d4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1083
  uint32_t tmpreg = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1090
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1093

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <I2C_TimeoutBConfig+0x3c>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1096

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 80038e8:	1cbb      	adds	r3, r7, #2
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	041a      	lsls	r2, r3, #16
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <I2C_TimeoutBConfig+0x40>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1099

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1100
}
 80038fe:	46bd      	mov	sp, r7
 8003900:	b004      	add	sp, #16
 8003902:	bd80      	pop	{r7, pc}
 8003904:	f000ffff 	.word	0xf000ffff
 8003908:	0fff0000 	.word	0x0fff0000

0800390c <I2C_CalculatePEC>:
I2C_CalculatePEC():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1110
  * @param  NewState: new state of the I2Cx PEC calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	1c0a      	adds	r2, r1, #0
 8003916:	1cfb      	adds	r3, r7, #3
 8003918:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1115
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800391a:	1cfb      	adds	r3, r7, #3
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <I2C_CalculatePEC+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1118
  {
    /* Enable PEC calculation */
    I2Cx->CR1 |= I2C_CR1_PECEN;   
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	0412      	lsls	r2, r2, #16
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e005      	b.n	800393e <I2C_CalculatePEC+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1123
  }
  else
  {
    /* Disable PEC calculation */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b03      	ldr	r3, [pc, #12]	; (8003944 <I2C_CalculatePEC+0x38>)
 8003938:	401a      	ands	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1125
  }
}
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}
 8003944:	ff7fffff 	.word	0xff7fffff

08003948 <I2C_PECRequestCmd>:
I2C_PECRequestCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1135
  * @param  NewState: new state of the I2Cx PEC request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_PECRequestCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	1c0a      	adds	r2, r1, #0
 8003952:	1cfb      	adds	r3, r7, #3
 8003954:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1140
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003956:	1cfb      	adds	r3, r7, #3
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <I2C_PECRequestCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1143
  {
    /* Enable PEC transmission/reception request */
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2280      	movs	r2, #128	; 0x80
 8003964:	04d2      	lsls	r2, r2, #19
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e005      	b.n	800397a <I2C_PECRequestCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1148
  }
  else
  {
    /* Disable PEC transmission/reception request */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b03      	ldr	r3, [pc, #12]	; (8003980 <I2C_PECRequestCmd+0x38>)
 8003974:	401a      	ands	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1150
  }
}
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}
 8003980:	fbffffff 	.word	0xfbffffff

08003984 <I2C_GetPEC>:
I2C_GetPEC():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1158
  * @brief  Returns the I2C PEC.
  * @param  I2Cx: where x can be 1 to select the I2C peripheral.
  * @retval The value of the PEC .
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1163
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1164
}
 8003992:	1c18      	adds	r0, r3, #0
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			; (mov r8, r8)

0800399c <I2C_ReadRegister>:
I2C_ReadRegister():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1204
  *            @arg I2C_Register_RXDR: RXDR register.
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	1c0a      	adds	r2, r1, #0
 80039a6:	1cfb      	adds	r3, r7, #3
 80039a8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1205
  __IO uint32_t tmp = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1211

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t)I2Cx;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1212
  tmp += I2C_Register;
 80039b2:	1cfb      	adds	r3, r7, #3
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	18d3      	adds	r3, r2, r3
 80039ba:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1215

  /* Return the selected register value */
  return (*(__IO uint32_t *) tmp);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1216
}
 80039c0:	1c18      	adds	r0, r3, #0
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C_SendData>:
I2C_SendData():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1247
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	1c0a      	adds	r2, r1, #0
 80039d2:	1cfb      	adds	r3, r7, #3
 80039d4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1252
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 80039d6:	1cfb      	adds	r3, r7, #3
 80039d8:	781a      	ldrb	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1253
}
 80039de:	46bd      	mov	sp, r7
 80039e0:	b002      	add	sp, #8
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_ReceiveData>:
I2C_ReceiveData():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1261
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1266
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1267
}  
 80039f2:	1c18      	adds	r0, r3, #0
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b002      	add	sp, #8
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)

080039fc <I2C_DMACmd>:
I2C_DMACmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1304
  * @param  NewState: new state of the selected I2C DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, uint32_t I2C_DMAReq, FunctionalState NewState)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1310
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <I2C_DMACmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1313
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e006      	b.n	8003a2e <I2C_DMACmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1318
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	43d2      	mvns	r2, r2
 8003a28:	401a      	ands	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1320
  }
}
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b004      	add	sp, #16
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_GetFlagStatus>:
I2C_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1424
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  *            @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1425
  uint32_t tmpreg = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1426
  FlagStatus bitstatus = RESET;
 8003a42:	1c3b      	adds	r3, r7, #0
 8003a44:	330f      	adds	r3, #15
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1433
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1436
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	4013      	ands	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1438
  
  if(tmpreg != 0)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <I2C_GetFlagStatus+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1441
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8003a5e:	1c3b      	adds	r3, r7, #0
 8003a60:	330f      	adds	r3, #15
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e003      	b.n	8003a70 <I2C_GetFlagStatus+0x3c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1446
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8003a68:	1c3b      	adds	r3, r7, #0
 8003a6a:	330f      	adds	r3, #15
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1448
  }
  return bitstatus;
 8003a70:	1c3b      	adds	r3, r7, #0
 8003a72:	330f      	adds	r3, #15
 8003a74:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1449
} 
 8003a76:	1c18      	adds	r0, r3, #0
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)

08003a80 <I2C_ClearFlag>:
I2C_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1468
  *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1474
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	61da      	str	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1475
  }
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b002      	add	sp, #8
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)

08003a98 <I2C_GetITStatus>:
I2C_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1498
  *            @arg I2C_IT_TIMEOUT: Timeout or Tlow detection flag
  *            @arg I2C_IT_ALERT: SMBus Alert
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1499
  uint32_t tmpreg = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1500
  ITStatus bitstatus = RESET;
 8003aa6:	1c3b      	adds	r3, r7, #0
 8003aa8:	3317      	adds	r3, #23
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1501
  uint32_t enablestatus = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1509
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  /* If Error interrupt */
  if((I2C_IT & ERROR_IT_MASK) != 0)
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	23fc      	movs	r3, #252	; 0xfc
 8003ab6:	019b      	lsls	r3, r3, #6
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d005      	beq.n	8003ac8 <I2C_GetITStatus+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1511
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	e00e      	b.n	8003ae6 <I2C_GetITStatus+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1514
  }
  /* If TC interrupt */
  else if((I2C_IT & TC_IT_MASK) != 0)
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	23c0      	movs	r3, #192	; 0xc0
 8003acc:	4013      	ands	r3, r2
 8003ace:	d005      	beq.n	8003adc <I2C_GetITStatus+0x44>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1516
  {
    enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2340      	movs	r3, #64	; 0x40
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e004      	b.n	8003ae6 <I2C_GetITStatus+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1520
  }
  else
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1524
  }
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1527

  /* Get flag status */
  tmpreg &= I2C_IT;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	4013      	ands	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1530

  /* Check the status of the specified I2C flag */
  if((tmpreg != RESET) && enablestatus)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <I2C_GetITStatus+0x72>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1530 (discriminator 1)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <I2C_GetITStatus+0x72>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1533
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8003b00:	1c3b      	adds	r3, r7, #0
 8003b02:	3317      	adds	r3, #23
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	e003      	b.n	8003b12 <I2C_GetITStatus+0x7a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1538
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8003b0a:	1c3b      	adds	r3, r7, #0
 8003b0c:	3317      	adds	r3, #23
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1542
  }

  /* Return the I2C_IT status */
  return bitstatus;
 8003b12:	1c3b      	adds	r3, r7, #0
 8003b14:	3317      	adds	r3, #23
 8003b16:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1543
}
 8003b18:	1c18      	adds	r0, r3, #0
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b006      	add	sp, #24
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_ClearITPendingBit>:
I2C_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1562
  *            @arg I2C_IT_TIMEOUT: Timeout or Tlow detection flag
  *            @arg I2C_IT_ALERT: SMBus Alert
  * @retval The new state of I2C_IT (SET or RESET).
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1568
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_IT;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	61da      	str	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c:1569
}
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b002      	add	sp, #8
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)

08003b38 <IWDG_WriteAccessCmd>:
IWDG_WriteAccessCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:146
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	1c02      	adds	r2, r0, #0
 8003b40:	1dbb      	adds	r3, r7, #6
 8003b42:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:149
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <IWDG_WriteAccessCmd+0x1c>)
 8003b46:	1dba      	adds	r2, r7, #6
 8003b48:	8812      	ldrh	r2, [r2, #0]
 8003b4a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:150
}
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	40003000 	.word	0x40003000

08003b58 <IWDG_SetPrescaler>:
IWDG_SetPrescaler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:166
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	1c02      	adds	r2, r0, #0
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:169
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <IWDG_SetPrescaler+0x1c>)
 8003b66:	1dfa      	adds	r2, r7, #7
 8003b68:	7812      	ldrb	r2, [r2, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:170
}
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b002      	add	sp, #8
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	40003000 	.word	0x40003000

08003b78 <IWDG_SetReload>:
IWDG_SetReload():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:179
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	1c02      	adds	r2, r0, #0
 8003b80:	1dbb      	adds	r3, r7, #6
 8003b82:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:182
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <IWDG_SetReload+0x1c>)
 8003b86:	1dba      	adds	r2, r7, #6
 8003b88:	8812      	ldrh	r2, [r2, #0]
 8003b8a:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:183
}
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	40003000 	.word	0x40003000

08003b98 <IWDG_ReloadCounter>:
IWDG_ReloadCounter():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:192
  *   (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:193
  IWDG->KR = KR_KEY_RELOAD;
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <IWDG_ReloadCounter+0x10>)
 8003b9e:	4a03      	ldr	r2, [pc, #12]	; (8003bac <IWDG_ReloadCounter+0x14>)
 8003ba0:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:194
}
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	40003000 	.word	0x40003000
 8003bac:	0000aaaa 	.word	0x0000aaaa

08003bb0 <IWDG_SetWindowValue>:
IWDG_SetWindowValue():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:203
  * @brief  Sets the IWDG window value.
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  * @retval None
  */
void IWDG_SetWindowValue(uint16_t WindowValue)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	1c02      	adds	r2, r0, #0
 8003bb8:	1dbb      	adds	r3, r7, #6
 8003bba:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:206
  /* Check the parameters */
  assert_param(IS_IWDG_WINDOW_VALUE(WindowValue));
  IWDG->WINR = WindowValue;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <IWDG_SetWindowValue+0x1c>)
 8003bbe:	1dba      	adds	r2, r7, #6
 8003bc0:	8812      	ldrh	r2, [r2, #0]
 8003bc2:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:207
}
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	40003000 	.word	0x40003000

08003bd0 <IWDG_Enable>:
IWDG_Enable():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:231
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:232
  IWDG->KR = KR_KEY_ENABLE;
 8003bd4:	4b02      	ldr	r3, [pc, #8]	; (8003be0 <IWDG_Enable+0x10>)
 8003bd6:	4a03      	ldr	r2, [pc, #12]	; (8003be4 <IWDG_Enable+0x14>)
 8003bd8:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:233
}
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	40003000 	.word	0x40003000
 8003be4:	0000cccc 	.word	0x0000cccc

08003be8 <IWDG_GetFlagStatus>:
IWDG_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:261
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  *            @arg IWDG_FLAG_WVU: Counter Window Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	1c02      	adds	r2, r0, #0
 8003bf0:	1dbb      	adds	r3, r7, #6
 8003bf2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:262
  FlagStatus bitstatus = RESET;
 8003bf4:	1c3b      	adds	r3, r7, #0
 8003bf6:	330f      	adds	r3, #15
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:265
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <IWDG_GetFlagStatus+0x40>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	1dba      	adds	r2, r7, #6
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	4013      	ands	r3, r2
 8003c06:	d004      	beq.n	8003c12 <IWDG_GetFlagStatus+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:267
  {
    bitstatus = SET;
 8003c08:	1c3b      	adds	r3, r7, #0
 8003c0a:	330f      	adds	r3, #15
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	e003      	b.n	8003c1a <IWDG_GetFlagStatus+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:271
  }
  else
  {
    bitstatus = RESET;
 8003c12:	1c3b      	adds	r3, r7, #0
 8003c14:	330f      	adds	r3, #15
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:274
  }
  /* Return the flag status */
  return bitstatus;
 8003c1a:	1c3b      	adds	r3, r7, #0
 8003c1c:	330f      	adds	r3, #15
 8003c1e:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c:275
}
 8003c20:	1c18      	adds	r0, r3, #0
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b004      	add	sp, #16
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40003000 	.word	0x40003000

08003c2c <NVIC_Init>:
NVIC_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:80
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:81
  uint32_t tmppriority = 0x00;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:87
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	789b      	ldrb	r3, [r3, #2]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d03c      	beq.n	8003cba <NVIC_Init+0x8e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:90
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <NVIC_Init+0xa8>)
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	0892      	lsrs	r2, r2, #2
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	32c0      	adds	r2, #192	; 0xc0
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	58d3      	ldr	r3, [r2, r3]
 8003c50:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:91
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	1c1a      	adds	r2, r3, #0
 8003c58:	2303      	movs	r3, #3
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	22ff      	movs	r2, #255	; 0xff
 8003c60:	1c10      	adds	r0, r2, #0
 8003c62:	4098      	lsls	r0, r3
 8003c64:	1c03      	adds	r3, r0, #0
 8003c66:	43da      	mvns	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:92
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	785b      	ldrb	r3, [r3, #1]
 8003c72:	019a      	lsls	r2, r3, #6
 8003c74:	23ff      	movs	r3, #255	; 0xff
 8003c76:	401a      	ands	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	1c19      	adds	r1, r3, #0
 8003c7e:	2303      	movs	r3, #3
 8003c80:	400b      	ands	r3, r1
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	1c11      	adds	r1, r2, #0
 8003c86:	4099      	lsls	r1, r3
 8003c88:	1c0b      	adds	r3, r1, #0
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:94
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8003c90:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <NVIC_Init+0xa8>)
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	0892      	lsrs	r2, r2, #2
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	32c0      	adds	r2, #192	; 0xc0
 8003c9c:	0092      	lsls	r2, r2, #2
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	50d1      	str	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:97
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <NVIC_Init+0xa8>)
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	7812      	ldrb	r2, [r2, #0]
 8003ca8:	1c11      	adds	r1, r2, #0
 8003caa:	221f      	movs	r2, #31
 8003cac:	400a      	ands	r2, r1
 8003cae:	2101      	movs	r1, #1
 8003cb0:	1c08      	adds	r0, r1, #0
 8003cb2:	4090      	lsls	r0, r2
 8003cb4:	1c02      	adds	r2, r0, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e009      	b.n	8003cce <NVIC_Init+0xa2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:102
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003cba:	4a06      	ldr	r2, [pc, #24]	; (8003cd4 <NVIC_Init+0xa8>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	1c19      	adds	r1, r3, #0
 8003cc2:	231f      	movs	r3, #31
 8003cc4:	400b      	ands	r3, r1
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4099      	lsls	r1, r3
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	50d1      	str	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:104
  }
}
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b004      	add	sp, #16
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	e000e100 	.word	0xe000e100

08003cd8 <NVIC_SystemLPConfig>:
NVIC_SystemLPConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:118
  * @param  NewState: new state of LP condition. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	1c0a      	adds	r2, r1, #0
 8003ce0:	1dfb      	adds	r3, r7, #7
 8003ce2:	1c01      	adds	r1, r0, #0
 8003ce4:	7019      	strb	r1, [r3, #0]
 8003ce6:	1dbb      	adds	r3, r7, #6
 8003ce8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:124
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8003cea:	1dbb      	adds	r3, r7, #6
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <NVIC_SystemLPConfig+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:126
  {
    SCB->SCR |= LowPowerMode;
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <NVIC_SystemLPConfig+0x40>)
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <NVIC_SystemLPConfig+0x40>)
 8003cf6:	6911      	ldr	r1, [r2, #16]
 8003cf8:	1dfa      	adds	r2, r7, #7
 8003cfa:	7812      	ldrb	r2, [r2, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	611a      	str	r2, [r3, #16]
 8003d00:	e007      	b.n	8003d12 <NVIC_SystemLPConfig+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:130
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <NVIC_SystemLPConfig+0x40>)
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <NVIC_SystemLPConfig+0x40>)
 8003d06:	6912      	ldr	r2, [r2, #16]
 8003d08:	1df9      	adds	r1, r7, #7
 8003d0a:	7809      	ldrb	r1, [r1, #0]
 8003d0c:	43c9      	mvns	r1, r1
 8003d0e:	400a      	ands	r2, r1
 8003d10:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:132
  }
}
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <SysTick_CLKSourceConfig>:
SysTick_CLKSourceConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:143
  *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:147
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d106      	bne.n	8003d38 <SysTick_CLKSourceConfig+0x1c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:149
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003d2a:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <SysTick_CLKSourceConfig+0x30>)
 8003d2c:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <SysTick_CLKSourceConfig+0x30>)
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	2104      	movs	r1, #4
 8003d32:	430a      	orrs	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e005      	b.n	8003d44 <SysTick_CLKSourceConfig+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:153
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <SysTick_CLKSourceConfig+0x30>)
 8003d3a:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <SysTick_CLKSourceConfig+0x30>)
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	2104      	movs	r1, #4
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_misc.c:155
  }
}
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	e000e010 	.word	0xe000e010

08003d50 <PWR_DeInit>:
PWR_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:88
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:89
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	055b      	lsls	r3, r3, #21
 8003d58:	1c18      	adds	r0, r3, #0
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	f000 fd8e 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:90
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	055b      	lsls	r3, r3, #21
 8003d64:	1c18      	adds	r0, r3, #0
 8003d66:	2100      	movs	r1, #0
 8003d68:	f000 fd88 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:91
}
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <PWR_BackupAccessCmd>:
PWR_BackupAccessCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:102
  * @param  NewState: new state of the access to the Backup domain registers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	1c02      	adds	r2, r0, #0
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:106
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003d7c:	1dfb      	adds	r3, r7, #7
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <PWR_BackupAccessCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:109
  {
    /* Enable the Backup Domain Access */
    PWR->CR |= PWR_CR_DBP;
 8003d84:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <PWR_BackupAccessCmd+0x38>)
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <PWR_BackupAccessCmd+0x38>)
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	0049      	lsls	r1, r1, #1
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e005      	b.n	8003da0 <PWR_BackupAccessCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:114
  }
  else
  {
    /* Disable the Backup Domain Access */
    PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_DBP);
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <PWR_BackupAccessCmd+0x38>)
 8003d96:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <PWR_BackupAccessCmd+0x38>)
 8003d98:	6811      	ldr	r1, [r2, #0]
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <PWR_BackupAccessCmd+0x3c>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:116
  } 
}
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b002      	add	sp, #8
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	40007000 	.word	0x40007000
 8003dac:	fffffeff 	.word	0xfffffeff

08003db0 <PWR_PVDLevelConfig>:
PWR_PVDLevelConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:159
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:160
  uint32_t tmpreg = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:165
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <PWR_PVDLevelConfig+0x30>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:168
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	22e0      	movs	r2, #224	; 0xe0
 8003dc6:	4393      	bics	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:171
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:174
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8003dd2:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <PWR_PVDLevelConfig+0x30>)
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:175
}
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	40007000 	.word	0x40007000

08003de4 <PWR_PVDCmd>:
PWR_PVDCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:184
  * @param  NewState: new state of the PVD.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	1c02      	adds	r2, r0, #0
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:188
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003df0:	1dfb      	adds	r3, r7, #7
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d006      	beq.n	8003e06 <PWR_PVDCmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:191
  {
    /* Enable the PVD */
    PWR->CR |= PWR_CR_PVDE;
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <PWR_PVDCmd+0x34>)
 8003dfa:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <PWR_PVDCmd+0x34>)
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	2110      	movs	r1, #16
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e005      	b.n	8003e12 <PWR_PVDCmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:196
  }
  else
  {
    /* Disable the PVD */
    PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_PVDE);
 8003e06:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <PWR_PVDCmd+0x34>)
 8003e08:	4a03      	ldr	r2, [pc, #12]	; (8003e18 <PWR_PVDCmd+0x34>)
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	2110      	movs	r1, #16
 8003e0e:	438a      	bics	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:198
  } 
}
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40007000 	.word	0x40007000

08003e1c <PWR_WakeUpPinCmd>:
PWR_WakeUpPinCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:229
  * @param  NewState: new state of the WakeUp Pin functionality.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	1c0a      	adds	r2, r1, #0
 8003e26:	1cfb      	adds	r3, r7, #3
 8003e28:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:234
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(PWR_WakeUpPin));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e2a:	1cfb      	adds	r3, r7, #3
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d006      	beq.n	8003e40 <PWR_WakeUpPinCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:237
  {
    /* Enable the EWUPx pin */
    PWR->CSR |= PWR_WakeUpPin;
 8003e32:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <PWR_WakeUpPinCmd+0x38>)
 8003e34:	4a07      	ldr	r2, [pc, #28]	; (8003e54 <PWR_WakeUpPinCmd+0x38>)
 8003e36:	6851      	ldr	r1, [r2, #4]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	e006      	b.n	8003e4e <PWR_WakeUpPinCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:242
  }
  else
  {
    /* Disable the EWUPx pin */
    PWR->CSR &= ~PWR_WakeUpPin;
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <PWR_WakeUpPinCmd+0x38>)
 8003e42:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <PWR_WakeUpPinCmd+0x38>)
 8003e44:	6852      	ldr	r2, [r2, #4]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	43c9      	mvns	r1, r1
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:244
  }
}
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b002      	add	sp, #8
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40007000 	.word	0x40007000

08003e58 <PWR_EnterSleepMode>:
PWR_EnterSleepMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:362
  *             @arg PWR_SLEEPEntry_WFI: enter SLEEP mode with WFI instruction
  *             @arg PWR_SLEEPEntry_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSleepMode(uint8_t PWR_SLEEPEntry)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	1c02      	adds	r2, r0, #0
 8003e60:	1dfb      	adds	r3, r7, #7
 8003e62:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:367
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(PWR_SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex-M0 System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <PWR_EnterSleepMode+0x2c>)
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <PWR_EnterSleepMode+0x2c>)
 8003e68:	6912      	ldr	r2, [r2, #16]
 8003e6a:	2104      	movs	r1, #4
 8003e6c:	438a      	bics	r2, r1
 8003e6e:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:370
  
  /* Select SLEEP mode entry -------------------------------------------------*/
  if(PWR_SLEEPEntry == PWR_SLEEPEntry_WFI)
 8003e70:	1dfb      	adds	r3, r7, #7
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <PWR_EnterSleepMode+0x24>
__WFI():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cmInstr.h:282
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003e78:	bf30      	wfi
 8003e7a:	e000      	b.n	8003e7e <PWR_EnterSleepMode+0x26>
__WFE():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cmInstr.h:293
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8003e7c:	bf20      	wfe
PWR_EnterSleepMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:380
  else
  {
    /* Request Wait For Event */
    __WFE();
  }
}
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b002      	add	sp, #8
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <PWR_EnterSTOPMode>:
PWR_EnterSTOPMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:402
  *             @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *             @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	1c0a      	adds	r2, r1, #0
 8003e92:	1cfb      	adds	r3, r7, #3
 8003e94:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:403
  uint32_t tmpreg = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:410
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <PWR_EnterSTOPMode+0x5c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:412
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	4393      	bics	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:415

  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:418

  /* Store the new value */
  PWR->CR = tmpreg;
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <PWR_EnterSTOPMode+0x5c>)
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:421

  /* Set SLEEPDEEP bit of Cortex-M0 System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <PWR_EnterSTOPMode+0x60>)
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <PWR_EnterSTOPMode+0x60>)
 8003eba:	6912      	ldr	r2, [r2, #16]
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:424

  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8003ec2:	1cfb      	adds	r3, r7, #3
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <PWR_EnterSTOPMode+0x46>
__WFI():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cmInstr.h:282
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003eca:	bf30      	wfi
 8003ecc:	e000      	b.n	8003ed0 <PWR_EnterSTOPMode+0x48>
__WFE():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cmInstr.h:293
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8003ece:	bf20      	wfe
PWR_EnterSTOPMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:435
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <PWR_EnterSTOPMode+0x60>)
 8003ed2:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <PWR_EnterSTOPMode+0x60>)
 8003ed4:	6912      	ldr	r2, [r2, #16]
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	438a      	bics	r2, r1
 8003eda:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:436
}
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b004      	add	sp, #16
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <PWR_EnterSTANDBYMode>:
PWR_EnterSTANDBYMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:449
  *          - WKUP pin 1 (PA0) if enabled.
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:451
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <PWR_EnterSTANDBYMode+0x30>)
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <PWR_EnterSTANDBYMode+0x30>)
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	2104      	movs	r1, #4
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:454

  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <PWR_EnterSTANDBYMode+0x30>)
 8003efe:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <PWR_EnterSTANDBYMode+0x30>)
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	2102      	movs	r1, #2
 8003f04:	430a      	orrs	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:457

  /* Set SLEEPDEEP bit of Cortex-M0 System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <PWR_EnterSTANDBYMode+0x34>)
 8003f0a:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <PWR_EnterSTANDBYMode+0x34>)
 8003f0c:	6912      	ldr	r2, [r2, #16]
 8003f0e:	2104      	movs	r1, #4
 8003f10:	430a      	orrs	r2, r1
 8003f12:	611a      	str	r2, [r3, #16]
__WFI():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Libraries\CMSIS\Include/core_cmInstr.h:282
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003f14:	bf30      	wfi
PWR_EnterSTANDBYMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:461

  /* Request Wait For Interrupt */
  __WFI();
}
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	40007000 	.word	0x40007000
 8003f20:	e000ed00 	.word	0xe000ed00

08003f24 <PWR_GetFlagStatus>:
PWR_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:496
  *                  This flag indicates the state of the internal voltage 
  *                  reference, VREFINT.
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:497
  FlagStatus bitstatus = RESET;
 8003f2c:	1c3b      	adds	r3, r7, #0
 8003f2e:	330f      	adds	r3, #15
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:501
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));

  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <PWR_GetFlagStatus+0x3c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <PWR_GetFlagStatus+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:503
  {
    bitstatus = SET;
 8003f3e:	1c3b      	adds	r3, r7, #0
 8003f40:	330f      	adds	r3, #15
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e003      	b.n	8003f50 <PWR_GetFlagStatus+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:507
  }
  else
  {
    bitstatus = RESET;
 8003f48:	1c3b      	adds	r3, r7, #0
 8003f4a:	330f      	adds	r3, #15
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:510
  }
  /* Return the flag status */
  return bitstatus;
 8003f50:	1c3b      	adds	r3, r7, #0
 8003f52:	330f      	adds	r3, #15
 8003f54:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:511
}
 8003f56:	1c18      	adds	r0, r3, #0
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b004      	add	sp, #16
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	40007000 	.word	0x40007000

08003f64 <PWR_ClearFlag>:
PWR_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:522
  *             @arg PWR_FLAG_WU: Wake Up flag
  *             @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:526
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));

  PWR->CR |=  PWR_FLAG << 2;
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <PWR_ClearFlag+0x1c>)
 8003f6e:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <PWR_ClearFlag+0x1c>)
 8003f70:	6811      	ldr	r1, [r2, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c:527
}
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40007000 	.word	0x40007000

08003f84 <RCC_DeInit>:
RCC_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:147
  * @note      LSI, LSE and RTC clocks
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:149
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003f88:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <RCC_DeInit+0x70>)
 8003f8a:	4a1a      	ldr	r2, [pc, #104]	; (8003ff4 <RCC_DeInit+0x70>)
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:152

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8003f94:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <RCC_DeInit+0x70>)
 8003f96:	4a17      	ldr	r2, [pc, #92]	; (8003ff4 <RCC_DeInit+0x70>)
 8003f98:	6851      	ldr	r1, [r2, #4]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <RCC_DeInit+0x74>)
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:155
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003fa0:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fa2:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fa4:	6811      	ldr	r1, [r2, #0]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <RCC_DeInit+0x78>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:158

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fae:	4a11      	ldr	r2, [pc, #68]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fb0:	6811      	ldr	r1, [r2, #0]
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <RCC_DeInit+0x7c>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:161

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fba:	4a0e      	ldr	r2, [pc, #56]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fbc:	6851      	ldr	r1, [r2, #4]
 8003fbe:	4a11      	ldr	r2, [pc, #68]	; (8004004 <RCC_DeInit+0x80>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:164

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fc6:	4a0b      	ldr	r2, [pc, #44]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fca:	210f      	movs	r1, #15
 8003fcc:	438a      	bics	r2, r1
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:167

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fd2:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fd4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <RCC_DeInit+0x84>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:170
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fde:	4a05      	ldr	r2, [pc, #20]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fe0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	438a      	bics	r2, r1
 8003fe6:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:173

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003fe8:	4b02      	ldr	r3, [pc, #8]	; (8003ff4 <RCC_DeInit+0x70>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:174
}
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	f8ffb80c 	.word	0xf8ffb80c
 8003ffc:	fef6ffff 	.word	0xfef6ffff
 8004000:	fffbffff 	.word	0xfffbffff
 8004004:	ffc0ffff 	.word	0xffc0ffff
 8004008:	fffffeac 	.word	0xfffffeac

0800400c <RCC_HSEConfig>:
RCC_HSEConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:197
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	1c02      	adds	r2, r0, #0
 8004014:	1dfb      	adds	r3, r7, #7
 8004016:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:202
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <RCC_HSEConfig+0x20>)
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:205

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 800401e:	4b03      	ldr	r3, [pc, #12]	; (800402c <RCC_HSEConfig+0x20>)
 8004020:	1dfa      	adds	r2, r7, #7
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:207

}
 8004026:	46bd      	mov	sp, r7
 8004028:	b002      	add	sp, #8
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021002 	.word	0x40021002

08004030 <RCC_WaitForHSEStartUp>:
RCC_WaitForHSEStartUp():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:223
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:224
  __IO uint32_t StartUpCounter = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	603b      	str	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:225
  ErrorStatus status = ERROR;
 800403a:	1dfb      	adds	r3, r7, #7
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:226
  FlagStatus HSEStatus = RESET;
 8004040:	1dbb      	adds	r3, r7, #6
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:231 (discriminator 1)
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8004046:	1dbc      	adds	r4, r7, #6
 8004048:	2011      	movs	r0, #17
 800404a:	f000 fc5d 	bl	8004908 <RCC_GetFlagStatus>
 800404e:	1c03      	adds	r3, r0, #0
 8004050:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:232 (discriminator 1)
    StartUpCounter++;  
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	3301      	adds	r3, #1
 8004056:	603b      	str	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:233 (discriminator 1)
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	23a0      	movs	r3, #160	; 0xa0
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	429a      	cmp	r2, r3
 8004060:	d003      	beq.n	800406a <RCC_WaitForHSEStartUp+0x3a>
 8004062:	1dbb      	adds	r3, r7, #6
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ed      	beq.n	8004046 <RCC_WaitForHSEStartUp+0x16>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:235
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800406a:	2011      	movs	r0, #17
 800406c:	f000 fc4c 	bl	8004908 <RCC_GetFlagStatus>
 8004070:	1c03      	adds	r3, r0, #0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <RCC_WaitForHSEStartUp+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:237
  {
    status = SUCCESS;
 8004076:	1dfb      	adds	r3, r7, #7
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e002      	b.n	8004084 <RCC_WaitForHSEStartUp+0x54>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:241
  }
  else
  {
    status = ERROR;
 800407e:	1dfb      	adds	r3, r7, #7
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:243
  }  
  return (status);
 8004084:	1dfb      	adds	r3, r7, #7
 8004086:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:244
}
 8004088:	1c18      	adds	r0, r3, #0
 800408a:	46bd      	mov	sp, r7
 800408c:	b003      	add	sp, #12
 800408e:	bd90      	pop	{r4, r7, pc}

08004090 <RCC_AdjustHSICalibrationValue>:
RCC_AdjustHSICalibrationValue():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:257
  * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
  *          This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	1c02      	adds	r2, r0, #0
 8004098:	1dfb      	adds	r3, r7, #7
 800409a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:258
  uint32_t tmpreg = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:263
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <RCC_AdjustHSICalibrationValue+0x38>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:266
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	22f8      	movs	r2, #248	; 0xf8
 80040aa:	4393      	bics	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:269
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80040ae:	1dfb      	adds	r3, r7, #7
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:272

  /* Store the new value */
  RCC->CR = tmpreg;
 80040ba:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <RCC_AdjustHSICalibrationValue+0x38>)
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:273
}
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b004      	add	sp, #16
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	40021000 	.word	0x40021000

080040cc <RCC_HSICmd>:
RCC_HSICmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:291
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	1c02      	adds	r2, r0, #0
 80040d4:	1dfb      	adds	r3, r7, #7
 80040d6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:295
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d006      	beq.n	80040ee <RCC_HSICmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:297
  {
    RCC->CR |= RCC_CR_HSION;
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <RCC_HSICmd+0x34>)
 80040e2:	4a07      	ldr	r2, [pc, #28]	; (8004100 <RCC_HSICmd+0x34>)
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	2101      	movs	r1, #1
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e005      	b.n	80040fa <RCC_HSICmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:301
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
 80040ee:	4b04      	ldr	r3, [pc, #16]	; (8004100 <RCC_HSICmd+0x34>)
 80040f0:	4a03      	ldr	r2, [pc, #12]	; (8004100 <RCC_HSICmd+0x34>)
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	2101      	movs	r1, #1
 80040f6:	438a      	bics	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:303
  }
}
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000

08004104 <RCC_AdjustHSI14CalibrationValue>:
RCC_AdjustHSI14CalibrationValue():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:317
  * @param  HSI14CalibrationValue: specifies the HSI14 calibration trimming value.
  *          This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSI14CalibrationValue(uint8_t HSI14CalibrationValue)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	1c02      	adds	r2, r0, #0
 800410c:	1dfb      	adds	r3, r7, #7
 800410e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:318
  uint32_t tmpreg = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:323
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <RCC_AdjustHSI14CalibrationValue+0x38>)
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:326
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	22f8      	movs	r2, #248	; 0xf8
 800411e:	4393      	bics	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:329
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 8004122:	1dfb      	adds	r3, r7, #7
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:332

  /* Store the new value */
  RCC->CR2 = tmpreg;
 800412e:	4b03      	ldr	r3, [pc, #12]	; (800413c <RCC_AdjustHSI14CalibrationValue+0x38>)
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:333
}
 8004134:	46bd      	mov	sp, r7
 8004136:	b004      	add	sp, #16
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	40021000 	.word	0x40021000

08004140 <RCC_HSI14Cmd>:
RCC_HSI14Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:348
  * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSI14Cmd(FunctionalState NewState)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	1c02      	adds	r2, r0, #0
 8004148:	1dfb      	adds	r3, r7, #7
 800414a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:352
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800414c:	1dfb      	adds	r3, r7, #7
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <RCC_HSI14Cmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:354
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8004154:	4b07      	ldr	r3, [pc, #28]	; (8004174 <RCC_HSI14Cmd+0x34>)
 8004156:	4a07      	ldr	r2, [pc, #28]	; (8004174 <RCC_HSI14Cmd+0x34>)
 8004158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800415a:	2101      	movs	r1, #1
 800415c:	430a      	orrs	r2, r1
 800415e:	635a      	str	r2, [r3, #52]	; 0x34
 8004160:	e005      	b.n	800416e <RCC_HSI14Cmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:358
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 8004162:	4b04      	ldr	r3, [pc, #16]	; (8004174 <RCC_HSI14Cmd+0x34>)
 8004164:	4a03      	ldr	r2, [pc, #12]	; (8004174 <RCC_HSI14Cmd+0x34>)
 8004166:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004168:	2101      	movs	r1, #1
 800416a:	438a      	bics	r2, r1
 800416c:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:360
  }
}
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000

08004178 <RCC_HSI14ADCRequestCmd>:
RCC_HSI14ADCRequestCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:369
  * @param  NewState: new state of the HSI14 ADC request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	1c02      	adds	r2, r0, #0
 8004180:	1dfb      	adds	r3, r7, #7
 8004182:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:373
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004184:	1dfb      	adds	r3, r7, #7
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d006      	beq.n	800419a <RCC_HSI14ADCRequestCmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:375
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <RCC_HSI14ADCRequestCmd+0x34>)
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <RCC_HSI14ADCRequestCmd+0x34>)
 8004190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004192:	2104      	movs	r1, #4
 8004194:	438a      	bics	r2, r1
 8004196:	635a      	str	r2, [r3, #52]	; 0x34
 8004198:	e005      	b.n	80041a6 <RCC_HSI14ADCRequestCmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:379
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 800419a:	4b04      	ldr	r3, [pc, #16]	; (80041ac <RCC_HSI14ADCRequestCmd+0x34>)
 800419c:	4a03      	ldr	r2, [pc, #12]	; (80041ac <RCC_HSI14ADCRequestCmd+0x34>)
 800419e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041a0:	2104      	movs	r1, #4
 80041a2:	430a      	orrs	r2, r1
 80041a4:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:381
  }
}
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000

080041b0 <RCC_LSEConfig>:
RCC_LSEConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:401
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint32_t RCC_LSE)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:407
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <RCC_LSEConfig+0x34>)
 80041ba:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <RCC_LSEConfig+0x34>)
 80041bc:	6a12      	ldr	r2, [r2, #32]
 80041be:	2101      	movs	r1, #1
 80041c0:	438a      	bics	r2, r1
 80041c2:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:410

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <RCC_LSEConfig+0x34>)
 80041c6:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <RCC_LSEConfig+0x34>)
 80041c8:	6a12      	ldr	r2, [r2, #32]
 80041ca:	2104      	movs	r1, #4
 80041cc:	438a      	bics	r2, r1
 80041ce:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:413

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <RCC_LSEConfig+0x34>)
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <RCC_LSEConfig+0x34>)
 80041d4:	6a11      	ldr	r1, [r2, #32]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	430a      	orrs	r2, r1
 80041da:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:414
}
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	40021000 	.word	0x40021000

080041e8 <RCC_LSEDriveConfig>:
RCC_LSEDriveConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:427
  *            @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
  *            @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
  * @retval None
  */
void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:432
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <RCC_LSEDriveConfig+0x28>)
 80041f2:	4a07      	ldr	r2, [pc, #28]	; (8004210 <RCC_LSEDriveConfig+0x28>)
 80041f4:	6a12      	ldr	r2, [r2, #32]
 80041f6:	2118      	movs	r1, #24
 80041f8:	438a      	bics	r2, r1
 80041fa:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:435

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <RCC_LSEDriveConfig+0x28>)
 80041fe:	4a04      	ldr	r2, [pc, #16]	; (8004210 <RCC_LSEDriveConfig+0x28>)
 8004200:	6a11      	ldr	r1, [r2, #32]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	430a      	orrs	r2, r1
 8004206:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:436
}
 8004208:	46bd      	mov	sp, r7
 800420a:	b002      	add	sp, #8
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	40021000 	.word	0x40021000

08004214 <RCC_LSICmd>:
RCC_LSICmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:451
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	1c02      	adds	r2, r0, #0
 800421c:	1dfb      	adds	r3, r7, #7
 800421e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:455
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004220:	1dfb      	adds	r3, r7, #7
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d006      	beq.n	8004236 <RCC_LSICmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:457
  {
    RCC->CSR |= RCC_CSR_LSION;
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <RCC_LSICmd+0x34>)
 800422a:	4a07      	ldr	r2, [pc, #28]	; (8004248 <RCC_LSICmd+0x34>)
 800422c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800422e:	2101      	movs	r1, #1
 8004230:	430a      	orrs	r2, r1
 8004232:	625a      	str	r2, [r3, #36]	; 0x24
 8004234:	e005      	b.n	8004242 <RCC_LSICmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:461
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <RCC_LSICmd+0x34>)
 8004238:	4a03      	ldr	r2, [pc, #12]	; (8004248 <RCC_LSICmd+0x34>)
 800423a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800423c:	2101      	movs	r1, #1
 800423e:	438a      	bics	r2, r1
 8004240:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:463
  }
}
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000

0800424c <RCC_PLLConfig>:
RCC_PLLConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:482
  *          This parameter can be RCC_PLLMul_x where x:[2,16] 
  *
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:488
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <RCC_PLLConfig+0x2c>)
 8004258:	4a07      	ldr	r2, [pc, #28]	; (8004278 <RCC_PLLConfig+0x2c>)
 800425a:	6851      	ldr	r1, [r2, #4]
 800425c:	4a07      	ldr	r2, [pc, #28]	; (800427c <RCC_PLLConfig+0x30>)
 800425e:	400a      	ands	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:491

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <RCC_PLLConfig+0x2c>)
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <RCC_PLLConfig+0x2c>)
 8004266:	6851      	ldr	r1, [r2, #4]
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	4302      	orrs	r2, r0
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:492
}
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000
 800427c:	ffc2ffff 	.word	0xffc2ffff

08004280 <RCC_PLLCmd>:
RCC_PLLCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:506
  * @param  NewState: new state of the PLL.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	1c02      	adds	r2, r0, #0
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:510
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800428c:	1dfb      	adds	r3, r7, #7
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <RCC_PLLCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:512
  {
    RCC->CR |= RCC_CR_PLLON;
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <RCC_PLLCmd+0x38>)
 8004296:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <RCC_PLLCmd+0x38>)
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	2180      	movs	r1, #128	; 0x80
 800429c:	0449      	lsls	r1, r1, #17
 800429e:	430a      	orrs	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e005      	b.n	80042b0 <RCC_PLLCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:516
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <RCC_PLLCmd+0x38>)
 80042a6:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <RCC_PLLCmd+0x38>)
 80042a8:	6811      	ldr	r1, [r2, #0]
 80042aa:	4a04      	ldr	r2, [pc, #16]	; (80042bc <RCC_PLLCmd+0x3c>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:518
  }
}
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b002      	add	sp, #8
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	40021000 	.word	0x40021000
 80042bc:	feffffff 	.word	0xfeffffff

080042c0 <RCC_PREDIV1Config>:
RCC_PREDIV1Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:528
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *          This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:529
  uint32_t tmpreg = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:534
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <RCC_PREDIV1Config+0x30>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:536
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	220f      	movs	r2, #15
 80042d6:	4393      	bics	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:538
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:540
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80042e2:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <RCC_PREDIV1Config+0x30>)
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:541
}
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	40021000 	.word	0x40021000

080042f4 <RCC_ClockSecuritySystemCmd>:
RCC_ClockSecuritySystemCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:555
  * @param  NewState: new state of the Clock Security System.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	1c02      	adds	r2, r0, #0
 80042fc:	1dfb      	adds	r3, r7, #7
 80042fe:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:559
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <RCC_ClockSecuritySystemCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:561
  {
    RCC->CR |= RCC_CR_CSSON;
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <RCC_ClockSecuritySystemCmd+0x38>)
 800430a:	4a08      	ldr	r2, [pc, #32]	; (800432c <RCC_ClockSecuritySystemCmd+0x38>)
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	0309      	lsls	r1, r1, #12
 8004312:	430a      	orrs	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e005      	b.n	8004324 <RCC_ClockSecuritySystemCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:565
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <RCC_ClockSecuritySystemCmd+0x38>)
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <RCC_ClockSecuritySystemCmd+0x38>)
 800431c:	6811      	ldr	r1, [r2, #0]
 800431e:	4a04      	ldr	r2, [pc, #16]	; (8004330 <RCC_ClockSecuritySystemCmd+0x3c>)
 8004320:	400a      	ands	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:567
  }
}
 8004324:	46bd      	mov	sp, r7
 8004326:	b002      	add	sp, #8
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	40021000 	.word	0x40021000
 8004330:	fff7ffff 	.word	0xfff7ffff

08004334 <RCC_MCOConfig>:
RCC_MCOConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:585
  *            @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
  *            @arg RCC_MCOSource_PLLCLK_Div2: PLL clock divided by 2 selected.
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCOSource)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	1c02      	adds	r2, r0, #0
 800433c:	1dfb      	adds	r3, r7, #7
 800433e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:590
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <RCC_MCOConfig+0x1c>)
 8004342:	1dfa      	adds	r2, r7, #7
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:591
}
 8004348:	46bd      	mov	sp, r7
 800434a:	b002      	add	sp, #8
 800434c:	bd80      	pop	{r7, pc}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	40021007 	.word	0x40021007

08004354 <RCC_SYSCLKConfig>:
RCC_SYSCLKConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:690
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:691
  uint32_t tmpreg = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:696
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8004360:	4b08      	ldr	r3, [pc, #32]	; (8004384 <RCC_SYSCLKConfig+0x30>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:699
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2203      	movs	r2, #3
 800436a:	4393      	bics	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:702
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:705
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004376:	4b03      	ldr	r3, [pc, #12]	; (8004384 <RCC_SYSCLKConfig+0x30>)
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:706
}
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	40021000 	.word	0x40021000

08004388 <RCC_GetSYSCLKSource>:
RCC_GetSYSCLKSource():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:718
  *           - 0x00: HSI used as system clock
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:719
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <RCC_GetSYSCLKSource+0x18>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	230c      	movs	r3, #12
 8004394:	4013      	ands	r3, r2
 8004396:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:720
}
 8004398:	1c18      	adds	r0, r3, #0
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	40021000 	.word	0x40021000

080043a4 <RCC_HCLKConfig>:
RCC_HCLKConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:739
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:740
  uint32_t tmpreg = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:745
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 80043b0:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <RCC_HCLKConfig+0x30>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:748
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	22f0      	movs	r2, #240	; 0xf0
 80043ba:	4393      	bics	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:751
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:754
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80043c6:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <RCC_HCLKConfig+0x30>)
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:755
}
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	40021000 	.word	0x40021000

080043d8 <RCC_PCLKConfig>:
RCC_PCLKConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:770
  *            @arg RCC_HCLK_Div8: APB clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB clock = HCLK/16
  * @retval None
  */
void RCC_PCLKConfig(uint32_t RCC_HCLK)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:771
  uint32_t tmpreg = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:776
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <RCC_PCLKConfig+0x30>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:779
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4b07      	ldr	r3, [pc, #28]	; (800440c <RCC_PCLKConfig+0x34>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:782
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:785
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80043fa:	4b03      	ldr	r3, [pc, #12]	; (8004408 <RCC_PCLKConfig+0x30>)
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:786
}
 8004400:	46bd      	mov	sp, r7
 8004402:	b004      	add	sp, #16
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	40021000 	.word	0x40021000
 800440c:	fffff8ff 	.word	0xfffff8ff

08004410 <RCC_ADCCLKConfig>:
RCC_ADCCLKConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:799
  *             @arg RCC_ADCCLK_PCLK_Div2: ADC clock = PCLK/2
  *             @arg RCC_ADCCLK_PCLK_Div4: ADC clock = PCLK/4  
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_ADCCLK)
{ 
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:804
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8004418:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <RCC_ADCCLKConfig+0x44>)
 800441a:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <RCC_ADCCLKConfig+0x44>)
 800441c:	6851      	ldr	r1, [r2, #4]
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <RCC_ADCCLKConfig+0x48>)
 8004420:	400a      	ands	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:806
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <RCC_ADCCLKConfig+0x44>)
 8004426:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <RCC_ADCCLKConfig+0x44>)
 8004428:	6851      	ldr	r1, [r2, #4]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	0412      	lsls	r2, r2, #16
 800442e:	0c12      	lsrs	r2, r2, #16
 8004430:	430a      	orrs	r2, r1
 8004432:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:809

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <RCC_ADCCLKConfig+0x44>)
 8004436:	4a07      	ldr	r2, [pc, #28]	; (8004454 <RCC_ADCCLKConfig+0x44>)
 8004438:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <RCC_ADCCLKConfig+0x4c>)
 800443c:	400a      	ands	r2, r1
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:811
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <RCC_ADCCLKConfig+0x44>)
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <RCC_ADCCLKConfig+0x44>)
 8004444:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	0c12      	lsrs	r2, r2, #16
 800444a:	430a      	orrs	r2, r1
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:812
}
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	ffffbfff 	.word	0xffffbfff
 800445c:	fffffeff 	.word	0xfffffeff

08004460 <RCC_CECCLKConfig>:
RCC_CECCLKConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:824
  *             @arg RCC_CECCLK_HSI_Div244: CEC clock = HSI/244 (32768Hz)
  *             @arg RCC_CECCLK_LSE: CEC clock = LSE
  * @retval None
  */
void RCC_CECCLKConfig(uint32_t RCC_CECCLK)
{ 
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:829
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <RCC_CECCLKConfig+0x28>)
 800446a:	4a07      	ldr	r2, [pc, #28]	; (8004488 <RCC_CECCLKConfig+0x28>)
 800446c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800446e:	2140      	movs	r1, #64	; 0x40
 8004470:	438a      	bics	r2, r1
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:831
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <RCC_CECCLKConfig+0x28>)
 8004476:	4a04      	ldr	r2, [pc, #16]	; (8004488 <RCC_CECCLKConfig+0x28>)
 8004478:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	430a      	orrs	r2, r1
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:832
}
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	40021000 	.word	0x40021000

0800448c <RCC_I2CCLKConfig>:
RCC_I2CCLKConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:844
  *             @arg RCC_I2C1CLK_HSI: I2C1 clock = HSI
  *             @arg RCC_I2C1CLK_SYSCLK: I2C1 clock = System Clock
  * @retval None
  */
void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
{ 
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:849
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <RCC_I2CCLKConfig+0x28>)
 8004496:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <RCC_I2CCLKConfig+0x28>)
 8004498:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800449a:	2110      	movs	r1, #16
 800449c:	438a      	bics	r2, r1
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:851
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 80044a0:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <RCC_I2CCLKConfig+0x28>)
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <RCC_I2CCLKConfig+0x28>)
 80044a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:852
}
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b002      	add	sp, #8
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	40021000 	.word	0x40021000

080044b8 <RCC_USARTCLKConfig>:
RCC_USARTCLKConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:866
  *             @arg RCC_USART1CLK_LSE: USART1 clock = LSE Clock
  *             @arg RCC_USART1CLK_HSI: USART1 clock = HSI Clock
  * @retval None
  */
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
{ 
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:871
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Clear USARTSW[1:0] bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <RCC_USARTCLKConfig+0x28>)
 80044c2:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <RCC_USARTCLKConfig+0x28>)
 80044c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044c6:	2103      	movs	r1, #3
 80044c8:	438a      	bics	r2, r1
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:873
  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <RCC_USARTCLKConfig+0x28>)
 80044ce:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <RCC_USARTCLKConfig+0x28>)
 80044d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:874
}
 80044d8:	46bd      	mov	sp, r7
 80044da:	b002      	add	sp, #8
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	40021000 	.word	0x40021000

080044e4 <RCC_GetClocksFreq>:
RCC_GetClocksFreq():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:913
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:914
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:917

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004500:	4b65      	ldr	r3, [pc, #404]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	230c      	movs	r3, #12
 8004506:	4013      	ands	r3, r2
 8004508:	61fb      	str	r3, [r7, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:919
  
  switch (tmp)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2b04      	cmp	r3, #4
 800450e:	d007      	beq.n	8004520 <RCC_GetClocksFreq+0x3c>
 8004510:	2b08      	cmp	r3, #8
 8004512:	d009      	beq.n	8004528 <RCC_GetClocksFreq+0x44>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d130      	bne.n	800457a <RCC_GetClocksFreq+0x96>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:922
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a60      	ldr	r2, [pc, #384]	; (800469c <RCC_GetClocksFreq+0x1b8>)
 800451c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:923
      break;
 800451e:	e030      	b.n	8004582 <RCC_GetClocksFreq+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:925
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a5e      	ldr	r2, [pc, #376]	; (800469c <RCC_GetClocksFreq+0x1b8>)
 8004524:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:926
      break;
 8004526:	e02c      	b.n	8004582 <RCC_GetClocksFreq+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:929
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8004528:	4b5b      	ldr	r3, [pc, #364]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	23f0      	movs	r3, #240	; 0xf0
 800452e:	039b      	lsls	r3, r3, #14
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:930
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004534:	4b58      	ldr	r3, [pc, #352]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	025b      	lsls	r3, r3, #9
 800453c:	4013      	ands	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:931
      pllmull = ( pllmull >> 18) + 2;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	0c9b      	lsrs	r3, r3, #18
 8004544:	3302      	adds	r3, #2
 8004546:	61bb      	str	r3, [r7, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:933
      
      if (pllsource == 0x00)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <RCC_GetClocksFreq+0x76>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:936
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	4a53      	ldr	r2, [pc, #332]	; (80046a0 <RCC_GetClocksFreq+0x1bc>)
 8004552:	435a      	muls	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:944
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 8004558:	e013      	b.n	8004582 <RCC_GetClocksFreq+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:940
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800455a:	4b4f      	ldr	r3, [pc, #316]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	230f      	movs	r3, #15
 8004560:	4013      	ands	r3, r2
 8004562:	3301      	adds	r3, #1
 8004564:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:942
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8004566:	484d      	ldr	r0, [pc, #308]	; (800469c <RCC_GetClocksFreq+0x1b8>)
 8004568:	6939      	ldr	r1, [r7, #16]
 800456a:	f7fb fe25 	bl	80001b8 <__aeabi_uidiv>
 800456e:	1c03      	adds	r3, r0, #0
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	435a      	muls	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:944
      }      
      break;
 8004578:	e003      	b.n	8004582 <RCC_GetClocksFreq+0x9e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:946
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a47      	ldr	r2, [pc, #284]	; (800469c <RCC_GetClocksFreq+0x1b8>)
 800457e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:947
      break;
 8004580:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:951
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004582:	4b45      	ldr	r3, [pc, #276]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	23f0      	movs	r3, #240	; 0xf0
 8004588:	4013      	ands	r3, r2
 800458a:	61fb      	str	r3, [r7, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:952
  tmp = tmp >> 4;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	61fb      	str	r3, [r7, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:953
  presc = APBAHBPrescTable[tmp]; 
 8004592:	4a44      	ldr	r2, [pc, #272]	; (80046a4 <RCC_GetClocksFreq+0x1c0>)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	18d3      	adds	r3, r2, r3
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:955
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	40da      	lsrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:958

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 80045aa:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	23e0      	movs	r3, #224	; 0xe0
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4013      	ands	r3, r2
 80045b4:	61fb      	str	r3, [r7, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:959
  tmp = tmp >> 8;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	61fb      	str	r3, [r7, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:960
  presc = APBAHBPrescTable[tmp];
 80045bc:	4a39      	ldr	r2, [pc, #228]	; (80046a4 <RCC_GetClocksFreq+0x1c0>)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	18d3      	adds	r3, r2, r3
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:962
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	40da      	lsrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:965

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 80045d4:	4b30      	ldr	r3, [pc, #192]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 80045d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4013      	ands	r3, r2
 80045de:	d103      	bne.n	80045e8 <RCC_GetClocksFreq+0x104>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:968
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a31      	ldr	r2, [pc, #196]	; (80046a8 <RCC_GetClocksFreq+0x1c4>)
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	e010      	b.n	800460a <RCC_GetClocksFreq+0x126>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:972
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 80045e8:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	01db      	lsls	r3, r3, #7
 80045f0:	4013      	ands	r3, r2
 80045f2:	d105      	bne.n	8004600 <RCC_GetClocksFreq+0x11c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:975
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	085a      	lsrs	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	e004      	b.n	800460a <RCC_GetClocksFreq+0x126>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:980
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	089a      	lsrs	r2, r3, #2
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:986
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 800460a:	4b23      	ldr	r3, [pc, #140]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 800460c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800460e:	2340      	movs	r3, #64	; 0x40
 8004610:	4013      	ands	r3, r2
 8004612:	d103      	bne.n	800461c <RCC_GetClocksFreq+0x138>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:989
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a25      	ldr	r2, [pc, #148]	; (80046ac <RCC_GetClocksFreq+0x1c8>)
 8004618:	611a      	str	r2, [r3, #16]
 800461a:	e003      	b.n	8004624 <RCC_GetClocksFreq+0x140>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:994
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2280      	movs	r2, #128	; 0x80
 8004620:	0212      	lsls	r2, r2, #8
 8004622:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:998
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 8004626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004628:	2310      	movs	r3, #16
 800462a:	4013      	ands	r3, r2
 800462c:	d103      	bne.n	8004636 <RCC_GetClocksFreq+0x152>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1001
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1a      	ldr	r2, [pc, #104]	; (800469c <RCC_GetClocksFreq+0x1b8>)
 8004632:	615a      	str	r2, [r3, #20]
 8004634:	e003      	b.n	800463e <RCC_GetClocksFreq+0x15a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1006
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1010
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800463e:	4b16      	ldr	r3, [pc, #88]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 8004640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004642:	2303      	movs	r3, #3
 8004644:	4013      	ands	r3, r2
 8004646:	d104      	bne.n	8004652 <RCC_GetClocksFreq+0x16e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1013
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
 8004650:	e01e      	b.n	8004690 <RCC_GetClocksFreq+0x1ac>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1015
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8004652:	4b11      	ldr	r3, [pc, #68]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 8004654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004656:	2303      	movs	r3, #3
 8004658:	4013      	ands	r3, r2
 800465a:	2b01      	cmp	r3, #1
 800465c:	d104      	bne.n	8004668 <RCC_GetClocksFreq+0x184>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1018
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
 8004666:	e013      	b.n	8004690 <RCC_GetClocksFreq+0x1ac>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1020
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 800466a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466c:	2303      	movs	r3, #3
 800466e:	4013      	ands	r3, r2
 8004670:	2b02      	cmp	r3, #2
 8004672:	d104      	bne.n	800467e <RCC_GetClocksFreq+0x19a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1023
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2280      	movs	r2, #128	; 0x80
 8004678:	0212      	lsls	r2, r2, #8
 800467a:	619a      	str	r2, [r3, #24]
 800467c:	e008      	b.n	8004690 <RCC_GetClocksFreq+0x1ac>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1025
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <RCC_GetClocksFreq+0x1b4>)
 8004680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004682:	2303      	movs	r3, #3
 8004684:	4013      	ands	r3, r2
 8004686:	2b03      	cmp	r3, #3
 8004688:	d102      	bne.n	8004690 <RCC_GetClocksFreq+0x1ac>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1028
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a03      	ldr	r2, [pc, #12]	; (800469c <RCC_GetClocksFreq+0x1b8>)
 800468e:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1030
  }
}
 8004690:	46bd      	mov	sp, r7
 8004692:	b008      	add	sp, #32
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	40021000 	.word	0x40021000
 800469c:	007a1200 	.word	0x007a1200
 80046a0:	003d0900 	.word	0x003d0900
 80046a4:	20000014 	.word	0x20000014
 80046a8:	00d59f80 	.word	0x00d59f80
 80046ac:	00008012 	.word	0x00008012

080046b0 <RCC_RTCCLKConfig>:
RCC_RTCCLKConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1085
  *         RTC clock source).
  *                          
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1090
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <RCC_RTCCLKConfig+0x1c>)
 80046ba:	4a04      	ldr	r2, [pc, #16]	; (80046cc <RCC_RTCCLKConfig+0x1c>)
 80046bc:	6a11      	ldr	r1, [r2, #32]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1091
}
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b002      	add	sp, #8
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	40021000 	.word	0x40021000

080046d0 <RCC_RTCCLKCmd>:
RCC_RTCCLKCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1102
  * @param  NewState: new state of the RTC clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	1c02      	adds	r2, r0, #0
 80046d8:	1dfb      	adds	r3, r7, #7
 80046da:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1106
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80046dc:	1dfb      	adds	r3, r7, #7
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <RCC_RTCCLKCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1108
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <RCC_RTCCLKCmd+0x38>)
 80046e6:	4a08      	ldr	r2, [pc, #32]	; (8004708 <RCC_RTCCLKCmd+0x38>)
 80046e8:	6a12      	ldr	r2, [r2, #32]
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	0209      	lsls	r1, r1, #8
 80046ee:	430a      	orrs	r2, r1
 80046f0:	621a      	str	r2, [r3, #32]
 80046f2:	e005      	b.n	8004700 <RCC_RTCCLKCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1112
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <RCC_RTCCLKCmd+0x38>)
 80046f6:	4a04      	ldr	r2, [pc, #16]	; (8004708 <RCC_RTCCLKCmd+0x38>)
 80046f8:	6a11      	ldr	r1, [r2, #32]
 80046fa:	4a04      	ldr	r2, [pc, #16]	; (800470c <RCC_RTCCLKCmd+0x3c>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1114
  }
}
 8004700:	46bd      	mov	sp, r7
 8004702:	b002      	add	sp, #8
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	40021000 	.word	0x40021000
 800470c:	ffff7fff 	.word	0xffff7fff

08004710 <RCC_BackupResetCmd>:
RCC_BackupResetCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1125
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	1c02      	adds	r2, r0, #0
 8004718:	1dfb      	adds	r3, r7, #7
 800471a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1129
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800471c:	1dfb      	adds	r3, r7, #7
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <RCC_BackupResetCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1131
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <RCC_BackupResetCmd+0x38>)
 8004726:	4a08      	ldr	r2, [pc, #32]	; (8004748 <RCC_BackupResetCmd+0x38>)
 8004728:	6a12      	ldr	r2, [r2, #32]
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	0249      	lsls	r1, r1, #9
 800472e:	430a      	orrs	r2, r1
 8004730:	621a      	str	r2, [r3, #32]
 8004732:	e005      	b.n	8004740 <RCC_BackupResetCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1135
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <RCC_BackupResetCmd+0x38>)
 8004736:	4a04      	ldr	r2, [pc, #16]	; (8004748 <RCC_BackupResetCmd+0x38>)
 8004738:	6a11      	ldr	r1, [r2, #32]
 800473a:	4a04      	ldr	r2, [pc, #16]	; (800474c <RCC_BackupResetCmd+0x3c>)
 800473c:	400a      	ands	r2, r1
 800473e:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1137
  }
}
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	40021000 	.word	0x40021000
 800474c:	fffeffff 	.word	0xfffeffff

08004750 <RCC_AHBPeriphClockCmd>:
RCC_AHBPeriphClockCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1161
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	1c0a      	adds	r2, r1, #0
 800475a:	1cfb      	adds	r3, r7, #3
 800475c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1166
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800475e:	1cfb      	adds	r3, r7, #3
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <RCC_AHBPeriphClockCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1168
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <RCC_AHBPeriphClockCmd+0x38>)
 8004768:	4a07      	ldr	r2, [pc, #28]	; (8004788 <RCC_AHBPeriphClockCmd+0x38>)
 800476a:	6951      	ldr	r1, [r2, #20]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	430a      	orrs	r2, r1
 8004770:	615a      	str	r2, [r3, #20]
 8004772:	e006      	b.n	8004782 <RCC_AHBPeriphClockCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1172
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <RCC_AHBPeriphClockCmd+0x38>)
 8004776:	4a04      	ldr	r2, [pc, #16]	; (8004788 <RCC_AHBPeriphClockCmd+0x38>)
 8004778:	6952      	ldr	r2, [r2, #20]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	43c9      	mvns	r1, r1
 800477e:	400a      	ands	r2, r1
 8004780:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1174
  }
}
 8004782:	46bd      	mov	sp, r7
 8004784:	b002      	add	sp, #8
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021000 	.word	0x40021000

0800478c <RCC_APB2PeriphClockCmd>:
RCC_APB2PeriphClockCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1197
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	1c0a      	adds	r2, r1, #0
 8004796:	1cfb      	adds	r3, r7, #3
 8004798:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1202
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800479a:	1cfb      	adds	r3, r7, #3
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d006      	beq.n	80047b0 <RCC_APB2PeriphClockCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1204
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <RCC_APB2PeriphClockCmd+0x38>)
 80047a4:	4a07      	ldr	r2, [pc, #28]	; (80047c4 <RCC_APB2PeriphClockCmd+0x38>)
 80047a6:	6991      	ldr	r1, [r2, #24]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	619a      	str	r2, [r3, #24]
 80047ae:	e006      	b.n	80047be <RCC_APB2PeriphClockCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1208
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <RCC_APB2PeriphClockCmd+0x38>)
 80047b2:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <RCC_APB2PeriphClockCmd+0x38>)
 80047b4:	6992      	ldr	r2, [r2, #24]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	43c9      	mvns	r1, r1
 80047ba:	400a      	ands	r2, r1
 80047bc:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1210
  }
}
 80047be:	46bd      	mov	sp, r7
 80047c0:	b002      	add	sp, #8
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000

080047c8 <RCC_APB1PeriphClockCmd>:
RCC_APB1PeriphClockCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1236
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	1c0a      	adds	r2, r1, #0
 80047d2:	1cfb      	adds	r3, r7, #3
 80047d4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1241
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80047d6:	1cfb      	adds	r3, r7, #3
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d006      	beq.n	80047ec <RCC_APB1PeriphClockCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1243
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <RCC_APB1PeriphClockCmd+0x38>)
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <RCC_APB1PeriphClockCmd+0x38>)
 80047e2:	69d1      	ldr	r1, [r2, #28]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	61da      	str	r2, [r3, #28]
 80047ea:	e006      	b.n	80047fa <RCC_APB1PeriphClockCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1247
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <RCC_APB1PeriphClockCmd+0x38>)
 80047ee:	4a04      	ldr	r2, [pc, #16]	; (8004800 <RCC_APB1PeriphClockCmd+0x38>)
 80047f0:	69d2      	ldr	r2, [r2, #28]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	43c9      	mvns	r1, r1
 80047f6:	400a      	ands	r2, r1
 80047f8:	61da      	str	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1249
  }
}
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000

08004804 <RCC_AHBPeriphResetCmd>:
RCC_AHBPeriphResetCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1266
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	1c0a      	adds	r2, r1, #0
 800480e:	1cfb      	adds	r3, r7, #3
 8004810:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1271
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004812:	1cfb      	adds	r3, r7, #3
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <RCC_AHBPeriphResetCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1273
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 800481a:	4b08      	ldr	r3, [pc, #32]	; (800483c <RCC_AHBPeriphResetCmd+0x38>)
 800481c:	4a07      	ldr	r2, [pc, #28]	; (800483c <RCC_AHBPeriphResetCmd+0x38>)
 800481e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	430a      	orrs	r2, r1
 8004824:	629a      	str	r2, [r3, #40]	; 0x28
 8004826:	e006      	b.n	8004836 <RCC_AHBPeriphResetCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1277
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <RCC_AHBPeriphResetCmd+0x38>)
 800482a:	4a04      	ldr	r2, [pc, #16]	; (800483c <RCC_AHBPeriphResetCmd+0x38>)
 800482c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	43c9      	mvns	r1, r1
 8004832:	400a      	ands	r2, r1
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1279
  }
}
 8004836:	46bd      	mov	sp, r7
 8004838:	b002      	add	sp, #8
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000

08004840 <RCC_APB2PeriphResetCmd>:
RCC_APB2PeriphResetCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1299
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	1c0a      	adds	r2, r1, #0
 800484a:	1cfb      	adds	r3, r7, #3
 800484c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1304
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800484e:	1cfb      	adds	r3, r7, #3
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d006      	beq.n	8004864 <RCC_APB2PeriphResetCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1306
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <RCC_APB2PeriphResetCmd+0x38>)
 8004858:	4a07      	ldr	r2, [pc, #28]	; (8004878 <RCC_APB2PeriphResetCmd+0x38>)
 800485a:	68d1      	ldr	r1, [r2, #12]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	430a      	orrs	r2, r1
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	e006      	b.n	8004872 <RCC_APB2PeriphResetCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1310
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004864:	4b04      	ldr	r3, [pc, #16]	; (8004878 <RCC_APB2PeriphResetCmd+0x38>)
 8004866:	4a04      	ldr	r2, [pc, #16]	; (8004878 <RCC_APB2PeriphResetCmd+0x38>)
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	43c9      	mvns	r1, r1
 800486e:	400a      	ands	r2, r1
 8004870:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1312
  }
}
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000

0800487c <RCC_APB1PeriphResetCmd>:
RCC_APB1PeriphResetCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1335
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	1c0a      	adds	r2, r1, #0
 8004886:	1cfb      	adds	r3, r7, #3
 8004888:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1340
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800488a:	1cfb      	adds	r3, r7, #3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d006      	beq.n	80048a0 <RCC_APB1PeriphResetCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1342
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <RCC_APB1PeriphResetCmd+0x38>)
 8004894:	4a07      	ldr	r2, [pc, #28]	; (80048b4 <RCC_APB1PeriphResetCmd+0x38>)
 8004896:	6911      	ldr	r1, [r2, #16]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	430a      	orrs	r2, r1
 800489c:	611a      	str	r2, [r3, #16]
 800489e:	e006      	b.n	80048ae <RCC_APB1PeriphResetCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1346
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80048a0:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <RCC_APB1PeriphResetCmd+0x38>)
 80048a2:	4a04      	ldr	r2, [pc, #16]	; (80048b4 <RCC_APB1PeriphResetCmd+0x38>)
 80048a4:	6912      	ldr	r2, [r2, #16]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	43c9      	mvns	r1, r1
 80048aa:	400a      	ands	r2, r1
 80048ac:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1348
  }
}
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b002      	add	sp, #8
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40021000 	.word	0x40021000

080048b8 <RCC_ITConfig>:
RCC_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1386
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	1c0a      	adds	r2, r1, #0
 80048c0:	1dfb      	adds	r3, r7, #7
 80048c2:	1c01      	adds	r1, r0, #0
 80048c4:	7019      	strb	r1, [r3, #0]
 80048c6:	1dbb      	adds	r3, r7, #6
 80048c8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1391
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80048ca:	1dbb      	adds	r3, r7, #6
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <RCC_ITConfig+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1394
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <RCC_ITConfig+0x4c>)
 80048d4:	4a0b      	ldr	r2, [pc, #44]	; (8004904 <RCC_ITConfig+0x4c>)
 80048d6:	7812      	ldrb	r2, [r2, #0]
 80048d8:	b2d1      	uxtb	r1, r2
 80048da:	1dfa      	adds	r2, r7, #7
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e00a      	b.n	80048fc <RCC_ITConfig+0x44>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1399
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <RCC_ITConfig+0x4c>)
 80048e8:	4a06      	ldr	r2, [pc, #24]	; (8004904 <RCC_ITConfig+0x4c>)
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	1df9      	adds	r1, r7, #7
 80048f0:	7809      	ldrb	r1, [r1, #0]
 80048f2:	43c9      	mvns	r1, r1
 80048f4:	b2c9      	uxtb	r1, r1
 80048f6:	400a      	ands	r2, r1
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1401
  }
}
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	40021009 	.word	0x40021009

08004908 <RCC_GetFlagStatus>:
RCC_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1424
  *             @arg RCC_FLAG_LPWRRST: Low Power reset
  *             @arg RCC_FLAG_HSI14RDY: HSI14 oscillator clock ready  
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	1c02      	adds	r2, r0, #0
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1425
  uint32_t tmp = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1426
  uint32_t statusreg = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1427
  FlagStatus bitstatus = RESET;
 800491c:	1c3b      	adds	r3, r7, #0
 800491e:	3313      	adds	r3, #19
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1433

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004924:	1dfb      	adds	r3, r7, #7
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	b2db      	uxtb	r3, r3
 800492c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1435

  if (tmp == 0)               /* The flag to check is in CR register */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <RCC_GetFlagStatus+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1437
  {
    statusreg = RCC->CR;
 8004934:	4b17      	ldr	r3, [pc, #92]	; (8004994 <RCC_GetFlagStatus+0x8c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e010      	b.n	800495e <RCC_GetFlagStatus+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1439
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d103      	bne.n	800494a <RCC_GetFlagStatus+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1441
  {
    statusreg = RCC->BDCR;
 8004942:	4b14      	ldr	r3, [pc, #80]	; (8004994 <RCC_GetFlagStatus+0x8c>)
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	e009      	b.n	800495e <RCC_GetFlagStatus+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1443
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d103      	bne.n	8004958 <RCC_GetFlagStatus+0x50>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1445
  {
    statusreg = RCC->CSR;
 8004950:	4b10      	ldr	r3, [pc, #64]	; (8004994 <RCC_GetFlagStatus+0x8c>)
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	e002      	b.n	800495e <RCC_GetFlagStatus+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1449
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <RCC_GetFlagStatus+0x8c>)
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1453
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800495e:	1dfb      	adds	r3, r7, #7
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	231f      	movs	r3, #31
 8004964:	4013      	ands	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1455

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	40da      	lsrs	r2, r3
 800496e:	2301      	movs	r3, #1
 8004970:	4013      	ands	r3, r2
 8004972:	d004      	beq.n	800497e <RCC_GetFlagStatus+0x76>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1457
  {
    bitstatus = SET;
 8004974:	1c3b      	adds	r3, r7, #0
 8004976:	3313      	adds	r3, #19
 8004978:	2201      	movs	r2, #1
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e003      	b.n	8004986 <RCC_GetFlagStatus+0x7e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1461
  }
  else
  {
    bitstatus = RESET;
 800497e:	1c3b      	adds	r3, r7, #0
 8004980:	3313      	adds	r3, #19
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1464
  }
  /* Return the flag status */
  return bitstatus;
 8004986:	1c3b      	adds	r3, r7, #0
 8004988:	3313      	adds	r3, #19
 800498a:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1465
}
 800498c:	1c18      	adds	r0, r3, #0
 800498e:	46bd      	mov	sp, r7
 8004990:	b006      	add	sp, #24
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000

08004998 <RCC_ClearFlag>:
RCC_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1476
  *         RCC_FLAG_LPWRRST.
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1478
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800499c:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <RCC_ClearFlag+0x18>)
 800499e:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <RCC_ClearFlag+0x18>)
 80049a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	0449      	lsls	r1, r1, #17
 80049a6:	430a      	orrs	r2, r1
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1479
}
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	40021000 	.word	0x40021000

080049b4 <RCC_GetITStatus>:
RCC_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1495
  *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt 
  *             @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	1c02      	adds	r2, r0, #0
 80049bc:	1dfb      	adds	r3, r7, #7
 80049be:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1496
  ITStatus bitstatus = RESET;
 80049c0:	1c3b      	adds	r3, r7, #0
 80049c2:	330f      	adds	r3, #15
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1502
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <RCC_GetITStatus+0x40>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	1dfa      	adds	r2, r7, #7
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	4013      	ands	r3, r2
 80049d2:	d004      	beq.n	80049de <RCC_GetITStatus+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1504
  {
    bitstatus = SET;
 80049d4:	1c3b      	adds	r3, r7, #0
 80049d6:	330f      	adds	r3, #15
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	e003      	b.n	80049e6 <RCC_GetITStatus+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1508
  }
  else
  {
    bitstatus = RESET;
 80049de:	1c3b      	adds	r3, r7, #0
 80049e0:	330f      	adds	r3, #15
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1511
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80049e6:	1c3b      	adds	r3, r7, #0
 80049e8:	330f      	adds	r3, #15
 80049ea:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1512
}
 80049ec:	1c18      	adds	r0, r3, #0
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b004      	add	sp, #16
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40021000 	.word	0x40021000

080049f8 <RCC_ClearITPendingBit>:
RCC_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1528
  *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt  
  *             @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	1c02      	adds	r2, r0, #0
 8004a00:	1dfb      	adds	r3, r7, #7
 8004a02:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1534
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <RCC_ClearITPendingBit+0x1c>)
 8004a06:	1dfa      	adds	r2, r7, #7
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c:1535
}
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	4002100a 	.word	0x4002100a

08004a18 <RTC_DeInit>:
RTC_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:310
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:311
  __IO uint32_t wutcounter = 0x00;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	603b      	str	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:312
  ErrorStatus status = ERROR;
 8004a22:	1dfb      	adds	r3, r7, #7
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:315
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a2a:	22ca      	movs	r2, #202	; 0xca
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:316
  RTC->WPR = 0x53;
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a30:	2253      	movs	r2, #83	; 0x53
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:319

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8004a34:	f000 f8b0 	bl	8004b98 <RTC_EnterInitMode>
 8004a38:	1c03      	adds	r3, r0, #0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <RTC_DeInit+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:321
  {
    status = ERROR;
 8004a3e:	1dfb      	adds	r3, r7, #7
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e02b      	b.n	8004a9e <RTC_DeInit+0x86>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:326
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR        = (uint32_t)0x00000000;
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:327
    RTC->DR        = (uint32_t)0x00002101;
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a4e:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <RTC_DeInit+0x9c>)
 8004a50:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:328
    RTC->CR        &= (uint32_t)0x00000000;
 8004a52:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:329
    RTC->PRER      = (uint32_t)0x007F00FF;
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <RTC_DeInit+0xa0>)
 8004a60:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:330
    RTC->ALRMAR    = (uint32_t)0x00000000;
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	61da      	str	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:331
    RTC->SHIFTR    = (uint32_t)0x00000000;
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	62da      	str	r2, [r3, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:332
    RTC->CAL       = (uint32_t)0x00000000;
 8004a6e:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:333
    RTC->ALRMASSR  = (uint32_t)0x00000000;
 8004a74:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:336

    /* Reset ISR register and exit initialization mode */
    RTC->ISR = (uint32_t)0x00000000;
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:339
    
    /* Reset Tamper and alternate functions configuration register */
    RTC->TAFCR = 0x00000000;
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <RTC_DeInit+0x98>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:342
      
    /* Wait till the RTC RSF flag is set */
    if (RTC_WaitForSynchro() == ERROR)
 8004a86:	f000 f8d3 	bl	8004c30 <RTC_WaitForSynchro>
 8004a8a:	1c03      	adds	r3, r0, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d103      	bne.n	8004a98 <RTC_DeInit+0x80>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:344
    {
      status = ERROR;
 8004a90:	1dfb      	adds	r3, r7, #7
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e002      	b.n	8004a9e <RTC_DeInit+0x86>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:348
    }
    else
    {
      status = SUCCESS;
 8004a98:	1dfb      	adds	r3, r7, #7
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:354
    }

  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8004a9e:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <RTC_DeInit+0x98>)
 8004aa0:	22ff      	movs	r2, #255	; 0xff
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:356

  return status;
 8004aa4:	1dfb      	adds	r3, r7, #7
 8004aa6:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:357
}
 8004aa8:	1c18      	adds	r0, r3, #0
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b002      	add	sp, #8
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40002800 	.word	0x40002800
 8004ab4:	00002101 	.word	0x00002101
 8004ab8:	007f00ff 	.word	0x007f00ff

08004abc <RTC_Init>:
RTC_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:371
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:372
  ErrorStatus status = ERROR;
 8004ac4:	1c3b      	adds	r3, r7, #0
 8004ac6:	330f      	adds	r3, #15
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:380
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004acc:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <RTC_Init+0x84>)
 8004ace:	22ca      	movs	r2, #202	; 0xca
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:381
  RTC->WPR = 0x53;
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <RTC_Init+0x84>)
 8004ad4:	2253      	movs	r2, #83	; 0x53
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:384

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8004ad8:	f000 f85e 	bl	8004b98 <RTC_EnterInitMode>
 8004adc:	1c03      	adds	r3, r0, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <RTC_Init+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:386
  {
    status = ERROR;
 8004ae2:	1c3b      	adds	r3, r7, #0
 8004ae4:	330f      	adds	r3, #15
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	e01e      	b.n	8004b2a <RTC_Init+0x6e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:391
  }
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <RTC_Init+0x84>)
 8004aee:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <RTC_Init+0x84>)
 8004af0:	6892      	ldr	r2, [r2, #8]
 8004af2:	2140      	movs	r1, #64	; 0x40
 8004af4:	438a      	bics	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:393
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <RTC_Init+0x84>)
 8004afa:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <RTC_Init+0x84>)
 8004afc:	6891      	ldr	r1, [r2, #8]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:396
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8004b06:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <RTC_Init+0x84>)
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6892      	ldr	r2, [r2, #8]
 8004b0c:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:397
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <RTC_Init+0x84>)
 8004b10:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <RTC_Init+0x84>)
 8004b12:	6911      	ldr	r1, [r2, #16]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6852      	ldr	r2, [r2, #4]
 8004b18:	0412      	lsls	r2, r2, #16
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:400

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8004b1e:	f000 f87b 	bl	8004c18 <RTC_ExitInitMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:402

    status = SUCCESS;
 8004b22:	1c3b      	adds	r3, r7, #0
 8004b24:	330f      	adds	r3, #15
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:405
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <RTC_Init+0x84>)
 8004b2c:	22ff      	movs	r2, #255	; 0xff
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:407

  return status;
 8004b30:	1c3b      	adds	r3, r7, #0
 8004b32:	330f      	adds	r3, #15
 8004b34:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:408
}
 8004b36:	1c18      	adds	r0, r3, #0
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b004      	add	sp, #16
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	40002800 	.word	0x40002800

08004b44 <RTC_StructInit>:
RTC_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:417
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:419
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:422

  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	227f      	movs	r2, #127	; 0x7f
 8004b56:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:425

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	22ff      	movs	r2, #255	; 0xff
 8004b5c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:426
}
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <RTC_WriteProtectionCmd>:
RTC_WriteProtectionCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:439
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	1c02      	adds	r2, r0, #0
 8004b6c:	1dfb      	adds	r3, r7, #7
 8004b6e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:443
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004b70:	1dfb      	adds	r3, r7, #7
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <RTC_WriteProtectionCmd+0x1c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:446
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <RTC_WriteProtectionCmd+0x30>)
 8004b7a:	22ff      	movs	r2, #255	; 0xff
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b7e:	e005      	b.n	8004b8c <RTC_WriteProtectionCmd+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:451
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <RTC_WriteProtectionCmd+0x30>)
 8004b82:	22ca      	movs	r2, #202	; 0xca
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:452
    RTC->WPR = 0x53;
 8004b86:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <RTC_WriteProtectionCmd+0x30>)
 8004b88:	2253      	movs	r2, #83	; 0x53
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:454
  }
}
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b002      	add	sp, #8
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	40002800 	.word	0x40002800

08004b98 <RTC_EnterInitMode>:
RTC_EnterInitMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:466
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:467
  __IO uint32_t initcounter = 0x00;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:468
  ErrorStatus status = ERROR;
 8004ba2:	1c3b      	adds	r3, r7, #0
 8004ba4:	330f      	adds	r3, #15
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:469
  uint32_t initstatus = 0x00;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:472

  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004bae:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <RTC_EnterInitMode+0x7c>)
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	2340      	movs	r3, #64	; 0x40
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d122      	bne.n	8004bfe <RTC_EnterInitMode+0x66>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:475
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8004bb8:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <RTC_EnterInitMode+0x7c>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	4252      	negs	r2, r2
 8004bbe:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:480 (discriminator 1)
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8004bc0:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <RTC_EnterInitMode+0x7c>)
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	2340      	movs	r3, #64	; 0x40
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:481 (discriminator 1)
      initcounter++;  
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:482 (discriminator 1)
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	01db      	lsls	r3, r3, #7
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d002      	beq.n	8004be0 <RTC_EnterInitMode+0x48>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ef      	beq.n	8004bc0 <RTC_EnterInitMode+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:484
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <RTC_EnterInitMode+0x7c>)
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	2340      	movs	r3, #64	; 0x40
 8004be6:	4013      	ands	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <RTC_EnterInitMode+0x5c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:486
    {
      status = SUCCESS;
 8004bea:	1c3b      	adds	r3, r7, #0
 8004bec:	330f      	adds	r3, #15
 8004bee:	2201      	movs	r2, #1
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e008      	b.n	8004c06 <RTC_EnterInitMode+0x6e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:490
    }
    else
    {
      status = ERROR;
 8004bf4:	1c3b      	adds	r3, r7, #0
 8004bf6:	330f      	adds	r3, #15
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e003      	b.n	8004c06 <RTC_EnterInitMode+0x6e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:495
    }
  }
  else
  {
    status = SUCCESS;
 8004bfe:	1c3b      	adds	r3, r7, #0
 8004c00:	330f      	adds	r3, #15
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:498
  }

  return (status);
 8004c06:	1c3b      	adds	r3, r7, #0
 8004c08:	330f      	adds	r3, #15
 8004c0a:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:499
}
 8004c0c:	1c18      	adds	r0, r3, #0
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b004      	add	sp, #16
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40002800 	.word	0x40002800

08004c18 <RTC_ExitInitMode>:
RTC_ExitInitMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:511
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:513
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c1c:	4b03      	ldr	r3, [pc, #12]	; (8004c2c <RTC_ExitInitMode+0x14>)
 8004c1e:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <RTC_ExitInitMode+0x14>)
 8004c20:	68d2      	ldr	r2, [r2, #12]
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	438a      	bics	r2, r1
 8004c26:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:514
}
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40002800 	.word	0x40002800

08004c30 <RTC_WaitForSynchro>:
RTC_WaitForSynchro():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:533
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:534
  __IO uint32_t synchrocounter = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:535
  ErrorStatus status = ERROR;
 8004c3a:	1c3b      	adds	r3, r7, #0
 8004c3c:	330f      	adds	r3, #15
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:536
  uint32_t synchrostatus = 0x00;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:538

  if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 8004c46:	4b1f      	ldr	r3, [pc, #124]	; (8004cc4 <RTC_WaitForSynchro+0x94>)
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <RTC_WaitForSynchro+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:541
  {
    /* Bypass shadow mode */
    status = SUCCESS;
 8004c50:	1c3b      	adds	r3, r7, #0
 8004c52:	330f      	adds	r3, #15
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	e02c      	b.n	8004cb4 <RTC_WaitForSynchro+0x84>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:546
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <RTC_WaitForSynchro+0x94>)
 8004c5c:	22ca      	movs	r2, #202	; 0xca
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:547
    RTC->WPR = 0x53;
 8004c60:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <RTC_WaitForSynchro+0x94>)
 8004c62:	2253      	movs	r2, #83	; 0x53
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:550

    /* Clear RSF flag */
    RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c66:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <RTC_WaitForSynchro+0x94>)
 8004c68:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <RTC_WaitForSynchro+0x94>)
 8004c6a:	68d2      	ldr	r2, [r2, #12]
 8004c6c:	21a0      	movs	r1, #160	; 0xa0
 8004c6e:	438a      	bics	r2, r1
 8004c70:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:555 (discriminator 1)

    /* Wait the registers to be synchronised */
    do
    {
      synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8004c72:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <RTC_WaitForSynchro+0x94>)
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	2320      	movs	r3, #32
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:556 (discriminator 1)
      synchrocounter++;  
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:557 (discriminator 1)
    } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d002      	beq.n	8004c92 <RTC_WaitForSynchro+0x62>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ef      	beq.n	8004c72 <RTC_WaitForSynchro+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:559

    if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <RTC_WaitForSynchro+0x94>)
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	2320      	movs	r3, #32
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d004      	beq.n	8004ca6 <RTC_WaitForSynchro+0x76>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:561
    {
      status = SUCCESS;
 8004c9c:	1c3b      	adds	r3, r7, #0
 8004c9e:	330f      	adds	r3, #15
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e003      	b.n	8004cae <RTC_WaitForSynchro+0x7e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:565
    }
    else
    {
      status = ERROR;
 8004ca6:	1c3b      	adds	r3, r7, #0
 8004ca8:	330f      	adds	r3, #15
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:569
    }

    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <RTC_WaitForSynchro+0x94>)
 8004cb0:	22ff      	movs	r2, #255	; 0xff
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:572
  }

  return (status);
 8004cb4:	1c3b      	adds	r3, r7, #0
 8004cb6:	330f      	adds	r3, #15
 8004cb8:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:573
}
 8004cba:	1c18      	adds	r0, r3, #0
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b004      	add	sp, #16
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	40002800 	.word	0x40002800

08004cc8 <RTC_RefClockCmd>:
RTC_RefClockCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:584
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	1c02      	adds	r2, r0, #0
 8004cd0:	1dfb      	adds	r3, r7, #7
 8004cd2:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:585
  ErrorStatus status = ERROR;
 8004cd4:	1c3b      	adds	r3, r7, #0
 8004cd6:	330f      	adds	r3, #15
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:591

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004cdc:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <RTC_RefClockCmd+0x78>)
 8004cde:	22ca      	movs	r2, #202	; 0xca
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:592
  RTC->WPR = 0x53;
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <RTC_RefClockCmd+0x78>)
 8004ce4:	2253      	movs	r2, #83	; 0x53
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:595

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8004ce8:	f7ff ff56 	bl	8004b98 <RTC_EnterInitMode>
 8004cec:	1c03      	adds	r3, r0, #0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <RTC_RefClockCmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:597
  {
    status = ERROR;
 8004cf2:	1c3b      	adds	r3, r7, #0
 8004cf4:	330f      	adds	r3, #15
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e016      	b.n	8004d2a <RTC_RefClockCmd+0x62>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:601
  }
  else
  {
    if (NewState != DISABLE)
 8004cfc:	1dfb      	adds	r3, r7, #7
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d006      	beq.n	8004d12 <RTC_RefClockCmd+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:604
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <RTC_RefClockCmd+0x78>)
 8004d06:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <RTC_RefClockCmd+0x78>)
 8004d08:	6892      	ldr	r2, [r2, #8]
 8004d0a:	2110      	movs	r1, #16
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	e005      	b.n	8004d1e <RTC_RefClockCmd+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:609
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <RTC_RefClockCmd+0x78>)
 8004d14:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <RTC_RefClockCmd+0x78>)
 8004d16:	6892      	ldr	r2, [r2, #8]
 8004d18:	2110      	movs	r1, #16
 8004d1a:	438a      	bics	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:612
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8004d1e:	f7ff ff7b 	bl	8004c18 <RTC_ExitInitMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:614

    status = SUCCESS;
 8004d22:	1c3b      	adds	r3, r7, #0
 8004d24:	330f      	adds	r3, #15
 8004d26:	2201      	movs	r2, #1
 8004d28:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:618
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <RTC_RefClockCmd+0x78>)
 8004d2c:	22ff      	movs	r2, #255	; 0xff
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:620

  return status;
 8004d30:	1c3b      	adds	r3, r7, #0
 8004d32:	330f      	adds	r3, #15
 8004d34:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:621
}
 8004d36:	1c18      	adds	r0, r3, #0
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b004      	add	sp, #16
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	40002800 	.word	0x40002800

08004d44 <RTC_BypassShadowCmd>:
RTC_BypassShadowCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:632
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	1c02      	adds	r2, r0, #0
 8004d4c:	1dfb      	adds	r3, r7, #7
 8004d4e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:637
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004d50:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <RTC_BypassShadowCmd+0x48>)
 8004d52:	22ca      	movs	r2, #202	; 0xca
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:638
  RTC->WPR = 0x53;
 8004d56:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <RTC_BypassShadowCmd+0x48>)
 8004d58:	2253      	movs	r2, #83	; 0x53
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:640
  
  if (NewState != DISABLE)
 8004d5c:	1dfb      	adds	r3, r7, #7
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d006      	beq.n	8004d72 <RTC_BypassShadowCmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:643
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8004d64:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <RTC_BypassShadowCmd+0x48>)
 8004d66:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <RTC_BypassShadowCmd+0x48>)
 8004d68:	6892      	ldr	r2, [r2, #8]
 8004d6a:	2120      	movs	r1, #32
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	e005      	b.n	8004d7e <RTC_BypassShadowCmd+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:648
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <RTC_BypassShadowCmd+0x48>)
 8004d74:	4a05      	ldr	r2, [pc, #20]	; (8004d8c <RTC_BypassShadowCmd+0x48>)
 8004d76:	6891      	ldr	r1, [r2, #8]
 8004d78:	22df      	movs	r2, #223	; 0xdf
 8004d7a:	400a      	ands	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:652
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004d7e:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <RTC_BypassShadowCmd+0x48>)
 8004d80:	22ff      	movs	r2, #255	; 0xff
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:653
}
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	40002800 	.word	0x40002800

08004d90 <RTC_SetTime>:
RTC_SetTime():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:686
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:687
  uint32_t tmpreg = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:688
  ErrorStatus status = ERROR;
 8004d9e:	1c3b      	adds	r3, r7, #0
 8004da0:	330b      	adds	r3, #11
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:693

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d108      	bne.n	8004dbe <RTC_SetTime+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:695
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004dac:	4b40      	ldr	r3, [pc, #256]	; (8004eb0 <RTC_SetTime+0x120>)
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	2340      	movs	r3, #64	; 0x40
 8004db2:	4013      	ands	r3, r2
 8004db4:	d113      	bne.n	8004dde <RTC_SetTime+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:702
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    }
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2200      	movs	r2, #0
 8004dba:	70da      	strb	r2, [r3, #3]
 8004dbc:	e00f      	b.n	8004dde <RTC_SetTime+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:710
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004dbe:	4b3c      	ldr	r3, [pc, #240]	; (8004eb0 <RTC_SetTime+0x120>)
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	2340      	movs	r3, #64	; 0x40
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <RTC_SetTime+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:712
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	1c18      	adds	r0, r3, #0
 8004dce:	f000 ff9d 	bl	8005d0c <RTC_Bcd2ToByte>
 8004dd2:	1c03      	adds	r3, r0, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e002      	b.n	8004dde <RTC_SetTime+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:718
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:726
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00f      	beq.n	8004e04 <RTC_SetTime+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:728
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	041a      	lsls	r2, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:729
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	021b      	lsls	r3, r3, #8
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:728
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004df0:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:730
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	789b      	ldrb	r3, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:729
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8004df6:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:731
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	78db      	ldrb	r3, [r3, #3]
 8004dfc:	041b      	lsls	r3, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:728
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e01b      	b.n	8004e3c <RTC_SetTime+0xac>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:735
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	1c18      	adds	r0, r3, #0
 8004e0a:	f000 ff57 	bl	8005cbc <RTC_ByteToBcd2>
 8004e0e:	1c03      	adds	r3, r0, #0
 8004e10:	041c      	lsls	r4, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:736
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	785b      	ldrb	r3, [r3, #1]
 8004e16:	1c18      	adds	r0, r3, #0
 8004e18:	f000 ff50 	bl	8005cbc <RTC_ByteToBcd2>
 8004e1c:	1c03      	adds	r3, r0, #0
 8004e1e:	021b      	lsls	r3, r3, #8
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:735
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004e20:	431c      	orrs	r4, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:737
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	789b      	ldrb	r3, [r3, #2]
 8004e26:	1c18      	adds	r0, r3, #0
 8004e28:	f000 ff48 	bl	8005cbc <RTC_ByteToBcd2>
 8004e2c:	1c03      	adds	r3, r0, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:736
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8004e2e:	1c22      	adds	r2, r4, #0
 8004e30:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:738
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	78db      	ldrb	r3, [r3, #3]
 8004e36:	041b      	lsls	r3, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:735
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:742
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004e3c:	4b1c      	ldr	r3, [pc, #112]	; (8004eb0 <RTC_SetTime+0x120>)
 8004e3e:	22ca      	movs	r2, #202	; 0xca
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:743
  RTC->WPR = 0x53;
 8004e42:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <RTC_SetTime+0x120>)
 8004e44:	2253      	movs	r2, #83	; 0x53
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:746

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8004e48:	f7ff fea6 	bl	8004b98 <RTC_EnterInitMode>
 8004e4c:	1c03      	adds	r3, r0, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <RTC_SetTime+0xcc>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:748
  {
    status = ERROR;
 8004e52:	1c3b      	adds	r3, r7, #0
 8004e54:	330b      	adds	r3, #11
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	e01e      	b.n	8004e9a <RTC_SetTime+0x10a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:753
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <RTC_SetTime+0x120>)
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <RTC_SetTime+0x124>)
 8004e62:	400a      	ands	r2, r1
 8004e64:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:756

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8004e66:	f7ff fed7 	bl	8004c18 <RTC_ExitInitMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:759

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <RTC_SetTime+0x120>)
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	2320      	movs	r3, #32
 8004e70:	4013      	ands	r3, r2
 8004e72:	d10e      	bne.n	8004e92 <RTC_SetTime+0x102>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:761
    {
      if (RTC_WaitForSynchro() == ERROR)
 8004e74:	f7ff fedc 	bl	8004c30 <RTC_WaitForSynchro>
 8004e78:	1c03      	adds	r3, r0, #0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <RTC_SetTime+0xf8>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:763
      {
        status = ERROR;
 8004e7e:	1c3b      	adds	r3, r7, #0
 8004e80:	330b      	adds	r3, #11
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e008      	b.n	8004e9a <RTC_SetTime+0x10a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:767
      }
      else
      {
        status = SUCCESS;
 8004e88:	1c3b      	adds	r3, r7, #0
 8004e8a:	330b      	adds	r3, #11
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e003      	b.n	8004e9a <RTC_SetTime+0x10a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:772
      }
    }
    else
    {
      status = SUCCESS;
 8004e92:	1c3b      	adds	r3, r7, #0
 8004e94:	330b      	adds	r3, #11
 8004e96:	2201      	movs	r2, #1
 8004e98:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:777
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <RTC_SetTime+0x120>)
 8004e9c:	22ff      	movs	r2, #255	; 0xff
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:779
    
  return status;
 8004ea0:	1c3b      	adds	r3, r7, #0
 8004ea2:	330b      	adds	r3, #11
 8004ea4:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:780
}
 8004ea6:	1c18      	adds	r0, r3, #0
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b005      	add	sp, #20
 8004eac:	bd90      	pop	{r4, r7, pc}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	40002800 	.word	0x40002800
 8004eb4:	007f7f7f 	.word	0x007f7f7f

08004eb8 <RTC_TimeStructInit>:
RTC_TimeStructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:790
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:792
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:793
  RTC_TimeStruct->RTC_Hours = 0;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:794
  RTC_TimeStruct->RTC_Minutes = 0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:795
  RTC_TimeStruct->RTC_Seconds = 0; 
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:796
}
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b002      	add	sp, #8
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)

08004ee0 <RTC_GetTime>:
RTC_GetTime():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:809
  * @param RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:810
  uint32_t tmpreg = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:816

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8004eee:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <RTC_GetTime+0x98>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <RTC_GetTime+0x9c>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:819
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	23fc      	movs	r3, #252	; 0xfc
 8004efc:	039b      	lsls	r3, r3, #14
 8004efe:	4013      	ands	r3, r2
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:820
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	23fe      	movs	r3, #254	; 0xfe
 8004f0c:	01db      	lsls	r3, r3, #7
 8004f0e:	4013      	ands	r3, r2
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:821
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	237f      	movs	r3, #127	; 0x7f
 8004f1e:	4013      	ands	r3, r2
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:822
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	03db      	lsls	r3, r3, #15
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	0c1b      	lsrs	r3, r3, #16
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:825

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d11a      	bne.n	8004f72 <RTC_GetTime+0x92>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:828
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	1c18      	adds	r0, r3, #0
 8004f42:	f000 fee3 	bl	8005d0c <RTC_Bcd2ToByte>
 8004f46:	1c03      	adds	r3, r0, #0
 8004f48:	1c1a      	adds	r2, r3, #0
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:829
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	1c18      	adds	r0, r3, #0
 8004f54:	f000 feda 	bl	8005d0c <RTC_Bcd2ToByte>
 8004f58:	1c03      	adds	r3, r0, #0
 8004f5a:	1c1a      	adds	r2, r3, #0
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:830
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	789b      	ldrb	r3, [r3, #2]
 8004f64:	1c18      	adds	r0, r3, #0
 8004f66:	f000 fed1 	bl	8005d0c <RTC_Bcd2ToByte>
 8004f6a:	1c03      	adds	r3, r0, #0
 8004f6c:	1c1a      	adds	r2, r3, #0
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:832
  }
}
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b004      	add	sp, #16
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40002800 	.word	0x40002800
 8004f7c:	007f7f7f 	.word	0x007f7f7f

08004f80 <RTC_GetSubSecond>:
RTC_GetSubSecond():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:842
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Subseconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:843
  uint32_t tmpreg = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:846
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <RTC_GetSubSecond+0x20>)
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:849
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 8004f90:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <RTC_GetSubSecond+0x20>)
 8004f92:	685b      	ldr	r3, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:851
  
  return (tmpreg);
 8004f94:	687b      	ldr	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:852
}
 8004f96:	1c18      	adds	r0, r3, #0
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	40002800 	.word	0x40002800

08004fa4 <RTC_SetDate>:
RTC_SetDate():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:867
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:868
  uint32_t tmpreg = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:869
  ErrorStatus status = ERROR;
 8004fb2:	1c3b      	adds	r3, r7, #0
 8004fb4:	330b      	adds	r3, #11
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:874
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10e      	bne.n	8004fde <RTC_SetDate+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:874 (discriminator 1)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	1c1a      	adds	r2, r3, #0
 8004fc6:	2310      	movs	r3, #16
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d008      	beq.n	8004fde <RTC_SetDate+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:876
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	4393      	bics	r3, r2
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	330a      	adds	r3, #10
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:878
  }  
  if (RTC_Format == RTC_Format_BIN)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <RTC_SetDate+0x5c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:887
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	1c18      	adds	r0, r3, #0
 8004fea:	f000 fe8f 	bl	8005d0c <RTC_Bcd2ToByte>
 8004fee:	1c03      	adds	r3, r0, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:889
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	789b      	ldrb	r3, [r3, #2]
 8004ff6:	1c18      	adds	r0, r3, #0
 8004ff8:	f000 fe88 	bl	8005d0c <RTC_Bcd2ToByte>
 8004ffc:	1c03      	adds	r3, r0, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:895
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00f      	beq.n	8005026 <RTC_SetDate+0x82>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:897
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	78db      	ldrb	r3, [r3, #3]
 800500a:	041a      	lsls	r2, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:898
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	021b      	lsls	r3, r3, #8
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:897
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8005012:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:899
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	789b      	ldrb	r3, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:898

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8005018:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:900
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	035b      	lsls	r3, r3, #13
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:897
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e01b      	b.n	800505e <RTC_SetDate+0xba>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:904
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	78db      	ldrb	r3, [r3, #3]
 800502a:	1c18      	adds	r0, r3, #0
 800502c:	f000 fe46 	bl	8005cbc <RTC_ByteToBcd2>
 8005030:	1c03      	adds	r3, r0, #0
 8005032:	041c      	lsls	r4, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:905
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	1c18      	adds	r0, r3, #0
 800503a:	f000 fe3f 	bl	8005cbc <RTC_ByteToBcd2>
 800503e:	1c03      	adds	r3, r0, #0
 8005040:	021b      	lsls	r3, r3, #8
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:904
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8005042:	431c      	orrs	r4, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:906
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	789b      	ldrb	r3, [r3, #2]
 8005048:	1c18      	adds	r0, r3, #0
 800504a:	f000 fe37 	bl	8005cbc <RTC_ByteToBcd2>
 800504e:	1c03      	adds	r3, r0, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:905
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8005050:	1c22      	adds	r2, r4, #0
 8005052:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:907
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	035b      	lsls	r3, r3, #13
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:904
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:911
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800505e:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <RTC_SetDate+0x12c>)
 8005060:	22ca      	movs	r2, #202	; 0xca
 8005062:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:912
  RTC->WPR = 0x53;
 8005064:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <RTC_SetDate+0x12c>)
 8005066:	2253      	movs	r2, #83	; 0x53
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:915

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800506a:	f7ff fd95 	bl	8004b98 <RTC_EnterInitMode>
 800506e:	1c03      	adds	r3, r0, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <RTC_SetDate+0xda>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:917
  {
    status = ERROR;
 8005074:	1c3b      	adds	r3, r7, #0
 8005076:	330b      	adds	r3, #11
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	e01e      	b.n	80050bc <RTC_SetDate+0x118>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:922
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800507e:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <RTC_SetDate+0x12c>)
 8005080:	68f9      	ldr	r1, [r7, #12]
 8005082:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <RTC_SetDate+0x130>)
 8005084:	400a      	ands	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:925

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8005088:	f7ff fdc6 	bl	8004c18 <RTC_ExitInitMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:928

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <RTC_SetDate+0x12c>)
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	2320      	movs	r3, #32
 8005092:	4013      	ands	r3, r2
 8005094:	d10e      	bne.n	80050b4 <RTC_SetDate+0x110>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:930
    {
      if (RTC_WaitForSynchro() == ERROR)
 8005096:	f7ff fdcb 	bl	8004c30 <RTC_WaitForSynchro>
 800509a:	1c03      	adds	r3, r0, #0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <RTC_SetDate+0x106>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:932
      {
        status = ERROR;
 80050a0:	1c3b      	adds	r3, r7, #0
 80050a2:	330b      	adds	r3, #11
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e008      	b.n	80050bc <RTC_SetDate+0x118>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:936
      }
      else
      {
        status = SUCCESS;
 80050aa:	1c3b      	adds	r3, r7, #0
 80050ac:	330b      	adds	r3, #11
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	e003      	b.n	80050bc <RTC_SetDate+0x118>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:941
      }
    }
    else
    {
      status = SUCCESS;
 80050b4:	1c3b      	adds	r3, r7, #0
 80050b6:	330b      	adds	r3, #11
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:945
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <RTC_SetDate+0x12c>)
 80050be:	22ff      	movs	r2, #255	; 0xff
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:947
  
  return status;
 80050c2:	1c3b      	adds	r3, r7, #0
 80050c4:	330b      	adds	r3, #11
 80050c6:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:948
}
 80050c8:	1c18      	adds	r0, r3, #0
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b005      	add	sp, #20
 80050ce:	bd90      	pop	{r4, r7, pc}
 80050d0:	40002800 	.word	0x40002800
 80050d4:	00ffff3f 	.word	0x00ffff3f

080050d8 <RTC_DateStructInit>:
RTC_DateStructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:958
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:960
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:961
  RTC_DateStruct->RTC_Date = 1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:962
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:963
  RTC_DateStruct->RTC_Year = 0;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:964
}
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b002      	add	sp, #8
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)

08005100 <RTC_GetDate>:
RTC_GetDate():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:977
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:978
  uint32_t tmpreg = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:984

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800510e:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <RTC_GetDate+0xa0>)
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <RTC_GetDate+0xa4>)
 8005114:	4013      	ands	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:987

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	23ff      	movs	r3, #255	; 0xff
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	4013      	ands	r3, r2
 8005120:	0c1b      	lsrs	r3, r3, #16
 8005122:	b2da      	uxtb	r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:988
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	23f8      	movs	r3, #248	; 0xf8
 800512c:	015b      	lsls	r3, r3, #5
 800512e:	4013      	ands	r3, r2
 8005130:	0a1b      	lsrs	r3, r3, #8
 8005132:	b2da      	uxtb	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:989
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	b2da      	uxtb	r2, r3
 800513c:	233f      	movs	r3, #63	; 0x3f
 800513e:	4013      	ands	r3, r2
 8005140:	b2da      	uxtb	r2, r3
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:990
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	23e0      	movs	r3, #224	; 0xe0
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	4013      	ands	r3, r2
 800514e:	0b5b      	lsrs	r3, r3, #13
 8005150:	b2da      	uxtb	r2, r3
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:993

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d11e      	bne.n	800519a <RTC_GetDate+0x9a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:996
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	78db      	ldrb	r3, [r3, #3]
 8005160:	1c18      	adds	r0, r3, #0
 8005162:	f000 fdd3 	bl	8005d0c <RTC_Bcd2ToByte>
 8005166:	1c03      	adds	r3, r0, #0
 8005168:	1c1a      	adds	r2, r3, #0
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:997
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	1c18      	adds	r0, r3, #0
 8005174:	f000 fdca 	bl	8005d0c <RTC_Bcd2ToByte>
 8005178:	1c03      	adds	r3, r0, #0
 800517a:	1c1a      	adds	r2, r3, #0
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:998
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	789b      	ldrb	r3, [r3, #2]
 8005184:	1c18      	adds	r0, r3, #0
 8005186:	f000 fdc1 	bl	8005d0c <RTC_Bcd2ToByte>
 800518a:	1c03      	adds	r3, r0, #0
 800518c:	1c1a      	adds	r2, r3, #0
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:999
    RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1001
  }
}
 800519a:	46bd      	mov	sp, r7
 800519c:	b004      	add	sp, #16
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40002800 	.word	0x40002800
 80051a4:	00ffff3f 	.word	0x00ffff3f

080051a8 <RTC_SetAlarm>:
RTC_SetAlarm():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1037
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1038
  uint32_t tmpreg = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1046
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d108      	bne.n	80051d0 <RTC_SetAlarm+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1048
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051be:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <RTC_SetAlarm+0x120>)
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	2340      	movs	r3, #64	; 0x40
 80051c4:	4013      	ands	r3, r2
 80051c6:	d126      	bne.n	8005216 <RTC_SetAlarm+0x6e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1055
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	70da      	strb	r2, [r3, #3]
 80051ce:	e022      	b.n	8005216 <RTC_SetAlarm+0x6e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1072
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051d0:	4b3d      	ldr	r3, [pc, #244]	; (80052c8 <RTC_SetAlarm+0x120>)
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	2340      	movs	r3, #64	; 0x40
 80051d6:	4013      	ands	r3, r2
 80051d8:	d007      	beq.n	80051ea <RTC_SetAlarm+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1074
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	1c18      	adds	r0, r3, #0
 80051e0:	f000 fd94 	bl	8005d0c <RTC_Bcd2ToByte>
 80051e4:	1c03      	adds	r3, r0, #0
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e002      	b.n	80051f0 <RTC_SetAlarm+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1080
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1087
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d107      	bne.n	8005208 <RTC_SetAlarm+0x60>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1089
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	7b1b      	ldrb	r3, [r3, #12]
 80051fc:	1c18      	adds	r0, r3, #0
 80051fe:	f000 fd85 	bl	8005d0c <RTC_Bcd2ToByte>
 8005202:	1c03      	adds	r3, r0, #0
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	e006      	b.n	8005216 <RTC_SetAlarm+0x6e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1094
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	7b1b      	ldrb	r3, [r3, #12]
 800520c:	1c18      	adds	r0, r3, #0
 800520e:	f000 fd7d 	bl	8005d0c <RTC_Bcd2ToByte>
 8005212:	1c03      	adds	r3, r0, #0
 8005214:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1100
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d019      	beq.n	8005250 <RTC_SetAlarm+0xa8>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1102
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	041a      	lsls	r2, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1103
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	021b      	lsls	r3, r3, #8
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1102
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8005228:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1104
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	789b      	ldrb	r3, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1103

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800522e:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1105
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	78db      	ldrb	r3, [r3, #3]
 8005234:	041b      	lsls	r3, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1104
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8005236:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1106
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	7b1b      	ldrb	r3, [r3, #12]
 800523c:	061b      	lsls	r3, r3, #24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1105
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800523e:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1107
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1106
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8005244:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1108
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1102
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e02b      	b.n	80052a8 <RTC_SetAlarm+0x100>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1112
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	1c18      	adds	r0, r3, #0
 8005256:	f000 fd31 	bl	8005cbc <RTC_ByteToBcd2>
 800525a:	1c03      	adds	r3, r0, #0
 800525c:	041c      	lsls	r4, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1113
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	785b      	ldrb	r3, [r3, #1]
 8005262:	1c18      	adds	r0, r3, #0
 8005264:	f000 fd2a 	bl	8005cbc <RTC_ByteToBcd2>
 8005268:	1c03      	adds	r3, r0, #0
 800526a:	021b      	lsls	r3, r3, #8
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1112
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800526c:	431c      	orrs	r4, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1114
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	789b      	ldrb	r3, [r3, #2]
 8005272:	1c18      	adds	r0, r3, #0
 8005274:	f000 fd22 	bl	8005cbc <RTC_ByteToBcd2>
 8005278:	1c03      	adds	r3, r0, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1113
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800527a:	1c22      	adds	r2, r4, #0
 800527c:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1115
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	78db      	ldrb	r3, [r3, #3]
 8005282:	041b      	lsls	r3, r3, #16
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1114
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8005284:	1c14      	adds	r4, r2, #0
 8005286:	431c      	orrs	r4, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1116
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7b1b      	ldrb	r3, [r3, #12]
 800528c:	1c18      	adds	r0, r3, #0
 800528e:	f000 fd15 	bl	8005cbc <RTC_ByteToBcd2>
 8005292:	1c03      	adds	r3, r0, #0
 8005294:	061b      	lsls	r3, r3, #24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1115
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8005296:	1c22      	adds	r2, r4, #0
 8005298:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1117
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1116
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800529e:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1118
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1112
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1122
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80052a8:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <RTC_SetAlarm+0x120>)
 80052aa:	22ca      	movs	r2, #202	; 0xca
 80052ac:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1123
  RTC->WPR = 0x53;
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <RTC_SetAlarm+0x120>)
 80052b0:	2253      	movs	r2, #83	; 0x53
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1126

  /* Configure the Alarm register */
  RTC->ALRMAR = (uint32_t)tmpreg;
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <RTC_SetAlarm+0x120>)
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	61da      	str	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1129

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80052ba:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <RTC_SetAlarm+0x120>)
 80052bc:	22ff      	movs	r2, #255	; 0xff
 80052be:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1130
}
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b007      	add	sp, #28
 80052c4:	bd90      	pop	{r4, r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	40002800 	.word	0x40002800

080052cc <RTC_AlarmStructInit>:
RTC_AlarmStructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1141
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1143
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1144
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1145
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1146
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1149

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1150
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	731a      	strb	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1153

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1154
}
 80052fe:	46bd      	mov	sp, r7
 8005300:	b002      	add	sp, #8
 8005302:	bd80      	pop	{r7, pc}

08005304 <RTC_GetAlarm>:
RTC_GetAlarm():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1170
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1171
  uint32_t tmpreg = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1178
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMAR register */
  tmpreg = (uint32_t)(RTC->ALRMAR);
 8005314:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <RTC_GetAlarm+0xd0>)
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1181

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	23fc      	movs	r3, #252	; 0xfc
 800531e:	039b      	lsls	r3, r3, #14
 8005320:	4013      	ands	r3, r2
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	b2da      	uxtb	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1183
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	23fe      	movs	r3, #254	; 0xfe
 800532e:	01db      	lsls	r3, r3, #7
 8005330:	4013      	ands	r3, r2
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1185
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	b2da      	uxtb	r2, r3
 800533e:	237f      	movs	r3, #127	; 0x7f
 8005340:	4013      	ands	r3, r2
 8005342:	b2da      	uxtb	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1187
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	03db      	lsls	r3, r3, #15
 800534e:	4013      	ands	r3, r2
 8005350:	0c1b      	lsrs	r3, r3, #16
 8005352:	b2da      	uxtb	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1188
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	23fc      	movs	r3, #252	; 0xfc
 800535c:	059b      	lsls	r3, r3, #22
 800535e:	4013      	ands	r3, r2
 8005360:	0e1b      	lsrs	r3, r3, #24
 8005362:	b2da      	uxtb	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	731a      	strb	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1189
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	2380      	movs	r3, #128	; 0x80
 800536c:	05db      	lsls	r3, r3, #23
 800536e:	401a      	ands	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1190
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <RTC_GetAlarm+0xd4>)
 8005378:	401a      	ands	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1192

  if (RTC_Format == RTC_Format_BIN)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d123      	bne.n	80053cc <RTC_GetAlarm+0xc8>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1194
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	1c18      	adds	r0, r3, #0
 800538a:	f000 fcbf 	bl	8005d0c <RTC_Bcd2ToByte>
 800538e:	1c03      	adds	r3, r0, #0
 8005390:	1c1a      	adds	r2, r3, #0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1196
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	1c18      	adds	r0, r3, #0
 800539c:	f000 fcb6 	bl	8005d0c <RTC_Bcd2ToByte>
 80053a0:	1c03      	adds	r3, r0, #0
 80053a2:	1c1a      	adds	r2, r3, #0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1198
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	789b      	ldrb	r3, [r3, #2]
 80053ac:	1c18      	adds	r0, r3, #0
 80053ae:	f000 fcad 	bl	8005d0c <RTC_Bcd2ToByte>
 80053b2:	1c03      	adds	r3, r0, #0
 80053b4:	1c1a      	adds	r2, r3, #0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1200
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	7b1b      	ldrb	r3, [r3, #12]
 80053be:	1c18      	adds	r0, r3, #0
 80053c0:	f000 fca4 	bl	8005d0c <RTC_Bcd2ToByte>
 80053c4:	1c03      	adds	r3, r0, #0
 80053c6:	1c1a      	adds	r2, r3, #0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	731a      	strb	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1202
  }  
}
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b006      	add	sp, #24
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	40002800 	.word	0x40002800
 80053d8:	80808080 	.word	0x80808080

080053dc <RTC_AlarmCmd>:
RTC_AlarmCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1216
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	1c0a      	adds	r2, r1, #0
 80053e6:	1cfb      	adds	r3, r7, #3
 80053e8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1217
  __IO uint32_t alarmcounter = 0x00;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1218
  uint32_t alarmstatus = 0x00;
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1219
  ErrorStatus status = ERROR;
 80053f2:	1c3b      	adds	r3, r7, #0
 80053f4:	3317      	adds	r3, #23
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1226
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80053fa:	4b23      	ldr	r3, [pc, #140]	; (8005488 <RTC_AlarmCmd+0xac>)
 80053fc:	22ca      	movs	r2, #202	; 0xca
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1227
  RTC->WPR = 0x53;
 8005400:	4b21      	ldr	r3, [pc, #132]	; (8005488 <RTC_AlarmCmd+0xac>)
 8005402:	2253      	movs	r2, #83	; 0x53
 8005404:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1230

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8005406:	1cfb      	adds	r3, r7, #3
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <RTC_AlarmCmd+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1232
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800540e:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <RTC_AlarmCmd+0xac>)
 8005410:	4a1d      	ldr	r2, [pc, #116]	; (8005488 <RTC_AlarmCmd+0xac>)
 8005412:	6891      	ldr	r1, [r2, #8]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	430a      	orrs	r2, r1
 8005418:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1234

    status = SUCCESS;    
 800541a:	1c3b      	adds	r3, r7, #0
 800541c:	3317      	adds	r3, #23
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e026      	b.n	8005472 <RTC_AlarmCmd+0x96>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1239
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 8005424:	4b18      	ldr	r3, [pc, #96]	; (8005488 <RTC_AlarmCmd+0xac>)
 8005426:	4a18      	ldr	r2, [pc, #96]	; (8005488 <RTC_AlarmCmd+0xac>)
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	43c9      	mvns	r1, r1
 800542e:	400a      	ands	r2, r1
 8005430:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1244 (discriminator 1)
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <RTC_AlarmCmd+0xac>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	0a12      	lsrs	r2, r2, #8
 800543a:	4013      	ands	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1245 (discriminator 1)
      alarmcounter++;  
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1246 (discriminator 1)
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	01db      	lsls	r3, r3, #7
 800544a:	429a      	cmp	r2, r3
 800544c:	d002      	beq.n	8005454 <RTC_AlarmCmd+0x78>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ee      	beq.n	8005432 <RTC_AlarmCmd+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1248
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <RTC_AlarmCmd+0xac>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	0a12      	lsrs	r2, r2, #8
 800545c:	4013      	ands	r3, r2
 800545e:	d104      	bne.n	800546a <RTC_AlarmCmd+0x8e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1250
    {
      status = ERROR;
 8005460:	1c3b      	adds	r3, r7, #0
 8005462:	3317      	adds	r3, #23
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	e003      	b.n	8005472 <RTC_AlarmCmd+0x96>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1254
    } 
    else
    {
      status = SUCCESS;
 800546a:	1c3b      	adds	r3, r7, #0
 800546c:	3317      	adds	r3, #23
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1259
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <RTC_AlarmCmd+0xac>)
 8005474:	22ff      	movs	r2, #255	; 0xff
 8005476:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1261
  
  return status;
 8005478:	1c3b      	adds	r3, r7, #0
 800547a:	3317      	adds	r3, #23
 800547c:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1262
}
 800547e:	1c18      	adds	r0, r3, #0
 8005480:	46bd      	mov	sp, r7
 8005482:	b006      	add	sp, #24
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	40002800 	.word	0x40002800

0800548c <RTC_AlarmSubSecondConfig>:
RTC_AlarmSubSecondConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1308
  *                                              Only SS[13:0] are compared
  *            @arg RTC_AlarmSubSecondMask_None: SS[14:0] are compared and must match to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint8_t RTC_AlarmSubSecondMask)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	1dfb      	adds	r3, r7, #7
 8005498:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1309
  uint32_t tmpreg = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1317
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <RTC_AlarmSubSecondConfig+0x3c>)
 80054a0:	22ca      	movs	r2, #202	; 0xca
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1318
  RTC->WPR = 0x53;
 80054a4:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <RTC_AlarmSubSecondConfig+0x3c>)
 80054a6:	2253      	movs	r2, #83	; 0x53
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1321
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (((uint32_t)(RTC_AlarmSubSecondValue)) | ((uint32_t)(RTC_AlarmSubSecondMask) << 24));
 80054aa:	1dfb      	adds	r3, r7, #7
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	061a      	lsls	r2, r3, #24
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1324
  
  /* Configure the AlarmA SubSecond register */
  RTC->ALRMASSR = tmpreg;
 80054b6:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <RTC_AlarmSubSecondConfig+0x3c>)
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	645a      	str	r2, [r3, #68]	; 0x44
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1327

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80054bc:	4b02      	ldr	r3, [pc, #8]	; (80054c8 <RTC_AlarmSubSecondConfig+0x3c>)
 80054be:	22ff      	movs	r2, #255	; 0xff
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1329

}
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b006      	add	sp, #24
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40002800 	.word	0x40002800

080054cc <RTC_GetAlarmSubSecond>:
RTC_GetAlarmSubSecond():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1340
  *            @arg RTC_Alarm_A: to select Alarm A
  * @param  None
  * @retval RTC Alarm Subseconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1341
  uint32_t tmpreg = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1344
  
  /* Get the RTC_ALRMAR register */
  tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <RTC_GetAlarmSubSecond+0x20>)
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054dc:	045b      	lsls	r3, r3, #17
 80054de:	0c5b      	lsrs	r3, r3, #17
 80054e0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1346

  return (tmpreg);
 80054e2:	68fb      	ldr	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1347
}
 80054e4:	1c18      	adds	r0, r3, #0
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b004      	add	sp, #16
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40002800 	.word	0x40002800

080054f0 <RTC_DayLightSavingConfig>:
RTC_DayLightSavingConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1382
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1388
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <RTC_DayLightSavingConfig+0x40>)
 80054fc:	22ca      	movs	r2, #202	; 0xca
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1389
  RTC->WPR = 0x53;
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <RTC_DayLightSavingConfig+0x40>)
 8005502:	2253      	movs	r2, #83	; 0x53
 8005504:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1392

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <RTC_DayLightSavingConfig+0x40>)
 8005508:	4a09      	ldr	r2, [pc, #36]	; (8005530 <RTC_DayLightSavingConfig+0x40>)
 800550a:	6891      	ldr	r1, [r2, #8]
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <RTC_DayLightSavingConfig+0x44>)
 800550e:	400a      	ands	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1395

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <RTC_DayLightSavingConfig+0x40>)
 8005514:	4a06      	ldr	r2, [pc, #24]	; (8005530 <RTC_DayLightSavingConfig+0x40>)
 8005516:	6891      	ldr	r1, [r2, #8]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	4302      	orrs	r2, r0
 800551e:	430a      	orrs	r2, r1
 8005520:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1398

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8005522:	4b03      	ldr	r3, [pc, #12]	; (8005530 <RTC_DayLightSavingConfig+0x40>)
 8005524:	22ff      	movs	r2, #255	; 0xff
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1399
}
 8005528:	46bd      	mov	sp, r7
 800552a:	b002      	add	sp, #8
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	40002800 	.word	0x40002800
 8005534:	fffbffff 	.word	0xfffbffff

08005538 <RTC_GetStoreOperation>:
RTC_GetStoreOperation():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1409
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set
  */
uint32_t RTC_GetStoreOperation(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1410
  return (RTC->CR & RTC_CR_BCK);
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <RTC_GetStoreOperation+0x14>)
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	02db      	lsls	r3, r3, #11
 8005544:	4013      	ands	r3, r2
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1411
}
 8005546:	1c18      	adds	r0, r3, #0
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40002800 	.word	0x40002800

08005550 <RTC_OutputConfig>:
RTC_OutputConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1445
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                         ALRAF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1451
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800555a:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <RTC_OutputConfig+0x40>)
 800555c:	22ca      	movs	r2, #202	; 0xca
 800555e:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1452
  RTC->WPR = 0x53;
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <RTC_OutputConfig+0x40>)
 8005562:	2253      	movs	r2, #83	; 0x53
 8005564:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1455

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <RTC_OutputConfig+0x40>)
 8005568:	4a09      	ldr	r2, [pc, #36]	; (8005590 <RTC_OutputConfig+0x40>)
 800556a:	6891      	ldr	r1, [r2, #8]
 800556c:	4a09      	ldr	r2, [pc, #36]	; (8005594 <RTC_OutputConfig+0x44>)
 800556e:	400a      	ands	r2, r1
 8005570:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1458

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8005572:	4b07      	ldr	r3, [pc, #28]	; (8005590 <RTC_OutputConfig+0x40>)
 8005574:	4a06      	ldr	r2, [pc, #24]	; (8005590 <RTC_OutputConfig+0x40>)
 8005576:	6891      	ldr	r1, [r2, #8]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	4302      	orrs	r2, r0
 800557e:	430a      	orrs	r2, r1
 8005580:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1461

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8005582:	4b03      	ldr	r3, [pc, #12]	; (8005590 <RTC_OutputConfig+0x40>)
 8005584:	22ff      	movs	r2, #255	; 0xff
 8005586:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1462
}
 8005588:	46bd      	mov	sp, r7
 800558a:	b002      	add	sp, #8
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	40002800 	.word	0x40002800
 8005594:	ff8fffff 	.word	0xff8fffff

08005598 <RTC_CalibOutputCmd>:
RTC_CalibOutputCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1487
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	1c02      	adds	r2, r0, #0
 80055a0:	1dfb      	adds	r3, r7, #7
 80055a2:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1492
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <RTC_CalibOutputCmd+0x48>)
 80055a6:	22ca      	movs	r2, #202	; 0xca
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1493
  RTC->WPR = 0x53;
 80055aa:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <RTC_CalibOutputCmd+0x48>)
 80055ac:	2253      	movs	r2, #83	; 0x53
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1495
  
  if (NewState != DISABLE)
 80055b0:	1dfb      	adds	r3, r7, #7
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <RTC_CalibOutputCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1498
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <RTC_CalibOutputCmd+0x48>)
 80055ba:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <RTC_CalibOutputCmd+0x48>)
 80055bc:	6892      	ldr	r2, [r2, #8]
 80055be:	2180      	movs	r1, #128	; 0x80
 80055c0:	0409      	lsls	r1, r1, #16
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]
 80055c6:	e005      	b.n	80055d4 <RTC_CalibOutputCmd+0x3c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1503
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 80055c8:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <RTC_CalibOutputCmd+0x48>)
 80055ca:	4a05      	ldr	r2, [pc, #20]	; (80055e0 <RTC_CalibOutputCmd+0x48>)
 80055cc:	6891      	ldr	r1, [r2, #8]
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <RTC_CalibOutputCmd+0x4c>)
 80055d0:	400a      	ands	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1507
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80055d4:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <RTC_CalibOutputCmd+0x48>)
 80055d6:	22ff      	movs	r2, #255	; 0xff
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1508
}
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40002800 	.word	0x40002800
 80055e4:	ff7fffff 	.word	0xff7fffff

080055e8 <RTC_CalibOutputConfig>:
RTC_CalibOutputConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1519
  *            @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *            @arg RTC_CalibOutput_1Hz: A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1524
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <RTC_CalibOutputConfig+0x38>)
 80055f2:	22ca      	movs	r2, #202	; 0xca
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1525
  RTC->WPR = 0x53;
 80055f6:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <RTC_CalibOutputConfig+0x38>)
 80055f8:	2253      	movs	r2, #83	; 0x53
 80055fa:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1528
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_CALSEL);
 80055fc:	4b08      	ldr	r3, [pc, #32]	; (8005620 <RTC_CalibOutputConfig+0x38>)
 80055fe:	4a08      	ldr	r2, [pc, #32]	; (8005620 <RTC_CalibOutputConfig+0x38>)
 8005600:	6891      	ldr	r1, [r2, #8]
 8005602:	4a08      	ldr	r2, [pc, #32]	; (8005624 <RTC_CalibOutputConfig+0x3c>)
 8005604:	400a      	ands	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1531

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <RTC_CalibOutputConfig+0x38>)
 800560a:	4a05      	ldr	r2, [pc, #20]	; (8005620 <RTC_CalibOutputConfig+0x38>)
 800560c:	6891      	ldr	r1, [r2, #8]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	430a      	orrs	r2, r1
 8005612:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1534

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8005614:	4b02      	ldr	r3, [pc, #8]	; (8005620 <RTC_CalibOutputConfig+0x38>)
 8005616:	22ff      	movs	r2, #255	; 0xff
 8005618:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1535
}
 800561a:	46bd      	mov	sp, r7
 800561c:	b002      	add	sp, #8
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40002800 	.word	0x40002800
 8005624:	fff7ffff 	.word	0xfff7ffff

08005628 <RTC_SmoothCalibConfig>:
RTC_SmoothCalibConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1557
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1558
  ErrorStatus status = ERROR;
 8005634:	1c3b      	adds	r3, r7, #0
 8005636:	3317      	adds	r3, #23
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1559
  uint32_t recalpfcount = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1567
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <RTC_SmoothCalibConfig+0x90>)
 8005642:	22ca      	movs	r2, #202	; 0xca
 8005644:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1568
  RTC->WPR = 0x53;
 8005646:	4b1c      	ldr	r3, [pc, #112]	; (80056b8 <RTC_SmoothCalibConfig+0x90>)
 8005648:	2253      	movs	r2, #83	; 0x53
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1571
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <RTC_SmoothCalibConfig+0x90>)
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	025b      	lsls	r3, r3, #9
 8005654:	4013      	ands	r3, r2
 8005656:	d00e      	beq.n	8005676 <RTC_SmoothCalibConfig+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1574
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8005658:	e002      	b.n	8005660 <RTC_SmoothCalibConfig+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1576
    {
      recalpfcount++;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	3301      	adds	r3, #1
 800565e:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1574 (discriminator 1)
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8005660:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <RTC_SmoothCalibConfig+0x90>)
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	025b      	lsls	r3, r3, #9
 8005668:	4013      	ands	r3, r2
 800566a:	d004      	beq.n	8005676 <RTC_SmoothCalibConfig+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1574 (discriminator 2)
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	015b      	lsls	r3, r3, #5
 8005672:	429a      	cmp	r2, r3
 8005674:	d1f1      	bne.n	800565a <RTC_SmoothCalibConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1581
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <RTC_SmoothCalibConfig+0x90>)
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	025b      	lsls	r3, r3, #9
 800567e:	4013      	ands	r3, r2
 8005680:	d10b      	bne.n	800569a <RTC_SmoothCalibConfig+0x72>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1584
  {
    /* Configure the Smooth calibration settings */
    RTC->CAL = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <RTC_SmoothCalibConfig+0x90>)
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4311      	orrs	r1, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	430a      	orrs	r2, r1
 800568e:	63da      	str	r2, [r3, #60]	; 0x3c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1586

    status = SUCCESS;
 8005690:	1c3b      	adds	r3, r7, #0
 8005692:	3317      	adds	r3, #23
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	e003      	b.n	80056a2 <RTC_SmoothCalibConfig+0x7a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1590
  }
  else
  {
    status = ERROR;
 800569a:	1c3b      	adds	r3, r7, #0
 800569c:	3317      	adds	r3, #23
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1594
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <RTC_SmoothCalibConfig+0x90>)
 80056a4:	22ff      	movs	r2, #255	; 0xff
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1596
  
  return (ErrorStatus)(status);
 80056a8:	1c3b      	adds	r3, r7, #0
 80056aa:	3317      	adds	r3, #23
 80056ac:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1597
}
 80056ae:	1c18      	adds	r0, r3, #0
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b006      	add	sp, #24
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	40002800 	.word	0x40002800

080056bc <RTC_TimeStampCmd>:
RTC_TimeStampCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1631
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	1c0a      	adds	r2, r1, #0
 80056c6:	1cfb      	adds	r3, r7, #3
 80056c8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1632
  uint32_t tmpreg = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1639
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80056ce:	4b12      	ldr	r3, [pc, #72]	; (8005718 <RTC_TimeStampCmd+0x5c>)
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <RTC_TimeStampCmd+0x60>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1642

  /* Get the new configuration */
  if (NewState != DISABLE)
 80056d8:	1cfb      	adds	r3, r7, #3
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <RTC_TimeStampCmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1644
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	0112      	lsls	r2, r2, #4
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e003      	b.n	80056f8 <RTC_TimeStampCmd+0x3c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1648
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1652
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80056f8:	4b07      	ldr	r3, [pc, #28]	; (8005718 <RTC_TimeStampCmd+0x5c>)
 80056fa:	22ca      	movs	r2, #202	; 0xca
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1653
  RTC->WPR = 0x53;
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <RTC_TimeStampCmd+0x5c>)
 8005700:	2253      	movs	r2, #83	; 0x53
 8005702:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1656

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <RTC_TimeStampCmd+0x5c>)
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1659

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800570a:	4b03      	ldr	r3, [pc, #12]	; (8005718 <RTC_TimeStampCmd+0x5c>)
 800570c:	22ff      	movs	r2, #255	; 0xff
 800570e:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1660
}
 8005710:	46bd      	mov	sp, r7
 8005712:	b004      	add	sp, #16
 8005714:	bd80      	pop	{r7, pc}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	40002800 	.word	0x40002800
 800571c:	fffff7f7 	.word	0xfffff7f7

08005720 <RTC_GetTimeStamp>:
RTC_GetTimeStamp():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1676
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1677
  uint32_t tmptime = 0, tmpdate = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1683

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8005734:	4b3f      	ldr	r3, [pc, #252]	; (8005834 <RTC_GetTimeStamp+0x114>)
 8005736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005738:	4b3f      	ldr	r3, [pc, #252]	; (8005838 <RTC_GetTimeStamp+0x118>)
 800573a:	4013      	ands	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1684
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800573e:	4b3d      	ldr	r3, [pc, #244]	; (8005834 <RTC_GetTimeStamp+0x114>)
 8005740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005742:	4b3e      	ldr	r3, [pc, #248]	; (800583c <RTC_GetTimeStamp+0x11c>)
 8005744:	4013      	ands	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1687

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	23fc      	movs	r3, #252	; 0xfc
 800574c:	039b      	lsls	r3, r3, #14
 800574e:	4013      	ands	r3, r2
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	b2da      	uxtb	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1688
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	23fe      	movs	r3, #254	; 0xfe
 800575c:	01db      	lsls	r3, r3, #7
 800575e:	4013      	ands	r3, r2
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1689
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	237f      	movs	r3, #127	; 0x7f
 800576e:	4013      	ands	r3, r2
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1690
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	03db      	lsls	r3, r3, #15
 800577c:	4013      	ands	r3, r2
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	b2da      	uxtb	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1693

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	70da      	strb	r2, [r3, #3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1694
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	23f8      	movs	r3, #248	; 0xf8
 8005790:	015b      	lsls	r3, r3, #5
 8005792:	4013      	ands	r3, r2
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	b2da      	uxtb	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1695
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	233f      	movs	r3, #63	; 0x3f
 80057a2:	4013      	ands	r3, r2
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1696
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	23e0      	movs	r3, #224	; 0xe0
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	4013      	ands	r3, r2
 80057b2:	0b5b      	lsrs	r3, r3, #13
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1699

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d135      	bne.n	800582c <RTC_GetTimeStamp+0x10c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1702
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	1c18      	adds	r0, r3, #0
 80057c6:	f000 faa1 	bl	8005d0c <RTC_Bcd2ToByte>
 80057ca:	1c03      	adds	r3, r0, #0
 80057cc:	1c1a      	adds	r2, r3, #0
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1703
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	1c18      	adds	r0, r3, #0
 80057d8:	f000 fa98 	bl	8005d0c <RTC_Bcd2ToByte>
 80057dc:	1c03      	adds	r3, r0, #0
 80057de:	1c1a      	adds	r2, r3, #0
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1704
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	789b      	ldrb	r3, [r3, #2]
 80057e8:	1c18      	adds	r0, r3, #0
 80057ea:	f000 fa8f 	bl	8005d0c <RTC_Bcd2ToByte>
 80057ee:	1c03      	adds	r3, r0, #0
 80057f0:	1c1a      	adds	r2, r3, #0
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1707

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	1c18      	adds	r0, r3, #0
 80057fc:	f000 fa86 	bl	8005d0c <RTC_Bcd2ToByte>
 8005800:	1c03      	adds	r3, r0, #0
 8005802:	1c1a      	adds	r2, r3, #0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1708
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	789b      	ldrb	r3, [r3, #2]
 800580c:	1c18      	adds	r0, r3, #0
 800580e:	f000 fa7d 	bl	8005d0c <RTC_Bcd2ToByte>
 8005812:	1c03      	adds	r3, r0, #0
 8005814:	1c1a      	adds	r2, r3, #0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1709
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	1c18      	adds	r0, r3, #0
 8005820:	f000 fa74 	bl	8005d0c <RTC_Bcd2ToByte>
 8005824:	1c03      	adds	r3, r0, #0
 8005826:	1c1a      	adds	r2, r3, #0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1711
  }
}
 800582c:	46bd      	mov	sp, r7
 800582e:	b006      	add	sp, #24
 8005830:	bd80      	pop	{r7, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	40002800 	.word	0x40002800
 8005838:	007f7f7f 	.word	0x007f7f7f
 800583c:	00ffff3f 	.word	0x00ffff3f

08005840 <RTC_GetTimeStampSubSecond>:
RTC_GetTimeStampSubSecond():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1719
  * @brief  Get the RTC timestamp Subseconds value.
  * @param  None
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1721
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 8005844:	4b02      	ldr	r3, [pc, #8]	; (8005850 <RTC_GetTimeStampSubSecond+0x10>)
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1722
}
 8005848:	1c18      	adds	r0, r3, #0
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	40002800 	.word	0x40002800

08005854 <RTC_TamperTriggerConfig>:
RTC_TamperTriggerConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1756
  *            @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *            @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1761
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d108      	bne.n	8005876 <RTC_TamperTriggerConfig+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1764
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <RTC_TamperTriggerConfig+0x38>)
 8005866:	4a09      	ldr	r2, [pc, #36]	; (800588c <RTC_TamperTriggerConfig+0x38>)
 8005868:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	0049      	lsls	r1, r1, #1
 800586e:	43c9      	mvns	r1, r1
 8005870:	400a      	ands	r2, r1
 8005872:	641a      	str	r2, [r3, #64]	; 0x40
 8005874:	e006      	b.n	8005884 <RTC_TamperTriggerConfig+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1769
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <RTC_TamperTriggerConfig+0x38>)
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <RTC_TamperTriggerConfig+0x38>)
 800587a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	0052      	lsls	r2, r2, #1
 8005880:	430a      	orrs	r2, r1
 8005882:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1771
  }  
}
 8005884:	46bd      	mov	sp, r7
 8005886:	b002      	add	sp, #8
 8005888:	bd80      	pop	{r7, pc}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	40002800 	.word	0x40002800

08005890 <RTC_TamperCmd>:
RTC_TamperCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1784
  * @param  NewState: new state of the tamper pin.
  *         This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	1c0a      	adds	r2, r1, #0
 800589a:	1cfb      	adds	r3, r7, #3
 800589c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1789
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800589e:	1cfb      	adds	r3, r7, #3
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d006      	beq.n	80058b4 <RTC_TamperCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1792
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <RTC_TamperCmd+0x38>)
 80058a8:	4a07      	ldr	r2, [pc, #28]	; (80058c8 <RTC_TamperCmd+0x38>)
 80058aa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40
 80058b2:	e006      	b.n	80058c2 <RTC_TamperCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1797
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 80058b4:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <RTC_TamperCmd+0x38>)
 80058b6:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <RTC_TamperCmd+0x38>)
 80058b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	43c9      	mvns	r1, r1
 80058be:	400a      	ands	r2, r1
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1799
  }  
}
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b002      	add	sp, #8
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40002800 	.word	0x40002800

080058cc <RTC_TamperFilterConfig>:
RTC_TamperFilterConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1815
  *            @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                           samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1820
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 80058d4:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <RTC_TamperFilterConfig+0x28>)
 80058d6:	4a07      	ldr	r2, [pc, #28]	; (80058f4 <RTC_TamperFilterConfig+0x28>)
 80058d8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80058da:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <RTC_TamperFilterConfig+0x2c>)
 80058dc:	400a      	ands	r2, r1
 80058de:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1823

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 80058e0:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <RTC_TamperFilterConfig+0x28>)
 80058e2:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <RTC_TamperFilterConfig+0x28>)
 80058e4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1824
}
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b002      	add	sp, #8
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	40002800 	.word	0x40002800
 80058f8:	ffffe7ff 	.word	0xffffe7ff

080058fc <RTC_TamperSamplingFreqConfig>:
RTC_TamperSamplingFreqConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1849
  *            @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                                       with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1854
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 8005904:	4b07      	ldr	r3, [pc, #28]	; (8005924 <RTC_TamperSamplingFreqConfig+0x28>)
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <RTC_TamperSamplingFreqConfig+0x28>)
 8005908:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800590a:	4a07      	ldr	r2, [pc, #28]	; (8005928 <RTC_TamperSamplingFreqConfig+0x2c>)
 800590c:	400a      	ands	r2, r1
 800590e:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1857

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <RTC_TamperSamplingFreqConfig+0x28>)
 8005912:	4a04      	ldr	r2, [pc, #16]	; (8005924 <RTC_TamperSamplingFreqConfig+0x28>)
 8005914:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	430a      	orrs	r2, r1
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1858
}
 800591c:	46bd      	mov	sp, r7
 800591e:	b002      	add	sp, #8
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	40002800 	.word	0x40002800
 8005928:	fffff8ff 	.word	0xfffff8ff

0800592c <RTC_TamperPinsPrechargeDuration>:
RTC_TamperPinsPrechargeDuration():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1872
  *            @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling during 4 RTCCLK cycle    
  *            @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1877
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8005934:	4b07      	ldr	r3, [pc, #28]	; (8005954 <RTC_TamperPinsPrechargeDuration+0x28>)
 8005936:	4a07      	ldr	r2, [pc, #28]	; (8005954 <RTC_TamperPinsPrechargeDuration+0x28>)
 8005938:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800593a:	4a07      	ldr	r2, [pc, #28]	; (8005958 <RTC_TamperPinsPrechargeDuration+0x2c>)
 800593c:	400a      	ands	r2, r1
 800593e:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1880

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <RTC_TamperPinsPrechargeDuration+0x28>)
 8005942:	4a04      	ldr	r2, [pc, #16]	; (8005954 <RTC_TamperPinsPrechargeDuration+0x28>)
 8005944:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	430a      	orrs	r2, r1
 800594a:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1881
}
 800594c:	46bd      	mov	sp, r7
 800594e:	b002      	add	sp, #8
 8005950:	bd80      	pop	{r7, pc}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	40002800 	.word	0x40002800
 8005958:	ffff9fff 	.word	0xffff9fff

0800595c <RTC_TimeStampOnTamperDetectionCmd>:
RTC_TimeStampOnTamperDetectionCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1892
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	1c02      	adds	r2, r0, #0
 8005964:	1dfb      	adds	r3, r7, #7
 8005966:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1896
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 8005968:	1dfb      	adds	r3, r7, #7
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d006      	beq.n	800597e <RTC_TimeStampOnTamperDetectionCmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1899
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8005972:	4a07      	ldr	r2, [pc, #28]	; (8005990 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8005974:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	430a      	orrs	r2, r1
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
 800597c:	e005      	b.n	800598a <RTC_TimeStampOnTamperDetectionCmd+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1904
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8005980:	4a03      	ldr	r2, [pc, #12]	; (8005990 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8005982:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005984:	2180      	movs	r1, #128	; 0x80
 8005986:	438a      	bics	r2, r1
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1906
  }
}
 800598a:	46bd      	mov	sp, r7
 800598c:	b002      	add	sp, #8
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40002800 	.word	0x40002800

08005994 <RTC_TamperPullUpCmd>:
RTC_TamperPullUpCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1915
  * @param  NewState: new state of tamper pull up.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	1c02      	adds	r2, r0, #0
 800599c:	1dfb      	adds	r3, r7, #7
 800599e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1919
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 80059a0:	1dfb      	adds	r3, r7, #7
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <RTC_TamperPullUpCmd+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1922
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 80059a8:	4b08      	ldr	r3, [pc, #32]	; (80059cc <RTC_TamperPullUpCmd+0x38>)
 80059aa:	4a08      	ldr	r2, [pc, #32]	; (80059cc <RTC_TamperPullUpCmd+0x38>)
 80059ac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80059ae:	4a08      	ldr	r2, [pc, #32]	; (80059d0 <RTC_TamperPullUpCmd+0x3c>)
 80059b0:	400a      	ands	r2, r1
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
 80059b4:	e006      	b.n	80059c4 <RTC_TamperPullUpCmd+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1927
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 80059b6:	4b05      	ldr	r3, [pc, #20]	; (80059cc <RTC_TamperPullUpCmd+0x38>)
 80059b8:	4a04      	ldr	r2, [pc, #16]	; (80059cc <RTC_TamperPullUpCmd+0x38>)
 80059ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	0209      	lsls	r1, r1, #8
 80059c0:	430a      	orrs	r2, r1
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1929
  } 
}
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b002      	add	sp, #8
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	40002800 	.word	0x40002800
 80059d0:	ffff7fff 	.word	0xffff7fff

080059d4 <RTC_WriteBackupRegister>:
RTC_WriteBackupRegister():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1956
  *                                 specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1957
  __IO uint32_t tmp = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1962
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <RTC_WriteBackupRegister+0x28>)
 80059e4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1963
  tmp += (RTC_BKP_DR * 4);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	009a      	lsls	r2, r3, #2
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	18d3      	adds	r3, r2, r3
 80059ee:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1966

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1967
}
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b004      	add	sp, #16
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40002850 	.word	0x40002850

08005a00 <RTC_ReadBackupRegister>:
RTC_ReadBackupRegister():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1977
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1978
  __IO uint32_t tmp = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1983
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <RTC_ReadBackupRegister+0x28>)
 8005a0e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1984
  tmp += (RTC_BKP_DR * 4);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	009a      	lsls	r2, r3, #2
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	18d3      	adds	r3, r2, r3
 8005a18:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1987
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:1988
}
 8005a1e:	1c18      	adds	r0, r3, #0
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b004      	add	sp, #16
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	40002850 	.word	0x40002850

08005a2c <RTC_OutputTypeConfig>:
RTC_OutputTypeConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2017
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2021
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 8005a34:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <RTC_OutputTypeConfig+0x28>)
 8005a36:	4a07      	ldr	r2, [pc, #28]	; (8005a54 <RTC_OutputTypeConfig+0x28>)
 8005a38:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005a3a:	4a07      	ldr	r2, [pc, #28]	; (8005a58 <RTC_OutputTypeConfig+0x2c>)
 8005a3c:	400a      	ands	r2, r1
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2022
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 8005a40:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <RTC_OutputTypeConfig+0x28>)
 8005a42:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <RTC_OutputTypeConfig+0x28>)
 8005a44:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2023
}
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b002      	add	sp, #8
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	40002800 	.word	0x40002800
 8005a58:	fffbffff 	.word	0xfffbffff

08005a5c <RTC_SynchroShiftConfig>:
RTC_SynchroShiftConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2055
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2056
  ErrorStatus status = ERROR;
 8005a66:	1c3b      	adds	r3, r7, #0
 8005a68:	330f      	adds	r3, #15
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2057
  uint32_t shpfcount = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2064
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005a72:	4b25      	ldr	r3, [pc, #148]	; (8005b08 <RTC_SynchroShiftConfig+0xac>)
 8005a74:	22ca      	movs	r2, #202	; 0xca
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2065
  RTC->WPR = 0x53;
 8005a78:	4b23      	ldr	r3, [pc, #140]	; (8005b08 <RTC_SynchroShiftConfig+0xac>)
 8005a7a:	2253      	movs	r2, #83	; 0x53
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2068
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 8005a7e:	4b22      	ldr	r3, [pc, #136]	; (8005b08 <RTC_SynchroShiftConfig+0xac>)
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	2308      	movs	r3, #8
 8005a84:	4013      	ands	r3, r2
 8005a86:	d00d      	beq.n	8005aa4 <RTC_SynchroShiftConfig+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2071
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 8005a88:	e002      	b.n	8005a90 <RTC_SynchroShiftConfig+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2073
    {
      shpfcount++;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2071 (discriminator 1)
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 8005a90:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <RTC_SynchroShiftConfig+0xac>)
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	2308      	movs	r3, #8
 8005a96:	4013      	ands	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <RTC_SynchroShiftConfig+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2071 (discriminator 2)
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	015b      	lsls	r3, r3, #5
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d1f2      	bne.n	8005a8a <RTC_SynchroShiftConfig+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2078
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 8005aa4:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <RTC_SynchroShiftConfig+0xac>)
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d11d      	bne.n	8005aea <RTC_SynchroShiftConfig+0x8e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2081
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 8005aae:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <RTC_SynchroShiftConfig+0xac>)
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d113      	bne.n	8005ae0 <RTC_SynchroShiftConfig+0x84>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2084
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 8005ab8:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <RTC_SynchroShiftConfig+0xac>)
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	62da      	str	r2, [r3, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2086
    
      if(RTC_WaitForSynchro() == ERROR)
 8005ac2:	f7ff f8b5 	bl	8004c30 <RTC_WaitForSynchro>
 8005ac6:	1c03      	adds	r3, r0, #0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <RTC_SynchroShiftConfig+0x7a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2088
      {
        status = ERROR;
 8005acc:	1c3b      	adds	r3, r7, #0
 8005ace:	330f      	adds	r3, #15
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e00d      	b.n	8005af2 <RTC_SynchroShiftConfig+0x96>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2092
      }
      else
      {
        status = SUCCESS;
 8005ad6:	1c3b      	adds	r3, r7, #0
 8005ad8:	330f      	adds	r3, #15
 8005ada:	2201      	movs	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e008      	b.n	8005af2 <RTC_SynchroShiftConfig+0x96>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2097
      }
    }
    else
    {
      status = ERROR;
 8005ae0:	1c3b      	adds	r3, r7, #0
 8005ae2:	330f      	adds	r3, #15
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e003      	b.n	8005af2 <RTC_SynchroShiftConfig+0x96>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2102
    }
  }
  else
  {
    status = ERROR;
 8005aea:	1c3b      	adds	r3, r7, #0
 8005aec:	330f      	adds	r3, #15
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2106
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <RTC_SynchroShiftConfig+0xac>)
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2108
  
  return (ErrorStatus)(status);
 8005af8:	1c3b      	adds	r3, r7, #0
 8005afa:	330f      	adds	r3, #15
 8005afc:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2109
}
 8005afe:	1c18      	adds	r0, r3, #0
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	40002800 	.word	0x40002800

08005b0c <RTC_ITConfig>:
RTC_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2164
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	1c0a      	adds	r2, r1, #0
 8005b16:	1cfb      	adds	r3, r7, #3
 8005b18:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2170
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8005b1a:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b1c:	22ca      	movs	r2, #202	; 0xca
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2171
  RTC->WPR = 0x53;
 8005b20:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b22:	2253      	movs	r2, #83	; 0x53
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2173

  if (NewState != DISABLE)
 8005b26:	1cfb      	adds	r3, r7, #3
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d010      	beq.n	8005b50 <RTC_ITConfig+0x44>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2176
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8005b2e:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b32:	6891      	ldr	r1, [r2, #8]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	2004      	movs	r0, #4
 8005b38:	4382      	bics	r2, r0
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2178
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b40:	4a0f      	ldr	r2, [pc, #60]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b42:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	2204      	movs	r2, #4
 8005b48:	4002      	ands	r2, r0
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8005b4e:	e011      	b.n	8005b74 <RTC_ITConfig+0x68>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2183
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b52:	4a0b      	ldr	r2, [pc, #44]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b54:	6892      	ldr	r2, [r2, #8]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	2004      	movs	r0, #4
 8005b5a:	4381      	bics	r1, r0
 8005b5c:	43c9      	mvns	r1, r1
 8005b5e:	400a      	ands	r2, r1
 8005b60:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2185
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 8005b62:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b64:	4a06      	ldr	r2, [pc, #24]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	2104      	movs	r1, #4
 8005b6c:	4001      	ands	r1, r0
 8005b6e:	43c9      	mvns	r1, r1
 8005b70:	400a      	ands	r2, r1
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2188
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <RTC_ITConfig+0x74>)
 8005b76:	22ff      	movs	r2, #255	; 0xff
 8005b78:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2189
}
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40002800 	.word	0x40002800

08005b84 <RTC_GetFlagStatus>:
RTC_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2207
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  *            @arg RTC_FLAG_INITS: Registers Configured flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2208
  FlagStatus bitstatus = RESET;
 8005b8c:	1c3b      	adds	r3, r7, #0
 8005b8e:	330f      	adds	r3, #15
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2209
  uint32_t tmpreg = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2215
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <RTC_GetFlagStatus+0x48>)
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <RTC_GetFlagStatus+0x4c>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2218
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <RTC_GetFlagStatus+0x30>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2220
  {
    bitstatus = SET;
 8005baa:	1c3b      	adds	r3, r7, #0
 8005bac:	330f      	adds	r3, #15
 8005bae:	2201      	movs	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	e003      	b.n	8005bbc <RTC_GetFlagStatus+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2224
  }
  else
  {
    bitstatus = RESET;
 8005bb4:	1c3b      	adds	r3, r7, #0
 8005bb6:	330f      	adds	r3, #15
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2226
  }
  return bitstatus;
 8005bbc:	1c3b      	adds	r3, r7, #0
 8005bbe:	330f      	adds	r3, #15
 8005bc0:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2227
}
 8005bc2:	1c18      	adds	r0, r3, #0
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b004      	add	sp, #16
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	40002800 	.word	0x40002800
 8005bd0:	00017978 	.word	0x00017978

08005bd4 <RTC_ClearFlag>:
RTC_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2242
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2247
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0001FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));    
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <RTC_ClearFlag+0x28>)
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4a07      	ldr	r2, [pc, #28]	; (8005c00 <RTC_ClearFlag+0x2c>)
 8005be2:	400a      	ands	r2, r1
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	430a      	orrs	r2, r1
 8005be8:	43d1      	mvns	r1, r2
 8005bea:	4a04      	ldr	r2, [pc, #16]	; (8005bfc <RTC_ClearFlag+0x28>)
 8005bec:	68d0      	ldr	r0, [r2, #12]
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	4002      	ands	r2, r0
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2248
}
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40002800 	.word	0x40002800
 8005c00:	0001ff7f 	.word	0x0001ff7f

08005c04 <RTC_GetITStatus>:
RTC_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2261
  *            @arg RTC_IT_TAMP1: Tamper1 event interrupt 
  *            @arg RTC_IT_TAMP2: Tamper2 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2262
  ITStatus bitstatus = RESET;
 8005c0c:	1c3b      	adds	r3, r7, #0
 8005c0e:	3317      	adds	r3, #23
 8005c10:	2200      	movs	r2, #0
 8005c12:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2263
  uint32_t tmpreg = 0, enablestatus = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2269
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8005c1c:	4b18      	ldr	r3, [pc, #96]	; (8005c80 <RTC_GetITStatus+0x7c>)
 8005c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c20:	2304      	movs	r3, #4
 8005c22:	4013      	ands	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2272
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
 8005c26:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <RTC_GetITStatus+0x7c>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	401a      	ands	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	0c9b      	lsrs	r3, r3, #18
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	1c08      	adds	r0, r1, #0
 8005c36:	40d8      	lsrs	r0, r3
 8005c38:	1c03      	adds	r3, r0, #0
 8005c3a:	0bdb      	lsrs	r3, r3, #15
 8005c3c:	6939      	ldr	r1, [r7, #16]
 8005c3e:	400b      	ands	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2275
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <RTC_GetITStatus+0x7c>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	0912      	lsrs	r2, r2, #4
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2278
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <RTC_GetITStatus+0x64>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2278 (discriminator 1)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	0c1b      	lsrs	r3, r3, #16
 8005c5c:	d004      	beq.n	8005c68 <RTC_GetITStatus+0x64>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2280
  {
    bitstatus = SET;
 8005c5e:	1c3b      	adds	r3, r7, #0
 8005c60:	3317      	adds	r3, #23
 8005c62:	2201      	movs	r2, #1
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	e003      	b.n	8005c70 <RTC_GetITStatus+0x6c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2284
  }
  else
  {
    bitstatus = RESET;
 8005c68:	1c3b      	adds	r3, r7, #0
 8005c6a:	3317      	adds	r3, #23
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2286
  }
  return bitstatus;
 8005c70:	1c3b      	adds	r3, r7, #0
 8005c72:	3317      	adds	r3, #23
 8005c74:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2287
}
 8005c76:	1c18      	adds	r0, r3, #0
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b006      	add	sp, #24
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	40002800 	.word	0x40002800

08005c84 <RTC_ClearITPendingBit>:
RTC_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2300
  *            @arg RTC_IT_TAMP1: Tamper1 event interrupt
  *            @arg RTC_IT_TAMP2: Tamper2 event interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2301
  uint32_t tmpreg = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2307

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2310

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 8005c96:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <RTC_ClearITPendingBit+0x34>)
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	0412      	lsls	r2, r2, #16
 8005c9c:	0c12      	lsrs	r2, r2, #16
 8005c9e:	2180      	movs	r1, #128	; 0x80
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	43d1      	mvns	r1, r2
 8005ca4:	4a04      	ldr	r2, [pc, #16]	; (8005cb8 <RTC_ClearITPendingBit+0x34>)
 8005ca6:	68d0      	ldr	r0, [r2, #12]
 8005ca8:	2280      	movs	r2, #128	; 0x80
 8005caa:	4002      	ands	r2, r0
 8005cac:	430a      	orrs	r2, r1
 8005cae:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2311
}
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b004      	add	sp, #16
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	40002800 	.word	0x40002800

08005cbc <RTC_ByteToBcd2>:
RTC_ByteToBcd2():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2323
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	1c02      	adds	r2, r0, #0
 8005cc4:	1dfb      	adds	r3, r7, #7
 8005cc6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2324
  uint8_t bcdhigh = 0;
 8005cc8:	1c3b      	adds	r3, r7, #0
 8005cca:	330f      	adds	r3, #15
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2326
  
  while (Value >= 10)
 8005cd0:	e00b      	b.n	8005cea <RTC_ByteToBcd2+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2328
  {
    bcdhigh++;
 8005cd2:	1c3b      	adds	r3, r7, #0
 8005cd4:	330f      	adds	r3, #15
 8005cd6:	1c3a      	adds	r2, r7, #0
 8005cd8:	320f      	adds	r2, #15
 8005cda:	7812      	ldrb	r2, [r2, #0]
 8005cdc:	3201      	adds	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2329
    Value -= 10;
 8005ce0:	1dfb      	adds	r3, r7, #7
 8005ce2:	1dfa      	adds	r2, r7, #7
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	3a0a      	subs	r2, #10
 8005ce8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2326 (discriminator 1)
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8005cea:	1dfb      	adds	r3, r7, #7
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	d8ef      	bhi.n	8005cd2 <RTC_ByteToBcd2+0x16>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2332
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005cf2:	1c3b      	adds	r3, r7, #0
 8005cf4:	330f      	adds	r3, #15
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	1dfb      	adds	r3, r7, #7
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2333
}
 8005d04:	1c18      	adds	r0, r3, #0
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b004      	add	sp, #16
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <RTC_Bcd2ToByte>:
RTC_Bcd2ToByte():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2341
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	1c02      	adds	r2, r0, #0
 8005d14:	1dfb      	adds	r3, r7, #7
 8005d16:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2342
  uint8_t tmp = 0;
 8005d18:	1c3b      	adds	r3, r7, #0
 8005d1a:	330f      	adds	r3, #15
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2343
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005d20:	1dfb      	adds	r3, r7, #7
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	091b      	lsrs	r3, r3, #4
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	1c3a      	adds	r2, r7, #0
 8005d2a:	320f      	adds	r2, #15
 8005d2c:	1c19      	adds	r1, r3, #0
 8005d2e:	0089      	lsls	r1, r1, #2
 8005d30:	18cb      	adds	r3, r1, r3
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	7013      	strb	r3, [r2, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2344
  return (tmp + (Value & (uint8_t)0x0F));
 8005d36:	1dfb      	adds	r3, r7, #7
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	230f      	movs	r3, #15
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	1c3b      	adds	r3, r7, #0
 8005d42:	330f      	adds	r3, #15
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	18d3      	adds	r3, r2, r3
 8005d48:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c:2345
}
 8005d4a:	1c18      	adds	r0, r3, #0
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b004      	add	sp, #16
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)

08005d54 <SPI_I2S_DeInit>:
SPI_I2S_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:165
  *         reset values.
  * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:169
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <SPI_I2S_DeInit+0x50>)
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d10c      	bne.n	8005d7e <SPI_I2S_DeInit+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:172
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	015b      	lsls	r3, r3, #5
 8005d68:	1c18      	adds	r0, r3, #0
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	f7fe fd68 	bl	8004840 <RCC_APB2PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:174
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	015b      	lsls	r3, r3, #5
 8005d74:	1c18      	adds	r0, r3, #0
 8005d76:	2100      	movs	r1, #0
 8005d78:	f7fe fd62 	bl	8004840 <RCC_APB2PeriphResetCmd>
 8005d7c:	e00f      	b.n	8005d9e <SPI_I2S_DeInit+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:178
  }
  else
  {
    if (SPIx == SPI2)
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <SPI_I2S_DeInit+0x54>)
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d10b      	bne.n	8005d9e <SPI_I2S_DeInit+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:181
    {
      /* Enable SPI2 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	01db      	lsls	r3, r3, #7
 8005d8a:	1c18      	adds	r0, r3, #0
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	f7fe fd75 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:183
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	01db      	lsls	r3, r3, #7
 8005d96:	1c18      	adds	r0, r3, #0
 8005d98:	2100      	movs	r1, #0
 8005d9a:	f7fe fd6f 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:186
    }
  }
}
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b002      	add	sp, #8
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40013000 	.word	0x40013000
 8005da8:	40003800 	.word	0x40003800

08005dac <SPI_StructInit>:
SPI_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:194
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:197
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:199
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:201
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	22e0      	movs	r2, #224	; 0xe0
 8005dc4:	00d2      	lsls	r2, r2, #3
 8005dc6:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:203
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	80da      	strh	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:205
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:207
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	815a      	strh	r2, [r3, #10]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:209
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:211
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	81da      	strh	r2, [r3, #14]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:213
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2207      	movs	r2, #7
 8005dea:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:214
}
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b002      	add	sp, #8
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)

08005df4 <SPI_Init>:
SPI_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:225
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:226
  uint16_t tmpreg = 0;
 8005dfe:	1c3b      	adds	r3, r7, #0
 8005e00:	330e      	adds	r3, #14
 8005e02:	2200      	movs	r2, #0
 8005e04:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:244
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005e06:	1c3b      	adds	r3, r7, #0
 8005e08:	330e      	adds	r3, #14
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	8812      	ldrh	r2, [r2, #0]
 8005e0e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:246
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005e10:	1c3b      	adds	r3, r7, #0
 8005e12:	330e      	adds	r3, #14
 8005e14:	1c3a      	adds	r2, r7, #0
 8005e16:	320e      	adds	r2, #14
 8005e18:	8811      	ldrh	r1, [r2, #0]
 8005e1a:	22c1      	movs	r2, #193	; 0xc1
 8005e1c:	0192      	lsls	r2, r2, #6
 8005e1e:	400a      	ands	r2, r1
 8005e20:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:255
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	89db      	ldrh	r3, [r3, #14]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b29a      	uxth	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:256
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	88db      	ldrh	r3, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:255
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005e32:	4313      	orrs	r3, r2
 8005e34:	b29a      	uxth	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:256
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	891b      	ldrh	r3, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:255
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	b29a      	uxth	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:257
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	895b      	ldrh	r3, [r3, #10]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:255
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005e42:	4313      	orrs	r3, r2
 8005e44:	b29a      	uxth	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:257
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	899b      	ldrh	r3, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:255
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	b299      	uxth	r1, r3
 8005e4e:	1c3b      	adds	r3, r7, #0
 8005e50:	330e      	adds	r3, #14
 8005e52:	1c3a      	adds	r2, r7, #0
 8005e54:	320e      	adds	r2, #14
 8005e56:	8812      	ldrh	r2, [r2, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:259
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1c3a      	adds	r2, r7, #0
 8005e60:	320e      	adds	r2, #14
 8005e62:	8812      	ldrh	r2, [r2, #0]
 8005e64:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:262
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8005e66:	1c3b      	adds	r3, r7, #0
 8005e68:	330e      	adds	r3, #14
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	8892      	ldrh	r2, [r2, #4]
 8005e6e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:264
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8005e70:	1c3b      	adds	r3, r7, #0
 8005e72:	330e      	adds	r3, #14
 8005e74:	1c3a      	adds	r2, r7, #0
 8005e76:	320e      	adds	r2, #14
 8005e78:	8811      	ldrh	r1, [r2, #0]
 8005e7a:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <SPI_Init+0xfc>)
 8005e7c:	400a      	ands	r2, r1
 8005e7e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:266
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	8899      	ldrh	r1, [r3, #4]
 8005e84:	1c3b      	adds	r3, r7, #0
 8005e86:	330e      	adds	r3, #14
 8005e88:	1c3a      	adds	r2, r7, #0
 8005e8a:	320e      	adds	r2, #14
 8005e8c:	8812      	ldrh	r2, [r2, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:268
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1c3a      	adds	r2, r7, #0
 8005e96:	320e      	adds	r2, #14
 8005e98:	8812      	ldrh	r2, [r2, #0]
 8005e9a:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:272
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	8a1a      	ldrh	r2, [r3, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:276
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005ea4:	1c3b      	adds	r3, r7, #0
 8005ea6:	330e      	adds	r3, #14
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	8812      	ldrh	r2, [r2, #0]
 8005eac:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:278
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8005eae:	1c3b      	adds	r3, r7, #0
 8005eb0:	330e      	adds	r3, #14
 8005eb2:	1c3a      	adds	r2, r7, #0
 8005eb4:	320e      	adds	r2, #14
 8005eb6:	8812      	ldrh	r2, [r2, #0]
 8005eb8:	2104      	movs	r1, #4
 8005eba:	438a      	bics	r2, r1
 8005ebc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:281
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	8859      	ldrh	r1, [r3, #2]
 8005ec2:	1c3b      	adds	r3, r7, #0
 8005ec4:	330e      	adds	r3, #14
 8005ec6:	1c3a      	adds	r2, r7, #0
 8005ec8:	320e      	adds	r2, #14
 8005eca:	8812      	ldrh	r2, [r2, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:283
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	1c3a      	adds	r2, r7, #0
 8005ed4:	320e      	adds	r2, #14
 8005ed6:	8812      	ldrh	r2, [r2, #0]
 8005ed8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:286
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8b9b      	ldrh	r3, [r3, #28]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <SPI_Init+0x100>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:287
}
 8005eea:	46bd      	mov	sp, r7
 8005eec:	b004      	add	sp, #16
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	fffff0ff 	.word	0xfffff0ff
 8005ef4:	fffff7ff 	.word	0xfffff7ff

08005ef8 <I2S_StructInit>:
I2S_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:295
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:298
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:301

  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:304

  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:307

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	80da      	strh	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:310

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:313

  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:314
}
 8005f24:	46bd      	mov	sp, r7
 8005f26:	b002      	add	sp, #8
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)

08005f2c <I2S_Init>:
I2S_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:330
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08e      	sub	sp, #56	; 0x38
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:331
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8005f36:	1c3b      	adds	r3, r7, #0
 8005f38:	332a      	adds	r3, #42	; 0x2a
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	1c3b      	adds	r3, r7, #0
 8005f40:	3336      	adds	r3, #54	; 0x36
 8005f42:	2202      	movs	r2, #2
 8005f44:	801a      	strh	r2, [r3, #0]
 8005f46:	1c3b      	adds	r3, r7, #0
 8005f48:	3334      	adds	r3, #52	; 0x34
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	1c3b      	adds	r3, r7, #0
 8005f50:	3332      	adds	r3, #50	; 0x32
 8005f52:	2201      	movs	r2, #1
 8005f54:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:332
  uint32_t tmp = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:334
  RCC_ClocksTypeDef RCC_Clocks;
  uint32_t sourceclock = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:347
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8b9b      	ldrh	r3, [r3, #28]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	4b60      	ldr	r3, [pc, #384]	; (80060e8 <I2S_Init+0x1bc>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:348
  SPIx->I2SPR = 0x0002;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:351

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8005f74:	1c3b      	adds	r3, r7, #0
 8005f76:	332a      	adds	r3, #42	; 0x2a
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	8b92      	ldrh	r2, [r2, #28]
 8005f7c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:354

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d108      	bne.n	8005f98 <I2S_Init+0x6c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:356
  {
    i2sodd = (uint16_t)0;
 8005f86:	1c3b      	adds	r3, r7, #0
 8005f88:	3334      	adds	r3, #52	; 0x34
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:357
    i2sdiv = (uint16_t)2;   
 8005f8e:	1c3b      	adds	r3, r7, #0
 8005f90:	3336      	adds	r3, #54	; 0x36
 8005f92:	2202      	movs	r2, #2
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	e066      	b.n	8006066 <I2S_Init+0x13a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:363
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	889b      	ldrh	r3, [r3, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <I2S_Init+0x7e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:366
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8005fa0:	1c3b      	adds	r3, r7, #0
 8005fa2:	3332      	adds	r3, #50	; 0x32
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	e003      	b.n	8005fb2 <I2S_Init+0x86>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:371
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8005faa:	1c3b      	adds	r3, r7, #0
 8005fac:	3332      	adds	r3, #50	; 0x32
 8005fae:	2202      	movs	r2, #2
 8005fb0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:375
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8005fb2:	1c3b      	adds	r3, r7, #0
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	1c18      	adds	r0, r3, #0
 8005fb8:	f7fe fa94 	bl	80044e4 <RCC_GetClocksFreq>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:378

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 8005fbc:	1c3b      	adds	r3, r7, #0
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:381

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	88da      	ldrh	r2, [r3, #6]
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d112      	bne.n	8005ff6 <I2S_Init+0xca>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:384
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	0a1a      	lsrs	r2, r3, #8
 8005fd4:	1c13      	adds	r3, r2, #0
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	189b      	adds	r3, r3, r2
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	1c1a      	adds	r2, r3, #0
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	1c10      	adds	r0, r2, #0
 8005fe4:	1c19      	adds	r1, r3, #0
 8005fe6:	f7fa f8e7 	bl	80001b8 <__aeabi_uidiv>
 8005fea:	1c03      	adds	r3, r0, #0
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3305      	adds	r3, #5
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff4:	e019      	b.n	800602a <I2S_Init+0xfe>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:389
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8005ff6:	1c3b      	adds	r3, r7, #0
 8005ff8:	3332      	adds	r3, #50	; 0x32
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	015b      	lsls	r3, r3, #5
 8005ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006000:	1c19      	adds	r1, r3, #0
 8006002:	f7fa f8d9 	bl	80001b8 <__aeabi_uidiv>
 8006006:	1c03      	adds	r3, r0, #0
 8006008:	1c1a      	adds	r2, r3, #0
 800600a:	1c13      	adds	r3, r2, #0
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	189b      	adds	r3, r3, r2
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	1c1a      	adds	r2, r3, #0
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	1c10      	adds	r0, r2, #0
 800601a:	1c19      	adds	r1, r3, #0
 800601c:	f7fa f8cc 	bl	80001b8 <__aeabi_uidiv>
 8006020:	1c03      	adds	r3, r0, #0
 8006022:	b29b      	uxth	r3, r3
 8006024:	3305      	adds	r3, #5
 8006026:	b29b      	uxth	r3, r3
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:393
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	1c18      	adds	r0, r3, #0
 800602e:	210a      	movs	r1, #10
 8006030:	f7fa f8c2 	bl	80001b8 <__aeabi_uidiv>
 8006034:	1c03      	adds	r3, r0, #0
 8006036:	62fb      	str	r3, [r7, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:396

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	b299      	uxth	r1, r3
 800603c:	1c3b      	adds	r3, r7, #0
 800603e:	3334      	adds	r3, #52	; 0x34
 8006040:	2201      	movs	r2, #1
 8006042:	400a      	ands	r2, r1
 8006044:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:399

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8006046:	1c3b      	adds	r3, r7, #0
 8006048:	3334      	adds	r3, #52	; 0x34
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	085a      	lsrs	r2, r3, #1
 8006052:	1c3b      	adds	r3, r7, #0
 8006054:	3336      	adds	r3, #54	; 0x36
 8006056:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:402

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8006058:	1c3b      	adds	r3, r7, #0
 800605a:	3334      	adds	r3, #52	; 0x34
 800605c:	1c3a      	adds	r2, r7, #0
 800605e:	3234      	adds	r2, #52	; 0x34
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	0212      	lsls	r2, r2, #8
 8006064:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:406
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8006066:	1c3b      	adds	r3, r7, #0
 8006068:	3336      	adds	r3, #54	; 0x36
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d904      	bls.n	800607a <I2S_Init+0x14e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:406 (discriminator 1)
 8006070:	1c3b      	adds	r3, r7, #0
 8006072:	3336      	adds	r3, #54	; 0x36
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	2bff      	cmp	r3, #255	; 0xff
 8006078:	d907      	bls.n	800608a <I2S_Init+0x15e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:409
  {
    /* Set the default values */
    i2sdiv = 2;
 800607a:	1c3b      	adds	r3, r7, #0
 800607c:	3336      	adds	r3, #54	; 0x36
 800607e:	2202      	movs	r2, #2
 8006080:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:410
    i2sodd = 0;
 8006082:	1c3b      	adds	r3, r7, #0
 8006084:	3334      	adds	r3, #52	; 0x34
 8006086:	2200      	movs	r2, #0
 8006088:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:414
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	88da      	ldrh	r2, [r3, #6]
 800608e:	1c3b      	adds	r3, r7, #0
 8006090:	3334      	adds	r3, #52	; 0x34
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	4313      	orrs	r3, r2
 8006096:	b29a      	uxth	r2, r3
 8006098:	1c3b      	adds	r3, r7, #0
 800609a:	3336      	adds	r3, #54	; 0x36
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	4313      	orrs	r3, r2
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:417

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	881a      	ldrh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:418
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	8859      	ldrh	r1, [r3, #2]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	8898      	ldrh	r0, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:419
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	899b      	ldrh	r3, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:418
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80060b6:	4303      	orrs	r3, r0
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	430b      	orrs	r3, r1
 80060bc:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:417

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80060be:	4313      	orrs	r3, r2
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	1c3b      	adds	r3, r7, #0
 80060c4:	332a      	adds	r3, #42	; 0x2a
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	1c3b      	adds	r3, r7, #0
 80060ce:	332a      	adds	r3, #42	; 0x2a
 80060d0:	2180      	movs	r1, #128	; 0x80
 80060d2:	0109      	lsls	r1, r1, #4
 80060d4:	430a      	orrs	r2, r1
 80060d6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:422
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	1c3a      	adds	r2, r7, #0
 80060dc:	322a      	adds	r2, #42	; 0x2a
 80060de:	8812      	ldrh	r2, [r2, #0]
 80060e0:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:423
}
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b00e      	add	sp, #56	; 0x38
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	fffff040 	.word	0xfffff040

080060ec <SPI_Cmd>:
SPI_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:433
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	1c0a      	adds	r2, r1, #0
 80060f6:	1cfb      	adds	r3, r7, #3
 80060f8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:438
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060fa:	1cfb      	adds	r3, r7, #3
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d008      	beq.n	8006114 <SPI_Cmd+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:441
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	2240      	movs	r2, #64	; 0x40
 800610a:	4313      	orrs	r3, r2
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	e007      	b.n	8006124 <SPI_Cmd+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:446
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	2240      	movs	r2, #64	; 0x40
 800611c:	4393      	bics	r3, r2
 800611e:	b29a      	uxth	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:448
  }
}
 8006124:	46bd      	mov	sp, r7
 8006126:	b002      	add	sp, #8
 8006128:	bd80      	pop	{r7, pc}
 800612a:	46c0      	nop			; (mov r8, r8)

0800612c <SPI_TIModeCmd>:
SPI_TIModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:465
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	1c0a      	adds	r2, r1, #0
 8006136:	1cfb      	adds	r3, r7, #3
 8006138:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:470
  /* Check the parameters */
  assert_param(IS_SPI_1_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800613a:	1cfb      	adds	r3, r7, #3
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d008      	beq.n	8006154 <SPI_TIModeCmd+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:473
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	889b      	ldrh	r3, [r3, #4]
 8006146:	b29b      	uxth	r3, r3
 8006148:	2210      	movs	r2, #16
 800614a:	4313      	orrs	r3, r2
 800614c:	b29a      	uxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	809a      	strh	r2, [r3, #4]
 8006152:	e007      	b.n	8006164 <SPI_TIModeCmd+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:478
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	889b      	ldrh	r3, [r3, #4]
 8006158:	b29b      	uxth	r3, r3
 800615a:	2210      	movs	r2, #16
 800615c:	4393      	bics	r3, r2
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:480
  }
}
 8006164:	46bd      	mov	sp, r7
 8006166:	b002      	add	sp, #8
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)

0800616c <I2S_Cmd>:
I2S_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:490
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	1c0a      	adds	r2, r1, #0
 8006176:	1cfb      	adds	r3, r7, #3
 8006178:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:494
  /* Check the parameters */
  assert_param(IS_SPI_1_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800617a:	1cfb      	adds	r3, r7, #3
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <I2S_Cmd+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:497
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8b9b      	ldrh	r3, [r3, #28]
 8006186:	b29b      	uxth	r3, r3
 8006188:	2280      	movs	r2, #128	; 0x80
 800618a:	00d2      	lsls	r2, r2, #3
 800618c:	4313      	orrs	r3, r2
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	839a      	strh	r2, [r3, #28]
 8006194:	e007      	b.n	80061a6 <I2S_Cmd+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:502
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8b9b      	ldrh	r3, [r3, #28]
 800619a:	b29a      	uxth	r2, r3
 800619c:	4b03      	ldr	r3, [pc, #12]	; (80061ac <I2S_Cmd+0x40>)
 800619e:	4013      	ands	r3, r2
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:504
  }
}
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b002      	add	sp, #8
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	fffffbff 	.word	0xfffffbff

080061b0 <SPI_DataSizeConfig>:
SPI_DataSizeConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:527
  *            @arg SPI_DataSize_15b: Set data size to 15 bits
  *            @arg SPI_DataSize_16b: Set data size to 16 bits
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	1c0a      	adds	r2, r1, #0
 80061ba:	1cbb      	adds	r3, r7, #2
 80061bc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:528
  uint16_t tmpreg = 0;
 80061be:	1c3b      	adds	r3, r7, #0
 80061c0:	330e      	adds	r3, #14
 80061c2:	2200      	movs	r2, #0
 80061c4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:534
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 80061c6:	1c3b      	adds	r3, r7, #0
 80061c8:	330e      	adds	r3, #14
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	8892      	ldrh	r2, [r2, #4]
 80061ce:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:536
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 80061d0:	1c3b      	adds	r3, r7, #0
 80061d2:	330e      	adds	r3, #14
 80061d4:	1c3a      	adds	r2, r7, #0
 80061d6:	320e      	adds	r2, #14
 80061d8:	8811      	ldrh	r1, [r2, #0]
 80061da:	4a0a      	ldr	r2, [pc, #40]	; (8006204 <SPI_DataSizeConfig+0x54>)
 80061dc:	400a      	ands	r2, r1
 80061de:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:538
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 80061e0:	1c3b      	adds	r3, r7, #0
 80061e2:	330e      	adds	r3, #14
 80061e4:	1c39      	adds	r1, r7, #0
 80061e6:	310e      	adds	r1, #14
 80061e8:	1cba      	adds	r2, r7, #2
 80061ea:	8809      	ldrh	r1, [r1, #0]
 80061ec:	8812      	ldrh	r2, [r2, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:539
  SPIx->CR2 = tmpreg;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	1c3a      	adds	r2, r7, #0
 80061f6:	320e      	adds	r2, #14
 80061f8:	8812      	ldrh	r2, [r2, #0]
 80061fa:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:540
}
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b004      	add	sp, #16
 8006200:	bd80      	pop	{r7, pc}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	fffff0ff 	.word	0xfffff0ff

08006208 <SPI_RxFIFOThresholdConfig>:
SPI_RxFIFOThresholdConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:554
  *            @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
  *                                         level is greater or equal to 1/4. 
  * @retval None
  */
void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	1c0a      	adds	r2, r1, #0
 8006212:	1cbb      	adds	r3, r7, #2
 8006214:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:560
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	889b      	ldrh	r3, [r3, #4]
 800621a:	b29a      	uxth	r2, r3
 800621c:	4b08      	ldr	r3, [pc, #32]	; (8006240 <SPI_RxFIFOThresholdConfig+0x38>)
 800621e:	4013      	ands	r3, r2
 8006220:	b29a      	uxth	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:563

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	889b      	ldrh	r3, [r3, #4]
 800622a:	b29a      	uxth	r2, r3
 800622c:	1cbb      	adds	r3, r7, #2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	4313      	orrs	r3, r2
 8006232:	b29a      	uxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:564
}
 8006238:	46bd      	mov	sp, r7
 800623a:	b002      	add	sp, #8
 800623c:	bd80      	pop	{r7, pc}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	ffffefff 	.word	0xffffefff

08006244 <SPI_BiDirectionalLineConfig>:
SPI_BiDirectionalLineConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:576
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	1c0a      	adds	r2, r1, #0
 800624e:	1cbb      	adds	r3, r7, #2
 8006250:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:580
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8006252:	1cbb      	adds	r3, r7, #2
 8006254:	881a      	ldrh	r2, [r3, #0]
 8006256:	2380      	movs	r3, #128	; 0x80
 8006258:	01db      	lsls	r3, r3, #7
 800625a:	429a      	cmp	r2, r3
 800625c:	d109      	bne.n	8006272 <SPI_BiDirectionalLineConfig+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:583
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	2280      	movs	r2, #128	; 0x80
 8006266:	01d2      	lsls	r2, r2, #7
 8006268:	4313      	orrs	r3, r2
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e007      	b.n	8006282 <SPI_BiDirectionalLineConfig+0x3e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:588
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29a      	uxth	r2, r3
 8006278:	4b03      	ldr	r3, [pc, #12]	; (8006288 <SPI_BiDirectionalLineConfig+0x44>)
 800627a:	4013      	ands	r3, r2
 800627c:	b29a      	uxth	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:590
  }
}
 8006282:	46bd      	mov	sp, r7
 8006284:	b002      	add	sp, #8
 8006286:	bd80      	pop	{r7, pc}
 8006288:	ffffbfff 	.word	0xffffbfff

0800628c <SPI_NSSInternalSoftwareConfig>:
SPI_NSSInternalSoftwareConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:604
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	1c0a      	adds	r2, r1, #0
 8006296:	1cbb      	adds	r3, r7, #2
 8006298:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:609
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800629a:	1cbb      	adds	r3, r7, #2
 800629c:	881a      	ldrh	r2, [r3, #0]
 800629e:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <SPI_NSSInternalSoftwareConfig+0x44>)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d009      	beq.n	80062b8 <SPI_NSSInternalSoftwareConfig+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:612
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2280      	movs	r2, #128	; 0x80
 80062ac:	0052      	lsls	r2, r2, #1
 80062ae:	4313      	orrs	r3, r2
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	e007      	b.n	80062c8 <SPI_NSSInternalSoftwareConfig+0x3c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:617
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29a      	uxth	r2, r3
 80062be:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <SPI_NSSInternalSoftwareConfig+0x48>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:619
  }
}
 80062c8:	46bd      	mov	sp, r7
 80062ca:	b002      	add	sp, #8
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	0000feff 	.word	0x0000feff
 80062d4:	fffffeff 	.word	0xfffffeff

080062d8 <SPI_SSOutputCmd>:
SPI_SSOutputCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:631
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	1c0a      	adds	r2, r1, #0
 80062e2:	1cfb      	adds	r3, r7, #3
 80062e4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:635
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80062e6:	1cfb      	adds	r3, r7, #3
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <SPI_SSOutputCmd+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:638
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	889b      	ldrh	r3, [r3, #4]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2204      	movs	r2, #4
 80062f6:	4313      	orrs	r3, r2
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	809a      	strh	r2, [r3, #4]
 80062fe:	e007      	b.n	8006310 <SPI_SSOutputCmd+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:643
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	889b      	ldrh	r3, [r3, #4]
 8006304:	b29b      	uxth	r3, r3
 8006306:	2204      	movs	r2, #4
 8006308:	4393      	bics	r3, r2
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:645
  }
}
 8006310:	46bd      	mov	sp, r7
 8006312:	b002      	add	sp, #8
 8006314:	bd80      	pop	{r7, pc}
 8006316:	46c0      	nop			; (mov r8, r8)

08006318 <SPI_NSSPulseModeCmd>:
SPI_NSSPulseModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:660
  * @param  NewState: new state of the NSS pulse management mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	1c0a      	adds	r2, r1, #0
 8006322:	1cfb      	adds	r3, r7, #3
 8006324:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:665
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006326:	1cfb      	adds	r3, r7, #3
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d008      	beq.n	8006340 <SPI_NSSPulseModeCmd+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:668
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	889b      	ldrh	r3, [r3, #4]
 8006332:	b29b      	uxth	r3, r3
 8006334:	2208      	movs	r2, #8
 8006336:	4313      	orrs	r3, r2
 8006338:	b29a      	uxth	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	809a      	strh	r2, [r3, #4]
 800633e:	e007      	b.n	8006350 <SPI_NSSPulseModeCmd+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:673
  }
  else
  {
    /* Disable the NSS pulse management mode */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	889b      	ldrh	r3, [r3, #4]
 8006344:	b29b      	uxth	r3, r3
 8006346:	2208      	movs	r2, #8
 8006348:	4393      	bics	r3, r2
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:675
  }
}
 8006350:	46bd      	mov	sp, r7
 8006352:	b002      	add	sp, #8
 8006354:	bd80      	pop	{r7, pc}
 8006356:	46c0      	nop			; (mov r8, r8)

08006358 <SPI_SendData8>:
SPI_SendData8():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:714
  * @param  SPIx: where x can be 1 or 2 in SPI mode to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	1c0a      	adds	r2, r1, #0
 8006362:	1cfb      	adds	r3, r7, #3
 8006364:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:715
  uint32_t spixbase = 0x00;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:720

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:721
  spixbase += 0x0C;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	330c      	adds	r3, #12
 8006372:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:723
  
  *(__IO uint8_t *) spixbase = Data;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	1cfa      	adds	r2, r7, #3
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:724
}
 800637c:	46bd      	mov	sp, r7
 800637e:	b004      	add	sp, #16
 8006380:	bd80      	pop	{r7, pc}
 8006382:	46c0      	nop			; (mov r8, r8)

08006384 <SPI_I2S_SendData16>:
SPI_I2S_SendData16():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:734
  *         the SPI peripheral. 
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	1c0a      	adds	r2, r1, #0
 800638e:	1cbb      	adds	r3, r7, #2
 8006390:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:738
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1cba      	adds	r2, r7, #2
 8006396:	8812      	ldrh	r2, [r2, #0]
 8006398:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:739
}
 800639a:	46bd      	mov	sp, r7
 800639c:	b002      	add	sp, #8
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SPI_ReceiveData8>:
SPI_ReceiveData8():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:747
  * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
  * @param  SPIx: where x can be 1 or 2 in SPI mode to select the SPI peripheral. 
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:748
  uint32_t spixbase = 0x00;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:750
  
  spixbase = (uint32_t)SPIx; 
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:751
  spixbase += 0x0C;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	330c      	adds	r3, #12
 80063b4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:753
  
  return *(__IO uint8_t *) spixbase;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	b2db      	uxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:754
}
 80063bc:	1c18      	adds	r0, r3, #0
 80063be:	46bd      	mov	sp, r7
 80063c0:	b004      	add	sp, #16
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <SPI_I2S_ReceiveData16>:
SPI_I2S_ReceiveData16():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:763
  * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
  *         the SPI peripheral.  
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:764
  return SPIx->DR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	899b      	ldrh	r3, [r3, #12]
 80063d0:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:765
}
 80063d2:	1c18      	adds	r0, r3, #0
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b002      	add	sp, #8
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	46c0      	nop			; (mov r8, r8)

080063dc <SPI_CRCLengthConfig>:
SPI_CRCLengthConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:844
  *            @arg SPI_CRCLength_8b: Set CRC Calculation to 8 bits
  *            @arg SPI_CRCLength_16b: Set CRC Calculation to 16 bits
  * @retval None
  */
void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	1c0a      	adds	r2, r1, #0
 80063e6:	1cbb      	adds	r3, r7, #2
 80063e8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:850
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));

  /* Clear CRCL bit */
  SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	4b08      	ldr	r3, [pc, #32]	; (8006414 <SPI_CRCLengthConfig+0x38>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:853

  /* Set new CRCL bit value */
  SPIx->CR1 |= SPI_CRCLength;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29a      	uxth	r2, r3
 8006400:	1cbb      	adds	r3, r7, #2
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	4313      	orrs	r3, r2
 8006406:	b29a      	uxth	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:854
}
 800640c:	46bd      	mov	sp, r7
 800640e:	b002      	add	sp, #8
 8006410:	bd80      	pop	{r7, pc}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	fffff7ff 	.word	0xfffff7ff

08006418 <SPI_CalculateCRC>:
SPI_CalculateCRC():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:866
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	1c0a      	adds	r2, r1, #0
 8006422:	1cfb      	adds	r3, r7, #3
 8006424:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:871
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006426:	1cfb      	adds	r3, r7, #3
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <SPI_CalculateCRC+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:874
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	2280      	movs	r2, #128	; 0x80
 8006436:	0192      	lsls	r2, r2, #6
 8006438:	4313      	orrs	r3, r2
 800643a:	b29a      	uxth	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	e007      	b.n	8006452 <SPI_CalculateCRC+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:879
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29a      	uxth	r2, r3
 8006448:	4b03      	ldr	r3, [pc, #12]	; (8006458 <SPI_CalculateCRC+0x40>)
 800644a:	4013      	ands	r3, r2
 800644c:	b29a      	uxth	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:881
  }
}
 8006452:	46bd      	mov	sp, r7
 8006454:	b002      	add	sp, #8
 8006456:	bd80      	pop	{r7, pc}
 8006458:	ffffdfff 	.word	0xffffdfff

0800645c <SPI_TransmitCRC>:
SPI_TransmitCRC():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:889
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:894
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	2280      	movs	r2, #128	; 0x80
 800646c:	0152      	lsls	r2, r2, #5
 800646e:	4313      	orrs	r3, r2
 8006470:	b29a      	uxth	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:895
}
 8006476:	46bd      	mov	sp, r7
 8006478:	b002      	add	sp, #8
 800647a:	bd80      	pop	{r7, pc}

0800647c <SPI_GetCRC>:
SPI_GetCRC():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:907
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	1c0a      	adds	r2, r1, #0
 8006486:	1cfb      	adds	r3, r7, #3
 8006488:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:908
  uint16_t crcreg = 0;
 800648a:	1c3b      	adds	r3, r7, #0
 800648c:	330e      	adds	r3, #14
 800648e:	2200      	movs	r2, #0
 8006490:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:913
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
 8006492:	1cfb      	adds	r3, r7, #3
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d005      	beq.n	80064a6 <SPI_GetCRC+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:916
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800649a:	1c3b      	adds	r3, r7, #0
 800649c:	330e      	adds	r3, #14
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	8b12      	ldrh	r2, [r2, #24]
 80064a2:	801a      	strh	r2, [r3, #0]
 80064a4:	e004      	b.n	80064b0 <SPI_GetCRC+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:921
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80064a6:	1c3b      	adds	r3, r7, #0
 80064a8:	330e      	adds	r3, #14
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	8a92      	ldrh	r2, [r2, #20]
 80064ae:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:924
  }
  /* Return the selected CRC register */
  return crcreg;
 80064b0:	1c3b      	adds	r3, r7, #0
 80064b2:	330e      	adds	r3, #14
 80064b4:	881b      	ldrh	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:925
}
 80064b6:	1c18      	adds	r0, r3, #0
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b004      	add	sp, #16
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	46c0      	nop			; (mov r8, r8)

080064c0 <SPI_GetCRCPolynomial>:
SPI_GetCRCPolynomial():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:933
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:938
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8a1b      	ldrh	r3, [r3, #16]
 80064cc:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:939
}
 80064ce:	1c18      	adds	r0, r3, #0
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b002      	add	sp, #8
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	46c0      	nop			; (mov r8, r8)

080064d8 <SPI_I2S_DMACmd>:
SPI_I2S_DMACmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:971
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	1cbb      	adds	r3, r7, #2
 80064e2:	8019      	strh	r1, [r3, #0]
 80064e4:	1c7b      	adds	r3, r7, #1
 80064e6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:977
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80064e8:	1c7b      	adds	r3, r7, #1
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <SPI_I2S_DMACmd+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:980
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	889b      	ldrh	r3, [r3, #4]
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	1cbb      	adds	r3, r7, #2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	809a      	strh	r2, [r3, #4]
 8006502:	e00a      	b.n	800651a <SPI_I2S_DMACmd+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:985
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	889b      	ldrh	r3, [r3, #4]
 8006508:	b29b      	uxth	r3, r3
 800650a:	1cba      	adds	r2, r7, #2
 800650c:	8812      	ldrh	r2, [r2, #0]
 800650e:	43d2      	mvns	r2, r2
 8006510:	b292      	uxth	r2, r2
 8006512:	4013      	ands	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:987
  }
}
 800651a:	46bd      	mov	sp, r7
 800651c:	b002      	add	sp, #8
 800651e:	bd80      	pop	{r7, pc}

08006520 <SPI_LastDMATransferCmd>:
SPI_LastDMATransferCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1008
  *            @arg SPI_LastDMATransfer_TxOddRxOdd: Number of data for transmission Odd
  *                                                 and number of data for reception Odd.
  * @retval None
  */
void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	1c0a      	adds	r2, r1, #0
 800652a:	1cbb      	adds	r3, r7, #2
 800652c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1014
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));

  /* Clear LDMA_TX and LDMA_RX bits */
  SPIx->CR2 &= CR2_LDMA_MASK;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	889b      	ldrh	r3, [r3, #4]
 8006532:	b29a      	uxth	r2, r3
 8006534:	4b08      	ldr	r3, [pc, #32]	; (8006558 <SPI_LastDMATransferCmd+0x38>)
 8006536:	4013      	ands	r3, r2
 8006538:	b29a      	uxth	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1017

  /* Set new LDMA_TX and LDMA_RX bits value */
  SPIx->CR2 |= SPI_LastDMATransfer; 
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	889b      	ldrh	r3, [r3, #4]
 8006542:	b29a      	uxth	r2, r3
 8006544:	1cbb      	adds	r3, r7, #2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	4313      	orrs	r3, r2
 800654a:	b29a      	uxth	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1018
}
 8006550:	46bd      	mov	sp, r7
 8006552:	b002      	add	sp, #8
 8006554:	bd80      	pop	{r7, pc}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	ffff9fff 	.word	0xffff9fff

0800655c <SPI_I2S_ITConfig>:
SPI_I2S_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1113
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	1cfb      	adds	r3, r7, #3
 8006566:	7019      	strb	r1, [r3, #0]
 8006568:	1cbb      	adds	r3, r7, #2
 800656a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1114
  uint16_t itpos = 0, itmask = 0 ;
 800656c:	1c3b      	adds	r3, r7, #0
 800656e:	330e      	adds	r3, #14
 8006570:	2200      	movs	r2, #0
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	1c3b      	adds	r3, r7, #0
 8006576:	330c      	adds	r3, #12
 8006578:	2200      	movs	r2, #0
 800657a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1122
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800657c:	1cfb      	adds	r3, r7, #3
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	b2da      	uxtb	r2, r3
 8006584:	1c3b      	adds	r3, r7, #0
 8006586:	330e      	adds	r3, #14
 8006588:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1125

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800658a:	1c3b      	adds	r3, r7, #0
 800658c:	330e      	adds	r3, #14
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	2201      	movs	r2, #1
 8006592:	409a      	lsls	r2, r3
 8006594:	1c3b      	adds	r3, r7, #0
 8006596:	330c      	adds	r3, #12
 8006598:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1127

  if (NewState != DISABLE)
 800659a:	1cbb      	adds	r3, r7, #2
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <SPI_I2S_ITConfig+0x5c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1130
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	889b      	ldrh	r3, [r3, #4]
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	1c3b      	adds	r3, r7, #0
 80065aa:	330c      	adds	r3, #12
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	809a      	strh	r2, [r3, #4]
 80065b6:	e00b      	b.n	80065d0 <SPI_I2S_ITConfig+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1135
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	889b      	ldrh	r3, [r3, #4]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	1c3a      	adds	r2, r7, #0
 80065c0:	320c      	adds	r2, #12
 80065c2:	8812      	ldrh	r2, [r2, #0]
 80065c4:	43d2      	mvns	r2, r2
 80065c6:	b292      	uxth	r2, r2
 80065c8:	4013      	ands	r3, r2
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1137
  }
}
 80065d0:	46bd      	mov	sp, r7
 80065d2:	b004      	add	sp, #16
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	46c0      	nop			; (mov r8, r8)

080065d8 <SPI_GetTransmissionFIFOStatus>:
SPI_GetTransmissionFIFOStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1149
  *          - SPI_TransmissionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *          - SPI_TransmissionFIFOStatus_HalfFull: if more than 1 half-full.
  *          - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1151
  /* Get the SPIx Transmission FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	891b      	ldrh	r3, [r3, #8]
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	23c0      	movs	r3, #192	; 0xc0
 80065e8:	015b      	lsls	r3, r3, #5
 80065ea:	4013      	ands	r3, r2
 80065ec:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1152
}
 80065ee:	1c18      	adds	r0, r3, #0
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)

080065f8 <SPI_GetReceptionFIFOStatus>:
SPI_GetReceptionFIFOStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1164
  *          - SPI_ReceptionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *          - SPI_ReceptionFIFOStatus_HalfFull: if more than 1 half-full.
  *          - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1166
  /* Get the SPIx Reception FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	891b      	ldrh	r3, [r3, #8]
 8006604:	b29a      	uxth	r2, r3
 8006606:	23c0      	movs	r3, #192	; 0xc0
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	4013      	ands	r3, r2
 800660c:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1167
}
 800660e:	1c18      	adds	r0, r3, #0
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}
 8006616:	46c0      	nop			; (mov r8, r8)

08006618 <SPI_I2S_GetFlagStatus>:
SPI_I2S_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1187
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	1c0a      	adds	r2, r1, #0
 8006622:	1cbb      	adds	r3, r7, #2
 8006624:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1188
  FlagStatus bitstatus = RESET;
 8006626:	1c3b      	adds	r3, r7, #0
 8006628:	330f      	adds	r3, #15
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1194
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	891b      	ldrh	r3, [r3, #8]
 8006632:	b29b      	uxth	r3, r3
 8006634:	1cba      	adds	r2, r7, #2
 8006636:	8812      	ldrh	r2, [r2, #0]
 8006638:	4013      	ands	r3, r2
 800663a:	b29b      	uxth	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <SPI_I2S_GetFlagStatus+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1197
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8006640:	1c3b      	adds	r3, r7, #0
 8006642:	330f      	adds	r3, #15
 8006644:	2201      	movs	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e003      	b.n	8006652 <SPI_I2S_GetFlagStatus+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1202
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800664a:	1c3b      	adds	r3, r7, #0
 800664c:	330f      	adds	r3, #15
 800664e:	2200      	movs	r2, #0
 8006650:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1205
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8006652:	1c3b      	adds	r3, r7, #0
 8006654:	330f      	adds	r3, #15
 8006656:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1206
}
 8006658:	1c18      	adds	r0, r3, #0
 800665a:	46bd      	mov	sp, r7
 800665c:	b004      	add	sp, #16
 800665e:	bd80      	pop	{r7, pc}

08006660 <SPI_I2S_ClearFlag>:
SPI_I2S_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1222
  *         operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by
  *         a write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	1c0a      	adds	r2, r1, #0
 800666a:	1cbb      	adds	r3, r7, #2
 800666c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1228
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800666e:	1cbb      	adds	r3, r7, #2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	43db      	mvns	r3, r3
 8006674:	b29a      	uxth	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1229
}
 800667a:	46bd      	mov	sp, r7
 800667c:	b002      	add	sp, #8
 800667e:	bd80      	pop	{r7, pc}

08006680 <SPI_I2S_GetITStatus>:
SPI_I2S_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1246
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_FRE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	1c0a      	adds	r2, r1, #0
 800668a:	1cfb      	adds	r3, r7, #3
 800668c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1247
  ITStatus bitstatus = RESET;
 800668e:	1c3b      	adds	r3, r7, #0
 8006690:	330f      	adds	r3, #15
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1248
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8006696:	1c3b      	adds	r3, r7, #0
 8006698:	330c      	adds	r3, #12
 800669a:	2200      	movs	r2, #0
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	1c3b      	adds	r3, r7, #0
 80066a0:	330a      	adds	r3, #10
 80066a2:	2200      	movs	r2, #0
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	1c3b      	adds	r3, r7, #0
 80066a8:	3308      	adds	r3, #8
 80066aa:	2200      	movs	r2, #0
 80066ac:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1255
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80066ae:	1cfb      	adds	r3, r7, #3
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	230f      	movs	r3, #15
 80066b4:	4013      	ands	r3, r2
 80066b6:	2201      	movs	r2, #1
 80066b8:	409a      	lsls	r2, r3
 80066ba:	1c3b      	adds	r3, r7, #0
 80066bc:	330c      	adds	r3, #12
 80066be:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1258

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 80066c0:	1cfb      	adds	r3, r7, #3
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	1c3b      	adds	r3, r7, #0
 80066ca:	330a      	adds	r3, #10
 80066cc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1261

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80066ce:	1c3b      	adds	r3, r7, #0
 80066d0:	330a      	adds	r3, #10
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	2201      	movs	r2, #1
 80066d6:	409a      	lsls	r2, r3
 80066d8:	1c3b      	adds	r3, r7, #0
 80066da:	330a      	adds	r3, #10
 80066dc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1264

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	889b      	ldrh	r3, [r3, #4]
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	1c3b      	adds	r3, r7, #0
 80066e6:	3308      	adds	r3, #8
 80066e8:	1c39      	adds	r1, r7, #0
 80066ea:	310a      	adds	r1, #10
 80066ec:	8809      	ldrh	r1, [r1, #0]
 80066ee:	400a      	ands	r2, r1
 80066f0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1267

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	891b      	ldrh	r3, [r3, #8]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	1c3a      	adds	r2, r7, #0
 80066fa:	320c      	adds	r2, #12
 80066fc:	8812      	ldrh	r2, [r2, #0]
 80066fe:	4013      	ands	r3, r2
 8006700:	b29b      	uxth	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d009      	beq.n	800671a <SPI_I2S_GetITStatus+0x9a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1267 (discriminator 1)
 8006706:	1c3b      	adds	r3, r7, #0
 8006708:	3308      	adds	r3, #8
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <SPI_I2S_GetITStatus+0x9a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1270
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8006710:	1c3b      	adds	r3, r7, #0
 8006712:	330f      	adds	r3, #15
 8006714:	2201      	movs	r2, #1
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	e003      	b.n	8006722 <SPI_I2S_GetITStatus+0xa2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1275
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800671a:	1c3b      	adds	r3, r7, #0
 800671c:	330f      	adds	r3, #15
 800671e:	2200      	movs	r2, #0
 8006720:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1278
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8006722:	1c3b      	adds	r3, r7, #0
 8006724:	330f      	adds	r3, #15
 8006726:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c:1279
}
 8006728:	1c18      	adds	r0, r3, #0
 800672a:	46bd      	mov	sp, r7
 800672c:	b004      	add	sp, #16
 800672e:	bd80      	pop	{r7, pc}

08006730 <SYSCFG_DeInit>:
SYSCFG_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:93
  * @note   CFGR2 register is not affected by APB reset.
  * @note   CLABBB configuration bits are locked when set.
  * @note   To unlock the configuration, perform a system reset.
  */
void SYSCFG_DeInit(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:95
  /* Set SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
  SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
 8006734:	4b0d      	ldr	r3, [pc, #52]	; (800676c <SYSCFG_DeInit+0x3c>)
 8006736:	4a0d      	ldr	r2, [pc, #52]	; (800676c <SYSCFG_DeInit+0x3c>)
 8006738:	6811      	ldr	r1, [r2, #0]
 800673a:	2203      	movs	r2, #3
 800673c:	400a      	ands	r2, r1
 800673e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:97
  /* Set EXTICRx registers to reset value */
  SYSCFG->EXTICR[0] = 0;
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <SYSCFG_DeInit+0x3c>)
 8006742:	2200      	movs	r2, #0
 8006744:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:98
  SYSCFG->EXTICR[1] = 0;
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <SYSCFG_DeInit+0x3c>)
 8006748:	2200      	movs	r2, #0
 800674a:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:99
  SYSCFG->EXTICR[2] = 0;
 800674c:	4b07      	ldr	r3, [pc, #28]	; (800676c <SYSCFG_DeInit+0x3c>)
 800674e:	2200      	movs	r2, #0
 8006750:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:100
  SYSCFG->EXTICR[3] = 0;
 8006752:	4b06      	ldr	r3, [pc, #24]	; (800676c <SYSCFG_DeInit+0x3c>)
 8006754:	2200      	movs	r2, #0
 8006756:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:102
  /* Set CFGR2 register to reset value: clear SRAM parity error flag */
  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_CFGR2_SRAM_PE;
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <SYSCFG_DeInit+0x3c>)
 800675a:	4a04      	ldr	r2, [pc, #16]	; (800676c <SYSCFG_DeInit+0x3c>)
 800675c:	6992      	ldr	r2, [r2, #24]
 800675e:	2180      	movs	r1, #128	; 0x80
 8006760:	0049      	lsls	r1, r1, #1
 8006762:	430a      	orrs	r2, r1
 8006764:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:103
}
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	40010000 	.word	0x40010000

08006770 <SYSCFG_MemoryRemapConfig>:
SYSCFG_MemoryRemapConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:115
  *            @arg SYSCFG_MemoryRemap_SystemMemory: System Flash memory mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SRAM: Embedded SRAM mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint32_t SYSCFG_MemoryRemap)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:116
  uint32_t tmpctrl = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:122

  /* Check the parameter */
  assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));

  /* Get CFGR1 register value */
  tmpctrl = SYSCFG->CFGR1;
 800677c:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <SYSCFG_MemoryRemapConfig+0x30>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:125

  /* Clear MEM_MODE bits */
  tmpctrl &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2203      	movs	r2, #3
 8006786:	4393      	bics	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:128

  /* Set the new MEM_MODE bits value */
  tmpctrl |= (uint32_t) SYSCFG_MemoryRemap;
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:131

  /* Set CFGR1 register with the new memory remap configuration */
  SYSCFG->CFGR1 = tmpctrl;
 8006792:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <SYSCFG_MemoryRemapConfig+0x30>)
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:132
}
 8006798:	46bd      	mov	sp, r7
 800679a:	b004      	add	sp, #16
 800679c:	bd80      	pop	{r7, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	40010000 	.word	0x40010000

080067a4 <SYSCFG_DMAChannelRemapConfig>:
SYSCFG_DMAChannelRemapConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:155
  *         SYSCFG_DMAChannelRemapConfig(SYSCFG_DMARemap_TIM17, Disable) to map
  *         TIM17 DMA requests to channel 1 (default mapping)
  * @retval None
  */
void SYSCFG_DMAChannelRemapConfig(uint32_t SYSCFG_DMARemap, FunctionalState NewState)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	1c0a      	adds	r2, r1, #0
 80067ae:	1cfb      	adds	r3, r7, #3
 80067b0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:160
  /* Check the parameters */
  assert_param(IS_SYSCFG_DMA_REMAP(SYSCFG_DMARemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80067b2:	1cfb      	adds	r3, r7, #3
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <SYSCFG_DMAChannelRemapConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:163
  {
    /* Remap the DMA channel */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
 80067ba:	4b08      	ldr	r3, [pc, #32]	; (80067dc <SYSCFG_DMAChannelRemapConfig+0x38>)
 80067bc:	4a07      	ldr	r2, [pc, #28]	; (80067dc <SYSCFG_DMAChannelRemapConfig+0x38>)
 80067be:	6811      	ldr	r1, [r2, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	e006      	b.n	80067d6 <SYSCFG_DMAChannelRemapConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:168
  }
  else
  {
    /* use the default DMA channel mapping */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_DMARemap);
 80067c8:	4b04      	ldr	r3, [pc, #16]	; (80067dc <SYSCFG_DMAChannelRemapConfig+0x38>)
 80067ca:	4a04      	ldr	r2, [pc, #16]	; (80067dc <SYSCFG_DMAChannelRemapConfig+0x38>)
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	43c9      	mvns	r1, r1
 80067d2:	400a      	ands	r2, r1
 80067d4:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:170
  }
}
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40010000 	.word	0x40010000

080067e0 <SYSCFG_I2CFastModePlusConfig>:
SYSCFG_I2CFastModePlusConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:187
  * @note   ENABLE:  Enable fast mode plus driving capability for selected pin
  * @note   DISABLE: Disable fast mode plus driving capability for selected pin
  * @retval None
  */
void SYSCFG_I2CFastModePlusConfig(uint32_t SYSCFG_I2CFastModePlus, FunctionalState NewState)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	1c0a      	adds	r2, r1, #0
 80067ea:	1cfb      	adds	r3, r7, #3
 80067ec:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:192
  /* Check the parameters */
  assert_param(IS_SYSCFG_I2C_FMP(SYSCFG_I2CFastModePlus));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80067ee:	1cfb      	adds	r3, r7, #3
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d006      	beq.n	8006804 <SYSCFG_I2CFastModePlusConfig+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:195
  {
    /* Enable fast mode plus driving capability for selected pin */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
 80067f6:	4b08      	ldr	r3, [pc, #32]	; (8006818 <SYSCFG_I2CFastModePlusConfig+0x38>)
 80067f8:	4a07      	ldr	r2, [pc, #28]	; (8006818 <SYSCFG_I2CFastModePlusConfig+0x38>)
 80067fa:	6811      	ldr	r1, [r2, #0]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	430a      	orrs	r2, r1
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	e006      	b.n	8006812 <SYSCFG_I2CFastModePlusConfig+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:200
  }
  else
  {
    /* Disable fast mode plus driving capability for selected pin */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <SYSCFG_I2CFastModePlusConfig+0x38>)
 8006806:	4a04      	ldr	r2, [pc, #16]	; (8006818 <SYSCFG_I2CFastModePlusConfig+0x38>)
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	43c9      	mvns	r1, r1
 800680e:	400a      	ands	r2, r1
 8006810:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:202
  }
}
 8006812:	46bd      	mov	sp, r7
 8006814:	b002      	add	sp, #8
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40010000 	.word	0x40010000

0800681c <SYSCFG_EXTILineConfig>:
SYSCFG_EXTILineConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:213
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800681c:	b5b0      	push	{r4, r5, r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	1c0a      	adds	r2, r1, #0
 8006824:	1dfb      	adds	r3, r7, #7
 8006826:	1c01      	adds	r1, r0, #0
 8006828:	7019      	strb	r1, [r3, #0]
 800682a:	1dbb      	adds	r3, r7, #6
 800682c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:214
  uint32_t tmp = 0x00;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:220

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8006832:	1dbb      	adds	r3, r7, #6
 8006834:	781a      	ldrb	r2, [r3, #0]
 8006836:	2303      	movs	r3, #3
 8006838:	4013      	ands	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	220f      	movs	r2, #15
 800683e:	1c11      	adds	r1, r2, #0
 8006840:	4099      	lsls	r1, r3
 8006842:	1c0b      	adds	r3, r1, #0
 8006844:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:221
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8006846:	4b18      	ldr	r3, [pc, #96]	; (80068a8 <SYSCFG_EXTILineConfig+0x8c>)
 8006848:	1dba      	adds	r2, r7, #6
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	0892      	lsrs	r2, r2, #2
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	4915      	ldr	r1, [pc, #84]	; (80068a8 <SYSCFG_EXTILineConfig+0x8c>)
 8006852:	1db8      	adds	r0, r7, #6
 8006854:	7800      	ldrb	r0, [r0, #0]
 8006856:	0880      	lsrs	r0, r0, #2
 8006858:	b2c0      	uxtb	r0, r0
 800685a:	3002      	adds	r0, #2
 800685c:	0080      	lsls	r0, r0, #2
 800685e:	5841      	ldr	r1, [r0, r1]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	43c0      	mvns	r0, r0
 8006864:	4001      	ands	r1, r0
 8006866:	3202      	adds	r2, #2
 8006868:	0092      	lsls	r2, r2, #2
 800686a:	50d1      	str	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:222
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800686c:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <SYSCFG_EXTILineConfig+0x8c>)
 800686e:	1dba      	adds	r2, r7, #6
 8006870:	7812      	ldrb	r2, [r2, #0]
 8006872:	0892      	lsrs	r2, r2, #2
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	490c      	ldr	r1, [pc, #48]	; (80068a8 <SYSCFG_EXTILineConfig+0x8c>)
 8006878:	1db8      	adds	r0, r7, #6
 800687a:	7800      	ldrb	r0, [r0, #0]
 800687c:	0880      	lsrs	r0, r0, #2
 800687e:	b2c0      	uxtb	r0, r0
 8006880:	3002      	adds	r0, #2
 8006882:	0080      	lsls	r0, r0, #2
 8006884:	5840      	ldr	r0, [r0, r1]
 8006886:	1df9      	adds	r1, r7, #7
 8006888:	780c      	ldrb	r4, [r1, #0]
 800688a:	1db9      	adds	r1, r7, #6
 800688c:	780d      	ldrb	r5, [r1, #0]
 800688e:	2103      	movs	r1, #3
 8006890:	4029      	ands	r1, r5
 8006892:	0089      	lsls	r1, r1, #2
 8006894:	1c25      	adds	r5, r4, #0
 8006896:	408d      	lsls	r5, r1
 8006898:	1c29      	adds	r1, r5, #0
 800689a:	4301      	orrs	r1, r0
 800689c:	3202      	adds	r2, #2
 800689e:	0092      	lsls	r2, r2, #2
 80068a0:	50d1      	str	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:223
}
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b004      	add	sp, #16
 80068a6:	bdb0      	pop	{r4, r5, r7, pc}
 80068a8:	40010000 	.word	0x40010000

080068ac <SYSCFG_BreakConfig>:
SYSCFG_BreakConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:237
  *            @arg SYSCFG_Break_SRAMParity: Connects the SRAM_PARITY error signal to the Break Input of TIM1 .
  *            @arg SYSCFG_Break_Lockup: Connects Lockup output of CortexM0 to the break input of TIM1.
  * @retval None
  */
void SYSCFG_BreakConfig(uint32_t SYSCFG_Break)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:241
  /* Check the parameter */
  assert_param(IS_SYSCFG_LOCK_CONFIG(SYSCFG_Break));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Break;
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <SYSCFG_BreakConfig+0x1c>)
 80068b6:	4a04      	ldr	r2, [pc, #16]	; (80068c8 <SYSCFG_BreakConfig+0x1c>)
 80068b8:	6991      	ldr	r1, [r2, #24]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	430a      	orrs	r2, r1
 80068be:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:242
}
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b002      	add	sp, #8
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	40010000 	.word	0x40010000

080068cc <SYSCFG_GetFlagStatus>:
SYSCFG_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:252
  *          This parameter can be one of the following values:
  *            @arg SYSCFG_FLAG_PE: SRAM parity error flag.
  * @retval The new state of SYSCFG_Flag (SET or RESET).
  */
FlagStatus SYSCFG_GetFlagStatus(uint32_t SYSCFG_Flag)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:253
  FlagStatus bitstatus = RESET;
 80068d4:	1c3b      	adds	r3, r7, #0
 80068d6:	330f      	adds	r3, #15
 80068d8:	2200      	movs	r2, #0
 80068da:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:259

  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  /* Check the status of the specified SPI flag */
  if ((SYSCFG->CFGR2 & SYSCFG_CFGR2_SRAM_PE) != (uint32_t)RESET)
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <SYSCFG_GetFlagStatus+0x3c>)
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	2380      	movs	r3, #128	; 0x80
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4013      	ands	r3, r2
 80068e6:	d004      	beq.n	80068f2 <SYSCFG_GetFlagStatus+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:262
  {
    /* SYSCFG_Flag is set */
    bitstatus = SET;
 80068e8:	1c3b      	adds	r3, r7, #0
 80068ea:	330f      	adds	r3, #15
 80068ec:	2201      	movs	r2, #1
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	e003      	b.n	80068fa <SYSCFG_GetFlagStatus+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:267
  }
  else
  {
    /* SYSCFG_Flag is reset */
    bitstatus = RESET;
 80068f2:	1c3b      	adds	r3, r7, #0
 80068f4:	330f      	adds	r3, #15
 80068f6:	2200      	movs	r2, #0
 80068f8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:270
  }
  /* Return the SYSCFG_Flag status */
  return  bitstatus;
 80068fa:	1c3b      	adds	r3, r7, #0
 80068fc:	330f      	adds	r3, #15
 80068fe:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:271
}
 8006900:	1c18      	adds	r0, r3, #0
 8006902:	46bd      	mov	sp, r7
 8006904:	b004      	add	sp, #16
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40010000 	.word	0x40010000

0800690c <SYSCFG_ClearFlag>:
SYSCFG_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:281
  *          This parameter can be any combination of the following values:
  *            @arg SYSCFG_FLAG_PE: SRAM parity error flag.
  * @retval None
  */
void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:285
  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Flag;
 8006914:	4b04      	ldr	r3, [pc, #16]	; (8006928 <SYSCFG_ClearFlag+0x1c>)
 8006916:	4a04      	ldr	r2, [pc, #16]	; (8006928 <SYSCFG_ClearFlag+0x1c>)
 8006918:	6991      	ldr	r1, [r2, #24]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	430a      	orrs	r2, r1
 800691e:	619a      	str	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_syscfg.c:286
}
 8006920:	46bd      	mov	sp, r7
 8006922:	b002      	add	sp, #8
 8006924:	bd80      	pop	{r7, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	40010000 	.word	0x40010000

0800692c <TIM_DeInit>:
TIM_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:192
  * @param  TIMx: where x can be 1, 2, 3, 6, 14, 15, 16 and 17 to select the TIM peripheral.
  * @retval None
  *   
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:196
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 

  if (TIMx == TIM1)
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	4b3f      	ldr	r3, [pc, #252]	; (8006a34 <TIM_DeInit+0x108>)
 8006938:	429a      	cmp	r2, r3
 800693a:	d10c      	bne.n	8006956 <TIM_DeInit+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:198
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	1c18      	adds	r0, r3, #0
 8006942:	2101      	movs	r1, #1
 8006944:	f7fd ff7c 	bl	8004840 <RCC_APB2PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:199
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	1c18      	adds	r0, r3, #0
 800694e:	2100      	movs	r1, #0
 8006950:	f7fd ff76 	bl	8004840 <RCC_APB2PeriphResetCmd>
 8006954:	e06a      	b.n	8006a2c <TIM_DeInit+0x100>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:201
  }     
  else if (TIMx == TIM2)
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	2380      	movs	r3, #128	; 0x80
 800695a:	05db      	lsls	r3, r3, #23
 800695c:	429a      	cmp	r2, r3
 800695e:	d108      	bne.n	8006972 <TIM_DeInit+0x46>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:203
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8006960:	2001      	movs	r0, #1
 8006962:	2101      	movs	r1, #1
 8006964:	f7fd ff8a 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:204
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8006968:	2001      	movs	r0, #1
 800696a:	2100      	movs	r1, #0
 800696c:	f7fd ff86 	bl	800487c <RCC_APB1PeriphResetCmd>
 8006970:	e05c      	b.n	8006a2c <TIM_DeInit+0x100>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:206
  }
  else if (TIMx == TIM3)
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4b30      	ldr	r3, [pc, #192]	; (8006a38 <TIM_DeInit+0x10c>)
 8006976:	429a      	cmp	r2, r3
 8006978:	d108      	bne.n	800698c <TIM_DeInit+0x60>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:208
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800697a:	2002      	movs	r0, #2
 800697c:	2101      	movs	r1, #1
 800697e:	f7fd ff7d 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:209
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8006982:	2002      	movs	r0, #2
 8006984:	2100      	movs	r1, #0
 8006986:	f7fd ff79 	bl	800487c <RCC_APB1PeriphResetCmd>
 800698a:	e04f      	b.n	8006a2c <TIM_DeInit+0x100>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:211
  }
  else if (TIMx == TIM6)
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	4b2b      	ldr	r3, [pc, #172]	; (8006a3c <TIM_DeInit+0x110>)
 8006990:	429a      	cmp	r2, r3
 8006992:	d108      	bne.n	80069a6 <TIM_DeInit+0x7a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:213
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8006994:	2010      	movs	r0, #16
 8006996:	2101      	movs	r1, #1
 8006998:	f7fd ff70 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:214
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800699c:	2010      	movs	r0, #16
 800699e:	2100      	movs	r1, #0
 80069a0:	f7fd ff6c 	bl	800487c <RCC_APB1PeriphResetCmd>
 80069a4:	e042      	b.n	8006a2c <TIM_DeInit+0x100>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:216
  } 
  else if (TIMx == TIM14) 
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4b25      	ldr	r3, [pc, #148]	; (8006a40 <TIM_DeInit+0x114>)
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d10c      	bne.n	80069c8 <TIM_DeInit+0x9c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:218
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80069ae:	2380      	movs	r3, #128	; 0x80
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	1c18      	adds	r0, r3, #0
 80069b4:	2101      	movs	r1, #1
 80069b6:	f7fd ff61 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:219
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 80069ba:	2380      	movs	r3, #128	; 0x80
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	1c18      	adds	r0, r3, #0
 80069c0:	2100      	movs	r1, #0
 80069c2:	f7fd ff5b 	bl	800487c <RCC_APB1PeriphResetCmd>
 80069c6:	e031      	b.n	8006a2c <TIM_DeInit+0x100>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:221
  }        
  else if (TIMx == TIM15)
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4b1e      	ldr	r3, [pc, #120]	; (8006a44 <TIM_DeInit+0x118>)
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d10c      	bne.n	80069ea <TIM_DeInit+0xbe>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:223
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 80069d0:	2380      	movs	r3, #128	; 0x80
 80069d2:	025b      	lsls	r3, r3, #9
 80069d4:	1c18      	adds	r0, r3, #0
 80069d6:	2101      	movs	r1, #1
 80069d8:	f7fd ff32 	bl	8004840 <RCC_APB2PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:224
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 80069dc:	2380      	movs	r3, #128	; 0x80
 80069de:	025b      	lsls	r3, r3, #9
 80069e0:	1c18      	adds	r0, r3, #0
 80069e2:	2100      	movs	r1, #0
 80069e4:	f7fd ff2c 	bl	8004840 <RCC_APB2PeriphResetCmd>
 80069e8:	e020      	b.n	8006a2c <TIM_DeInit+0x100>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:226
  } 
  else if (TIMx == TIM16)
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <TIM_DeInit+0x11c>)
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d10c      	bne.n	8006a0c <TIM_DeInit+0xe0>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:228
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	029b      	lsls	r3, r3, #10
 80069f6:	1c18      	adds	r0, r3, #0
 80069f8:	2101      	movs	r1, #1
 80069fa:	f7fd ff21 	bl	8004840 <RCC_APB2PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:229
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 80069fe:	2380      	movs	r3, #128	; 0x80
 8006a00:	029b      	lsls	r3, r3, #10
 8006a02:	1c18      	adds	r0, r3, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	f7fd ff1b 	bl	8004840 <RCC_APB2PeriphResetCmd>
 8006a0a:	e00f      	b.n	8006a2c <TIM_DeInit+0x100>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:233
  } 
  else
  {
    if (TIMx == TIM17)
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <TIM_DeInit+0x120>)
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d10b      	bne.n	8006a2c <TIM_DeInit+0x100>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:235
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8006a14:	2380      	movs	r3, #128	; 0x80
 8006a16:	02db      	lsls	r3, r3, #11
 8006a18:	1c18      	adds	r0, r3, #0
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	f7fd ff10 	bl	8004840 <RCC_APB2PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:236
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8006a20:	2380      	movs	r3, #128	; 0x80
 8006a22:	02db      	lsls	r3, r3, #11
 8006a24:	1c18      	adds	r0, r3, #0
 8006a26:	2100      	movs	r1, #0
 8006a28:	f7fd ff0a 	bl	8004840 <RCC_APB2PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:240
    }  
  }
     
}
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b002      	add	sp, #8
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40000400 	.word	0x40000400
 8006a3c:	40001000 	.word	0x40001000
 8006a40:	40002000 	.word	0x40002000
 8006a44:	40014000 	.word	0x40014000
 8006a48:	40014400 	.word	0x40014400
 8006a4c:	40014800 	.word	0x40014800

08006a50 <TIM_TimeBaseInit>:
TIM_TimeBaseInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:253
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:254
  uint16_t tmpcr1 = 0;
 8006a5a:	1c3b      	adds	r3, r7, #0
 8006a5c:	330e      	adds	r3, #14
 8006a5e:	2200      	movs	r2, #0
 8006a60:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:261
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8006a62:	1c3b      	adds	r3, r7, #0
 8006a64:	330e      	adds	r3, #14
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	8812      	ldrh	r2, [r2, #0]
 8006a6a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:263

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4b2d      	ldr	r3, [pc, #180]	; (8006b24 <TIM_TimeBaseInit+0xd4>)
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d008      	beq.n	8006a86 <TIM_TimeBaseInit+0x36>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:263 (discriminator 1)
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	2380      	movs	r3, #128	; 0x80
 8006a78:	05db      	lsls	r3, r3, #23
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d003      	beq.n	8006a86 <TIM_TimeBaseInit+0x36>
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	4b29      	ldr	r3, [pc, #164]	; (8006b28 <TIM_TimeBaseInit+0xd8>)
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d110      	bne.n	8006aa8 <TIM_TimeBaseInit+0x58>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:266
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8006a86:	1c3b      	adds	r3, r7, #0
 8006a88:	330e      	adds	r3, #14
 8006a8a:	1c3a      	adds	r2, r7, #0
 8006a8c:	320e      	adds	r2, #14
 8006a8e:	8812      	ldrh	r2, [r2, #0]
 8006a90:	2170      	movs	r1, #112	; 0x70
 8006a92:	438a      	bics	r2, r1
 8006a94:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:267
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	8859      	ldrh	r1, [r3, #2]
 8006a9a:	1c3b      	adds	r3, r7, #0
 8006a9c:	330e      	adds	r3, #14
 8006a9e:	1c3a      	adds	r2, r7, #0
 8006aa0:	320e      	adds	r2, #14
 8006aa2:	8812      	ldrh	r2, [r2, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:270
  }
 
  if(TIMx != TIM6)
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	4b20      	ldr	r3, [pc, #128]	; (8006b2c <TIM_TimeBaseInit+0xdc>)
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d010      	beq.n	8006ad2 <TIM_TimeBaseInit+0x82>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:273
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8006ab0:	1c3b      	adds	r3, r7, #0
 8006ab2:	330e      	adds	r3, #14
 8006ab4:	1c3a      	adds	r2, r7, #0
 8006ab6:	320e      	adds	r2, #14
 8006ab8:	8811      	ldrh	r1, [r2, #0]
 8006aba:	4a1d      	ldr	r2, [pc, #116]	; (8006b30 <TIM_TimeBaseInit+0xe0>)
 8006abc:	400a      	ands	r2, r1
 8006abe:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:274
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	8919      	ldrh	r1, [r3, #8]
 8006ac4:	1c3b      	adds	r3, r7, #0
 8006ac6:	330e      	adds	r3, #14
 8006ac8:	1c3a      	adds	r2, r7, #0
 8006aca:	320e      	adds	r2, #14
 8006acc:	8812      	ldrh	r2, [r2, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:277
  }

  TIMx->CR1 = tmpcr1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	1c3a      	adds	r2, r7, #0
 8006ad6:	320e      	adds	r2, #14
 8006ad8:	8812      	ldrh	r2, [r2, #0]
 8006ada:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:280

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	62da      	str	r2, [r3, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:283
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	881a      	ldrh	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	851a      	strh	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:285
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <TIM_TimeBaseInit+0xd4>)
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d00b      	beq.n	8006b0c <TIM_TimeBaseInit+0xbc>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:285 (discriminator 1)
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	4b0f      	ldr	r3, [pc, #60]	; (8006b34 <TIM_TimeBaseInit+0xe4>)
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d007      	beq.n	8006b0c <TIM_TimeBaseInit+0xbc>
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <TIM_TimeBaseInit+0xe8>)
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d003      	beq.n	8006b0c <TIM_TimeBaseInit+0xbc>
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <TIM_TimeBaseInit+0xec>)
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d104      	bne.n	8006b16 <TIM_TimeBaseInit+0xc6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:288
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	7a9b      	ldrb	r3, [r3, #10]
 8006b10:	1c1a      	adds	r2, r3, #0
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	861a      	strh	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:293
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	829a      	strh	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:294
}
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	b004      	add	sp, #16
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40001000 	.word	0x40001000
 8006b30:	fffffcff 	.word	0xfffffcff
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40014400 	.word	0x40014400
 8006b3c:	40014800 	.word	0x40014800

08006b40 <TIM_TimeBaseStructInit>:
TIM_TimeBaseStructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:303
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:305
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4252      	negs	r2, r2
 8006b4e:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:306
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:307
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:308
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:309
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	729a      	strb	r2, [r3, #10]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:310
}
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b002      	add	sp, #8
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	46c0      	nop			; (mov r8, r8)

08006b70 <TIM_PrescalerConfig>:
TIM_PrescalerConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:323
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	1cbb      	adds	r3, r7, #2
 8006b7a:	8019      	strh	r1, [r3, #0]
 8006b7c:	1c3b      	adds	r3, r7, #0
 8006b7e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:329
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	1cba      	adds	r2, r7, #2
 8006b84:	8812      	ldrh	r2, [r2, #0]
 8006b86:	851a      	strh	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:331
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	1c3a      	adds	r2, r7, #0
 8006b8c:	8812      	ldrh	r2, [r2, #0]
 8006b8e:	829a      	strh	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:332
}
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b002      	add	sp, #8
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	46c0      	nop			; (mov r8, r8)

08006b98 <TIM_CounterModeConfig>:
TIM_CounterModeConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:347
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	1c0a      	adds	r2, r1, #0
 8006ba2:	1cbb      	adds	r3, r7, #2
 8006ba4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:348
  uint16_t tmpcr1 = 0;
 8006ba6:	1c3b      	adds	r3, r7, #0
 8006ba8:	330e      	adds	r3, #14
 8006baa:	2200      	movs	r2, #0
 8006bac:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:354
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  
  tmpcr1 = TIMx->CR1;
 8006bae:	1c3b      	adds	r3, r7, #0
 8006bb0:	330e      	adds	r3, #14
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	8812      	ldrh	r2, [r2, #0]
 8006bb6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:356
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8006bb8:	1c3b      	adds	r3, r7, #0
 8006bba:	330e      	adds	r3, #14
 8006bbc:	1c3a      	adds	r2, r7, #0
 8006bbe:	320e      	adds	r2, #14
 8006bc0:	8812      	ldrh	r2, [r2, #0]
 8006bc2:	2170      	movs	r1, #112	; 0x70
 8006bc4:	438a      	bics	r2, r1
 8006bc6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:358
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8006bc8:	1c3b      	adds	r3, r7, #0
 8006bca:	330e      	adds	r3, #14
 8006bcc:	1c39      	adds	r1, r7, #0
 8006bce:	310e      	adds	r1, #14
 8006bd0:	1cba      	adds	r2, r7, #2
 8006bd2:	8809      	ldrh	r1, [r1, #0]
 8006bd4:	8812      	ldrh	r2, [r2, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:360
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	1c3a      	adds	r2, r7, #0
 8006bde:	320e      	adds	r2, #14
 8006be0:	8812      	ldrh	r2, [r2, #0]
 8006be2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:361
}
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b004      	add	sp, #16
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	46c0      	nop			; (mov r8, r8)

08006bec <TIM_SetCounter>:
TIM_SetCounter():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:371
  *          peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:376
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	625a      	str	r2, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:377
}
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)

08006c04 <TIM_SetAutoreload>:
TIM_SetAutoreload():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:386
  * @param  TIMx: where x can be 1, 2, 3, 6, 14, 15, 16 and 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:391
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	62da      	str	r2, [r3, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:392
}
 8006c14:	46bd      	mov	sp, r7
 8006c16:	b002      	add	sp, #8
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	46c0      	nop			; (mov r8, r8)

08006c1c <TIM_GetCounter>:
TIM_GetCounter():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:401
  * @param  TIMx: where x can be 1, 2, 3, 6, 14, 15, 16 and 17 to select the TIM 
  *         peripheral.
  * @retval Counter Register value.
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:406
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Counter Register value */
  return TIMx->CNT;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:407
}
 8006c28:	1c18      	adds	r0, r3, #0
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <TIM_GetPrescaler>:
TIM_GetPrescaler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:416
  * @param  TIMx: where x can be 1, 2, 3, 6, 14, 15, 16 and 17 to select the TIM 
  *         peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:421
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3c:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:422
}
 8006c3e:	1c18      	adds	r0, r3, #0
 8006c40:	46bd      	mov	sp, r7
 8006c42:	b002      	add	sp, #8
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	46c0      	nop			; (mov r8, r8)

08006c48 <TIM_UpdateDisableConfig>:
TIM_UpdateDisableConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:433
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	1c0a      	adds	r2, r1, #0
 8006c52:	1cfb      	adds	r3, r7, #3
 8006c54:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:438
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006c56:	1cfb      	adds	r3, r7, #3
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d008      	beq.n	8006c70 <TIM_UpdateDisableConfig+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:441
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2202      	movs	r2, #2
 8006c66:	4313      	orrs	r3, r2
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	801a      	strh	r2, [r3, #0]
 8006c6e:	e007      	b.n	8006c80 <TIM_UpdateDisableConfig+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:446
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2202      	movs	r2, #2
 8006c78:	4393      	bics	r3, r2
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:448
  }
}
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b002      	add	sp, #8
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	46c0      	nop			; (mov r8, r8)

08006c88 <TIM_UpdateRequestConfig>:
TIM_UpdateRequestConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:463
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	1c0a      	adds	r2, r1, #0
 8006c92:	1cbb      	adds	r3, r7, #2
 8006c94:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:468
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8006c96:	1cbb      	adds	r3, r7, #2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d008      	beq.n	8006cb0 <TIM_UpdateRequestConfig+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:471
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	801a      	strh	r2, [r3, #0]
 8006cae:	e007      	b.n	8006cc0 <TIM_UpdateRequestConfig+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:476
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	4393      	bics	r3, r2
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:478
  }
}
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b002      	add	sp, #8
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)

08006cc8 <TIM_ARRPreloadConfig>:
TIM_ARRPreloadConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:489
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	1c0a      	adds	r2, r1, #0
 8006cd2:	1cfb      	adds	r3, r7, #3
 8006cd4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:494
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006cd6:	1cfb      	adds	r3, r7, #3
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <TIM_ARRPreloadConfig+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:497
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2280      	movs	r2, #128	; 0x80
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	e007      	b.n	8006d00 <TIM_ARRPreloadConfig+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:502
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2280      	movs	r2, #128	; 0x80
 8006cf8:	4393      	bics	r3, r2
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:504
  }
}
 8006d00:	46bd      	mov	sp, r7
 8006d02:	b002      	add	sp, #8
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	46c0      	nop			; (mov r8, r8)

08006d08 <TIM_SelectOnePulseMode>:
TIM_SelectOnePulseMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:517
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	1c0a      	adds	r2, r1, #0
 8006d12:	1cbb      	adds	r3, r7, #2
 8006d14:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:523
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	4393      	bics	r3, r2
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:525
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	1cbb      	adds	r3, r7, #2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:526
}
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	46c0      	nop			; (mov r8, r8)

08006d40 <TIM_SetClockDivision>:
TIM_SetClockDivision():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:539
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	1c0a      	adds	r2, r1, #0
 8006d4a:	1cbb      	adds	r3, r7, #2
 8006d4c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:545
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <TIM_SetClockDivision+0x38>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:547
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	1cbb      	adds	r3, r7, #2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:548
}
 8006d70:	46bd      	mov	sp, r7
 8006d72:	b002      	add	sp, #8
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	fffffcff 	.word	0xfffffcff

08006d7c <TIM_Cmd>:
TIM_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:559
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	1c0a      	adds	r2, r1, #0
 8006d86:	1cfb      	adds	r3, r7, #3
 8006d88:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:564
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006d8a:	1cfb      	adds	r3, r7, #3
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <TIM_Cmd+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:567
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2201      	movs	r2, #1
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	801a      	strh	r2, [r3, #0]
 8006da2:	e007      	b.n	8006db4 <TIM_Cmd+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:572
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2201      	movs	r2, #1
 8006dac:	4393      	bics	r3, r2
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:574
  }
}
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b002      	add	sp, #8
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	46c0      	nop			; (mov r8, r8)

08006dbc <TIM_BDTRConfig>:
TIM_BDTRConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:617
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:628
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	881a      	ldrh	r2, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	b29a      	uxth	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:629
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	889b      	ldrh	r3, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:628
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	b29a      	uxth	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:629
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	88db      	ldrh	r3, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:628
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006dde:	4313      	orrs	r3, r2
 8006de0:	b29a      	uxth	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:630
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	891b      	ldrh	r3, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:628
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006de6:	4313      	orrs	r3, r2
 8006de8:	b29a      	uxth	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:630
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	895b      	ldrh	r3, [r3, #10]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:628
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b29a      	uxth	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:631
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	899b      	ldrh	r3, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:628
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006df6:	4313      	orrs	r3, r2
 8006df8:	b299      	uxth	r1, r3
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	2344      	movs	r3, #68	; 0x44
 8006dfe:	52d1      	strh	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:632
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b002      	add	sp, #8
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)

08006e08 <TIM_BDTRStructInit>:
TIM_BDTRStructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:641
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:643
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:644
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:645
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:646
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	80da      	strh	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:647
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:648
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	815a      	strh	r2, [r3, #10]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:649
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:650
}
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b002      	add	sp, #8
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <TIM_CtrlPWMOutputs>:
TIM_CtrlPWMOutputs():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:660
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	1c0a      	adds	r2, r1, #0
 8006e4a:	1cfb      	adds	r3, r7, #3
 8006e4c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:664
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006e4e:	1cfb      	adds	r3, r7, #3
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <TIM_CtrlPWMOutputs+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:667
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	2344      	movs	r3, #68	; 0x44
 8006e5a:	5ad3      	ldrh	r3, [r2, r3]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <TIM_CtrlPWMOutputs+0x48>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	b299      	uxth	r1, r3
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	2344      	movs	r3, #68	; 0x44
 8006e68:	52d1      	strh	r1, [r2, r3]
 8006e6a:	e009      	b.n	8006e80 <TIM_CtrlPWMOutputs+0x40>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:672
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	2344      	movs	r3, #68	; 0x44
 8006e70:	5ad3      	ldrh	r3, [r2, r3]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	045b      	lsls	r3, r3, #17
 8006e76:	0c5b      	lsrs	r3, r3, #17
 8006e78:	b299      	uxth	r1, r3
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	2344      	movs	r3, #68	; 0x44
 8006e7e:	52d1      	strh	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:674
  }  
}
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b002      	add	sp, #8
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	ffff8000 	.word	0xffff8000

08006e8c <TIM_OC1Init>:
TIM_OC1Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:732
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:733
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8006e96:	1c3b      	adds	r3, r7, #0
 8006e98:	330a      	adds	r3, #10
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	801a      	strh	r2, [r3, #0]
 8006e9e:	1c3b      	adds	r3, r7, #0
 8006ea0:	330e      	adds	r3, #14
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	1c3b      	adds	r3, r7, #0
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	2200      	movs	r2, #0
 8006eac:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:741
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	8c1b      	ldrh	r3, [r3, #32]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	4393      	bics	r3, r2
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:743
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	1c3b      	adds	r3, r7, #0
 8006ec0:	330e      	adds	r3, #14
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	8c12      	ldrh	r2, [r2, #32]
 8006ec6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:745
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec8:	1c3b      	adds	r3, r7, #0
 8006eca:	330c      	adds	r3, #12
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	8892      	ldrh	r2, [r2, #4]
 8006ed0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:748
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ed2:	1c3b      	adds	r3, r7, #0
 8006ed4:	330a      	adds	r3, #10
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	8b12      	ldrh	r2, [r2, #24]
 8006eda:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:751
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8006edc:	1c3b      	adds	r3, r7, #0
 8006ede:	330a      	adds	r3, #10
 8006ee0:	1c3a      	adds	r2, r7, #0
 8006ee2:	320a      	adds	r2, #10
 8006ee4:	8812      	ldrh	r2, [r2, #0]
 8006ee6:	2170      	movs	r1, #112	; 0x70
 8006ee8:	438a      	bics	r2, r1
 8006eea:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:752
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8006eec:	1c3b      	adds	r3, r7, #0
 8006eee:	330a      	adds	r3, #10
 8006ef0:	1c3a      	adds	r2, r7, #0
 8006ef2:	320a      	adds	r2, #10
 8006ef4:	8812      	ldrh	r2, [r2, #0]
 8006ef6:	2103      	movs	r1, #3
 8006ef8:	438a      	bics	r2, r1
 8006efa:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:755

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	8819      	ldrh	r1, [r3, #0]
 8006f00:	1c3b      	adds	r3, r7, #0
 8006f02:	330a      	adds	r3, #10
 8006f04:	1c3a      	adds	r2, r7, #0
 8006f06:	320a      	adds	r2, #10
 8006f08:	8812      	ldrh	r2, [r2, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:758
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8006f0e:	1c3b      	adds	r3, r7, #0
 8006f10:	330e      	adds	r3, #14
 8006f12:	1c3a      	adds	r2, r7, #0
 8006f14:	320e      	adds	r2, #14
 8006f16:	8812      	ldrh	r2, [r2, #0]
 8006f18:	2102      	movs	r1, #2
 8006f1a:	438a      	bics	r2, r1
 8006f1c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:760
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	8999      	ldrh	r1, [r3, #12]
 8006f22:	1c3b      	adds	r3, r7, #0
 8006f24:	330e      	adds	r3, #14
 8006f26:	1c3a      	adds	r2, r7, #0
 8006f28:	320e      	adds	r2, #14
 8006f2a:	8812      	ldrh	r2, [r2, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:763
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	8859      	ldrh	r1, [r3, #2]
 8006f34:	1c3b      	adds	r3, r7, #0
 8006f36:	330e      	adds	r3, #14
 8006f38:	1c3a      	adds	r2, r7, #0
 8006f3a:	320e      	adds	r2, #14
 8006f3c:	8812      	ldrh	r2, [r2, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:765
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4b34      	ldr	r3, [pc, #208]	; (8007018 <TIM_OC1Init+0x18c>)
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d00b      	beq.n	8006f62 <TIM_OC1Init+0xd6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:765 (discriminator 1)
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	4b33      	ldr	r3, [pc, #204]	; (800701c <TIM_OC1Init+0x190>)
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d007      	beq.n	8006f62 <TIM_OC1Init+0xd6>
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4b32      	ldr	r3, [pc, #200]	; (8007020 <TIM_OC1Init+0x194>)
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d003      	beq.n	8006f62 <TIM_OC1Init+0xd6>
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4b31      	ldr	r3, [pc, #196]	; (8007024 <TIM_OC1Init+0x198>)
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d143      	bne.n	8006fea <TIM_OC1Init+0x15e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:773
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8006f62:	1c3b      	adds	r3, r7, #0
 8006f64:	330e      	adds	r3, #14
 8006f66:	1c3a      	adds	r2, r7, #0
 8006f68:	320e      	adds	r2, #14
 8006f6a:	8812      	ldrh	r2, [r2, #0]
 8006f6c:	2108      	movs	r1, #8
 8006f6e:	438a      	bics	r2, r1
 8006f70:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:775
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	89d9      	ldrh	r1, [r3, #14]
 8006f76:	1c3b      	adds	r3, r7, #0
 8006f78:	330e      	adds	r3, #14
 8006f7a:	1c3a      	adds	r2, r7, #0
 8006f7c:	320e      	adds	r2, #14
 8006f7e:	8812      	ldrh	r2, [r2, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:778
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8006f84:	1c3b      	adds	r3, r7, #0
 8006f86:	330e      	adds	r3, #14
 8006f88:	1c3a      	adds	r2, r7, #0
 8006f8a:	320e      	adds	r2, #14
 8006f8c:	8812      	ldrh	r2, [r2, #0]
 8006f8e:	2104      	movs	r1, #4
 8006f90:	438a      	bics	r2, r1
 8006f92:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:780
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	8899      	ldrh	r1, [r3, #4]
 8006f98:	1c3b      	adds	r3, r7, #0
 8006f9a:	330e      	adds	r3, #14
 8006f9c:	1c3a      	adds	r2, r7, #0
 8006f9e:	320e      	adds	r2, #14
 8006fa0:	8812      	ldrh	r2, [r2, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:783
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8006fa6:	1c3b      	adds	r3, r7, #0
 8006fa8:	330c      	adds	r3, #12
 8006faa:	1c3a      	adds	r2, r7, #0
 8006fac:	320c      	adds	r2, #12
 8006fae:	8811      	ldrh	r1, [r2, #0]
 8006fb0:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <TIM_OC1Init+0x19c>)
 8006fb2:	400a      	ands	r2, r1
 8006fb4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:784
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8006fb6:	1c3b      	adds	r3, r7, #0
 8006fb8:	330c      	adds	r3, #12
 8006fba:	1c3a      	adds	r2, r7, #0
 8006fbc:	320c      	adds	r2, #12
 8006fbe:	8811      	ldrh	r1, [r2, #0]
 8006fc0:	4a1a      	ldr	r2, [pc, #104]	; (800702c <TIM_OC1Init+0x1a0>)
 8006fc2:	400a      	ands	r2, r1
 8006fc4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:787
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	8a19      	ldrh	r1, [r3, #16]
 8006fca:	1c3b      	adds	r3, r7, #0
 8006fcc:	330c      	adds	r3, #12
 8006fce:	1c3a      	adds	r2, r7, #0
 8006fd0:	320c      	adds	r2, #12
 8006fd2:	8812      	ldrh	r2, [r2, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:789
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	8a59      	ldrh	r1, [r3, #18]
 8006fdc:	1c3b      	adds	r3, r7, #0
 8006fde:	330c      	adds	r3, #12
 8006fe0:	1c3a      	adds	r2, r7, #0
 8006fe2:	320c      	adds	r2, #12
 8006fe4:	8812      	ldrh	r2, [r2, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:792
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	1c3a      	adds	r2, r7, #0
 8006fee:	320c      	adds	r2, #12
 8006ff0:	8812      	ldrh	r2, [r2, #0]
 8006ff2:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:795
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	1c3a      	adds	r2, r7, #0
 8006ff8:	320a      	adds	r2, #10
 8006ffa:	8812      	ldrh	r2, [r2, #0]
 8006ffc:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:798

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:801
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	1c3a      	adds	r2, r7, #0
 800700a:	320e      	adds	r2, #14
 800700c:	8812      	ldrh	r2, [r2, #0]
 800700e:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:802
}
 8007010:	46bd      	mov	sp, r7
 8007012:	b004      	add	sp, #16
 8007014:	bd80      	pop	{r7, pc}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	40012c00 	.word	0x40012c00
 800701c:	40014000 	.word	0x40014000
 8007020:	40014400 	.word	0x40014400
 8007024:	40014800 	.word	0x40014800
 8007028:	fffffeff 	.word	0xfffffeff
 800702c:	fffffdff 	.word	0xfffffdff

08007030 <TIM_OC2Init>:
TIM_OC2Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:814
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:815
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800703a:	1c3b      	adds	r3, r7, #0
 800703c:	330a      	adds	r3, #10
 800703e:	2200      	movs	r2, #0
 8007040:	801a      	strh	r2, [r3, #0]
 8007042:	1c3b      	adds	r3, r7, #0
 8007044:	330e      	adds	r3, #14
 8007046:	2200      	movs	r2, #0
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	1c3b      	adds	r3, r7, #0
 800704c:	330c      	adds	r3, #12
 800704e:	2200      	movs	r2, #0
 8007050:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:823
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	8c1b      	ldrh	r3, [r3, #32]
 8007056:	b29b      	uxth	r3, r3
 8007058:	2210      	movs	r2, #16
 800705a:	4393      	bics	r3, r2
 800705c:	b29a      	uxth	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:826
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8007062:	1c3b      	adds	r3, r7, #0
 8007064:	330e      	adds	r3, #14
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	8c12      	ldrh	r2, [r2, #32]
 800706a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:828
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	1c3b      	adds	r3, r7, #0
 800706e:	330c      	adds	r3, #12
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	8892      	ldrh	r2, [r2, #4]
 8007074:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:831
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007076:	1c3b      	adds	r3, r7, #0
 8007078:	330a      	adds	r3, #10
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	8b12      	ldrh	r2, [r2, #24]
 800707e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:834
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8007080:	1c3b      	adds	r3, r7, #0
 8007082:	330a      	adds	r3, #10
 8007084:	1c3a      	adds	r2, r7, #0
 8007086:	320a      	adds	r2, #10
 8007088:	8811      	ldrh	r1, [r2, #0]
 800708a:	4a4d      	ldr	r2, [pc, #308]	; (80071c0 <TIM_OC2Init+0x190>)
 800708c:	400a      	ands	r2, r1
 800708e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:835
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8007090:	1c3b      	adds	r3, r7, #0
 8007092:	330a      	adds	r3, #10
 8007094:	1c3a      	adds	r2, r7, #0
 8007096:	320a      	adds	r2, #10
 8007098:	8811      	ldrh	r1, [r2, #0]
 800709a:	4a4a      	ldr	r2, [pc, #296]	; (80071c4 <TIM_OC2Init+0x194>)
 800709c:	400a      	ands	r2, r1
 800709e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:838
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	b299      	uxth	r1, r3
 80070a8:	1c3b      	adds	r3, r7, #0
 80070aa:	330a      	adds	r3, #10
 80070ac:	1c3a      	adds	r2, r7, #0
 80070ae:	320a      	adds	r2, #10
 80070b0:	8812      	ldrh	r2, [r2, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:841
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80070b6:	1c3b      	adds	r3, r7, #0
 80070b8:	330e      	adds	r3, #14
 80070ba:	1c3a      	adds	r2, r7, #0
 80070bc:	320e      	adds	r2, #14
 80070be:	8812      	ldrh	r2, [r2, #0]
 80070c0:	2120      	movs	r1, #32
 80070c2:	438a      	bics	r2, r1
 80070c4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:843
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	899b      	ldrh	r3, [r3, #12]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	b299      	uxth	r1, r3
 80070ce:	1c3b      	adds	r3, r7, #0
 80070d0:	330e      	adds	r3, #14
 80070d2:	1c3a      	adds	r2, r7, #0
 80070d4:	320e      	adds	r2, #14
 80070d6:	8812      	ldrh	r2, [r2, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:846
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	885b      	ldrh	r3, [r3, #2]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	b299      	uxth	r1, r3
 80070e4:	1c3b      	adds	r3, r7, #0
 80070e6:	330e      	adds	r3, #14
 80070e8:	1c3a      	adds	r2, r7, #0
 80070ea:	320e      	adds	r2, #14
 80070ec:	8812      	ldrh	r2, [r2, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:848
    
  if(TIMx == TIM1)
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4b34      	ldr	r3, [pc, #208]	; (80071c8 <TIM_OC2Init+0x198>)
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d14b      	bne.n	8007192 <TIM_OC2Init+0x162>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:856
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80070fa:	1c3b      	adds	r3, r7, #0
 80070fc:	330e      	adds	r3, #14
 80070fe:	1c3a      	adds	r2, r7, #0
 8007100:	320e      	adds	r2, #14
 8007102:	8812      	ldrh	r2, [r2, #0]
 8007104:	2180      	movs	r1, #128	; 0x80
 8007106:	438a      	bics	r2, r1
 8007108:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:858
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	89db      	ldrh	r3, [r3, #14]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	b299      	uxth	r1, r3
 8007112:	1c3b      	adds	r3, r7, #0
 8007114:	330e      	adds	r3, #14
 8007116:	1c3a      	adds	r2, r7, #0
 8007118:	320e      	adds	r2, #14
 800711a:	8812      	ldrh	r2, [r2, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:861
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8007120:	1c3b      	adds	r3, r7, #0
 8007122:	330e      	adds	r3, #14
 8007124:	1c3a      	adds	r2, r7, #0
 8007126:	320e      	adds	r2, #14
 8007128:	8812      	ldrh	r2, [r2, #0]
 800712a:	2140      	movs	r1, #64	; 0x40
 800712c:	438a      	bics	r2, r1
 800712e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:863
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	889b      	ldrh	r3, [r3, #4]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	b299      	uxth	r1, r3
 8007138:	1c3b      	adds	r3, r7, #0
 800713a:	330e      	adds	r3, #14
 800713c:	1c3a      	adds	r2, r7, #0
 800713e:	320e      	adds	r2, #14
 8007140:	8812      	ldrh	r2, [r2, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:866
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8007146:	1c3b      	adds	r3, r7, #0
 8007148:	330c      	adds	r3, #12
 800714a:	1c3a      	adds	r2, r7, #0
 800714c:	320c      	adds	r2, #12
 800714e:	8811      	ldrh	r1, [r2, #0]
 8007150:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <TIM_OC2Init+0x19c>)
 8007152:	400a      	ands	r2, r1
 8007154:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:867
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8007156:	1c3b      	adds	r3, r7, #0
 8007158:	330c      	adds	r3, #12
 800715a:	1c3a      	adds	r2, r7, #0
 800715c:	320c      	adds	r2, #12
 800715e:	8811      	ldrh	r1, [r2, #0]
 8007160:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <TIM_OC2Init+0x1a0>)
 8007162:	400a      	ands	r2, r1
 8007164:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:870
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	8a1b      	ldrh	r3, [r3, #16]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	b299      	uxth	r1, r3
 800716e:	1c3b      	adds	r3, r7, #0
 8007170:	330c      	adds	r3, #12
 8007172:	1c3a      	adds	r2, r7, #0
 8007174:	320c      	adds	r2, #12
 8007176:	8812      	ldrh	r2, [r2, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:872
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	8a5b      	ldrh	r3, [r3, #18]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	b299      	uxth	r1, r3
 8007184:	1c3b      	adds	r3, r7, #0
 8007186:	330c      	adds	r3, #12
 8007188:	1c3a      	adds	r2, r7, #0
 800718a:	320c      	adds	r2, #12
 800718c:	8812      	ldrh	r2, [r2, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:875
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	1c3a      	adds	r2, r7, #0
 8007196:	320c      	adds	r2, #12
 8007198:	8812      	ldrh	r2, [r2, #0]
 800719a:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:878
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	1c3a      	adds	r2, r7, #0
 80071a0:	320a      	adds	r2, #10
 80071a2:	8812      	ldrh	r2, [r2, #0]
 80071a4:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:881

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:884
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	1c3a      	adds	r2, r7, #0
 80071b2:	320e      	adds	r2, #14
 80071b4:	8812      	ldrh	r2, [r2, #0]
 80071b6:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:885
}
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b004      	add	sp, #16
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	ffff8fff 	.word	0xffff8fff
 80071c4:	fffffcff 	.word	0xfffffcff
 80071c8:	40012c00 	.word	0x40012c00
 80071cc:	fffffbff 	.word	0xfffffbff
 80071d0:	fffff7ff 	.word	0xfffff7ff

080071d4 <TIM_OC3Init>:
TIM_OC3Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:897
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:898
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80071de:	1c3b      	adds	r3, r7, #0
 80071e0:	330a      	adds	r3, #10
 80071e2:	2200      	movs	r2, #0
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	1c3b      	adds	r3, r7, #0
 80071e8:	330e      	adds	r3, #14
 80071ea:	2200      	movs	r2, #0
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	1c3b      	adds	r3, r7, #0
 80071f0:	330c      	adds	r3, #12
 80071f2:	2200      	movs	r2, #0
 80071f4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:906
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8c1b      	ldrh	r3, [r3, #32]
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	4b58      	ldr	r3, [pc, #352]	; (8007360 <TIM_OC3Init+0x18c>)
 80071fe:	4013      	ands	r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:909
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	1c3b      	adds	r3, r7, #0
 8007208:	330e      	adds	r3, #14
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	8c12      	ldrh	r2, [r2, #32]
 800720e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:911
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007210:	1c3b      	adds	r3, r7, #0
 8007212:	330c      	adds	r3, #12
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	8892      	ldrh	r2, [r2, #4]
 8007218:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:914
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721a:	1c3b      	adds	r3, r7, #0
 800721c:	330a      	adds	r3, #10
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	8b92      	ldrh	r2, [r2, #28]
 8007222:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:917
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8007224:	1c3b      	adds	r3, r7, #0
 8007226:	330a      	adds	r3, #10
 8007228:	1c3a      	adds	r2, r7, #0
 800722a:	320a      	adds	r2, #10
 800722c:	8812      	ldrh	r2, [r2, #0]
 800722e:	2170      	movs	r1, #112	; 0x70
 8007230:	438a      	bics	r2, r1
 8007232:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:918
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8007234:	1c3b      	adds	r3, r7, #0
 8007236:	330a      	adds	r3, #10
 8007238:	1c3a      	adds	r2, r7, #0
 800723a:	320a      	adds	r2, #10
 800723c:	8812      	ldrh	r2, [r2, #0]
 800723e:	2103      	movs	r1, #3
 8007240:	438a      	bics	r2, r1
 8007242:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:920
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	8819      	ldrh	r1, [r3, #0]
 8007248:	1c3b      	adds	r3, r7, #0
 800724a:	330a      	adds	r3, #10
 800724c:	1c3a      	adds	r2, r7, #0
 800724e:	320a      	adds	r2, #10
 8007250:	8812      	ldrh	r2, [r2, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:923
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8007256:	1c3b      	adds	r3, r7, #0
 8007258:	330e      	adds	r3, #14
 800725a:	1c3a      	adds	r2, r7, #0
 800725c:	320e      	adds	r2, #14
 800725e:	8811      	ldrh	r1, [r2, #0]
 8007260:	4a40      	ldr	r2, [pc, #256]	; (8007364 <TIM_OC3Init+0x190>)
 8007262:	400a      	ands	r2, r1
 8007264:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:925
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	899b      	ldrh	r3, [r3, #12]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	b299      	uxth	r1, r3
 800726e:	1c3b      	adds	r3, r7, #0
 8007270:	330e      	adds	r3, #14
 8007272:	1c3a      	adds	r2, r7, #0
 8007274:	320e      	adds	r2, #14
 8007276:	8812      	ldrh	r2, [r2, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:928
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	885b      	ldrh	r3, [r3, #2]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	b299      	uxth	r1, r3
 8007284:	1c3b      	adds	r3, r7, #0
 8007286:	330e      	adds	r3, #14
 8007288:	1c3a      	adds	r2, r7, #0
 800728a:	320e      	adds	r2, #14
 800728c:	8812      	ldrh	r2, [r2, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:930
    
  if(TIMx == TIM1)
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4b34      	ldr	r3, [pc, #208]	; (8007368 <TIM_OC3Init+0x194>)
 8007296:	429a      	cmp	r2, r3
 8007298:	d14b      	bne.n	8007332 <TIM_OC3Init+0x15e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:938
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 800729a:	1c3b      	adds	r3, r7, #0
 800729c:	330e      	adds	r3, #14
 800729e:	1c3a      	adds	r2, r7, #0
 80072a0:	320e      	adds	r2, #14
 80072a2:	8811      	ldrh	r1, [r2, #0]
 80072a4:	4a31      	ldr	r2, [pc, #196]	; (800736c <TIM_OC3Init+0x198>)
 80072a6:	400a      	ands	r2, r1
 80072a8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:940
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	89db      	ldrh	r3, [r3, #14]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	b299      	uxth	r1, r3
 80072b2:	1c3b      	adds	r3, r7, #0
 80072b4:	330e      	adds	r3, #14
 80072b6:	1c3a      	adds	r2, r7, #0
 80072b8:	320e      	adds	r2, #14
 80072ba:	8812      	ldrh	r2, [r2, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:942
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 80072c0:	1c3b      	adds	r3, r7, #0
 80072c2:	330e      	adds	r3, #14
 80072c4:	1c3a      	adds	r2, r7, #0
 80072c6:	320e      	adds	r2, #14
 80072c8:	8811      	ldrh	r1, [r2, #0]
 80072ca:	4a29      	ldr	r2, [pc, #164]	; (8007370 <TIM_OC3Init+0x19c>)
 80072cc:	400a      	ands	r2, r1
 80072ce:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:945
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	889b      	ldrh	r3, [r3, #4]
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	b299      	uxth	r1, r3
 80072d8:	1c3b      	adds	r3, r7, #0
 80072da:	330e      	adds	r3, #14
 80072dc:	1c3a      	adds	r2, r7, #0
 80072de:	320e      	adds	r2, #14
 80072e0:	8812      	ldrh	r2, [r2, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:947
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 80072e6:	1c3b      	adds	r3, r7, #0
 80072e8:	330c      	adds	r3, #12
 80072ea:	1c3a      	adds	r2, r7, #0
 80072ec:	320c      	adds	r2, #12
 80072ee:	8811      	ldrh	r1, [r2, #0]
 80072f0:	4a20      	ldr	r2, [pc, #128]	; (8007374 <TIM_OC3Init+0x1a0>)
 80072f2:	400a      	ands	r2, r1
 80072f4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:948
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 80072f6:	1c3b      	adds	r3, r7, #0
 80072f8:	330c      	adds	r3, #12
 80072fa:	1c3a      	adds	r2, r7, #0
 80072fc:	320c      	adds	r2, #12
 80072fe:	8811      	ldrh	r1, [r2, #0]
 8007300:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <TIM_OC3Init+0x1a4>)
 8007302:	400a      	ands	r2, r1
 8007304:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:950
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	8a1b      	ldrh	r3, [r3, #16]
 800730a:	011b      	lsls	r3, r3, #4
 800730c:	b299      	uxth	r1, r3
 800730e:	1c3b      	adds	r3, r7, #0
 8007310:	330c      	adds	r3, #12
 8007312:	1c3a      	adds	r2, r7, #0
 8007314:	320c      	adds	r2, #12
 8007316:	8812      	ldrh	r2, [r2, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:952
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	8a5b      	ldrh	r3, [r3, #18]
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	b299      	uxth	r1, r3
 8007324:	1c3b      	adds	r3, r7, #0
 8007326:	330c      	adds	r3, #12
 8007328:	1c3a      	adds	r2, r7, #0
 800732a:	320c      	adds	r2, #12
 800732c:	8812      	ldrh	r2, [r2, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:955
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	1c3a      	adds	r2, r7, #0
 8007336:	320c      	adds	r2, #12
 8007338:	8812      	ldrh	r2, [r2, #0]
 800733a:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:958
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	1c3a      	adds	r2, r7, #0
 8007340:	320a      	adds	r2, #10
 8007342:	8812      	ldrh	r2, [r2, #0]
 8007344:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:961

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	63da      	str	r2, [r3, #60]	; 0x3c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:964
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	1c3a      	adds	r2, r7, #0
 8007352:	320e      	adds	r2, #14
 8007354:	8812      	ldrh	r2, [r2, #0]
 8007356:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:965
}
 8007358:	46bd      	mov	sp, r7
 800735a:	b004      	add	sp, #16
 800735c:	bd80      	pop	{r7, pc}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	fffffeff 	.word	0xfffffeff
 8007364:	fffffdff 	.word	0xfffffdff
 8007368:	40012c00 	.word	0x40012c00
 800736c:	fffff7ff 	.word	0xfffff7ff
 8007370:	fffffbff 	.word	0xfffffbff
 8007374:	ffffefff 	.word	0xffffefff
 8007378:	ffffdfff 	.word	0xffffdfff

0800737c <TIM_OC4Init>:
TIM_OC4Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:977
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:978
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8007386:	1c3b      	adds	r3, r7, #0
 8007388:	330c      	adds	r3, #12
 800738a:	2200      	movs	r2, #0
 800738c:	801a      	strh	r2, [r3, #0]
 800738e:	1c3b      	adds	r3, r7, #0
 8007390:	330a      	adds	r3, #10
 8007392:	2200      	movs	r2, #0
 8007394:	801a      	strh	r2, [r3, #0]
 8007396:	1c3b      	adds	r3, r7, #0
 8007398:	330e      	adds	r3, #14
 800739a:	2200      	movs	r2, #0
 800739c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:986
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	8c1b      	ldrh	r3, [r3, #32]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	4b3c      	ldr	r3, [pc, #240]	; (8007498 <TIM_OC4Init+0x11c>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:989
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	1c3b      	adds	r3, r7, #0
 80073b0:	330a      	adds	r3, #10
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	8c12      	ldrh	r2, [r2, #32]
 80073b6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:991
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b8:	1c3b      	adds	r3, r7, #0
 80073ba:	330e      	adds	r3, #14
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	8892      	ldrh	r2, [r2, #4]
 80073c0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:994
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073c2:	1c3b      	adds	r3, r7, #0
 80073c4:	330c      	adds	r3, #12
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	8b92      	ldrh	r2, [r2, #28]
 80073ca:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:997
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 80073cc:	1c3b      	adds	r3, r7, #0
 80073ce:	330c      	adds	r3, #12
 80073d0:	1c3a      	adds	r2, r7, #0
 80073d2:	320c      	adds	r2, #12
 80073d4:	8811      	ldrh	r1, [r2, #0]
 80073d6:	4a31      	ldr	r2, [pc, #196]	; (800749c <TIM_OC4Init+0x120>)
 80073d8:	400a      	ands	r2, r1
 80073da:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:998
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80073dc:	1c3b      	adds	r3, r7, #0
 80073de:	330c      	adds	r3, #12
 80073e0:	1c3a      	adds	r2, r7, #0
 80073e2:	320c      	adds	r2, #12
 80073e4:	8811      	ldrh	r1, [r2, #0]
 80073e6:	4a2e      	ldr	r2, [pc, #184]	; (80074a0 <TIM_OC4Init+0x124>)
 80073e8:	400a      	ands	r2, r1
 80073ea:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1001
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	b299      	uxth	r1, r3
 80073f4:	1c3b      	adds	r3, r7, #0
 80073f6:	330c      	adds	r3, #12
 80073f8:	1c3a      	adds	r2, r7, #0
 80073fa:	320c      	adds	r2, #12
 80073fc:	8812      	ldrh	r2, [r2, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1004
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8007402:	1c3b      	adds	r3, r7, #0
 8007404:	330a      	adds	r3, #10
 8007406:	1c3a      	adds	r2, r7, #0
 8007408:	320a      	adds	r2, #10
 800740a:	8811      	ldrh	r1, [r2, #0]
 800740c:	4a25      	ldr	r2, [pc, #148]	; (80074a4 <TIM_OC4Init+0x128>)
 800740e:	400a      	ands	r2, r1
 8007410:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1006
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	899b      	ldrh	r3, [r3, #12]
 8007416:	031b      	lsls	r3, r3, #12
 8007418:	b299      	uxth	r1, r3
 800741a:	1c3b      	adds	r3, r7, #0
 800741c:	330a      	adds	r3, #10
 800741e:	1c3a      	adds	r2, r7, #0
 8007420:	320a      	adds	r2, #10
 8007422:	8812      	ldrh	r2, [r2, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1009
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	885b      	ldrh	r3, [r3, #2]
 800742c:	031b      	lsls	r3, r3, #12
 800742e:	b299      	uxth	r1, r3
 8007430:	1c3b      	adds	r3, r7, #0
 8007432:	330a      	adds	r3, #10
 8007434:	1c3a      	adds	r2, r7, #0
 8007436:	320a      	adds	r2, #10
 8007438:	8812      	ldrh	r2, [r2, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1011
    
  if(TIMx == TIM1)
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <TIM_OC4Init+0x12c>)
 8007442:	429a      	cmp	r2, r3
 8007444:	d112      	bne.n	800746c <TIM_OC4Init+0xf0>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1015
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8007446:	1c3b      	adds	r3, r7, #0
 8007448:	330e      	adds	r3, #14
 800744a:	1c3a      	adds	r2, r7, #0
 800744c:	320e      	adds	r2, #14
 800744e:	8811      	ldrh	r1, [r2, #0]
 8007450:	4a16      	ldr	r2, [pc, #88]	; (80074ac <TIM_OC4Init+0x130>)
 8007452:	400a      	ands	r2, r1
 8007454:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1017
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	8a1b      	ldrh	r3, [r3, #16]
 800745a:	019b      	lsls	r3, r3, #6
 800745c:	b299      	uxth	r1, r3
 800745e:	1c3b      	adds	r3, r7, #0
 8007460:	330e      	adds	r3, #14
 8007462:	1c3a      	adds	r2, r7, #0
 8007464:	320e      	adds	r2, #14
 8007466:	8812      	ldrh	r2, [r2, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1020
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	1c3a      	adds	r2, r7, #0
 8007470:	320e      	adds	r2, #14
 8007472:	8812      	ldrh	r2, [r2, #0]
 8007474:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1023
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	1c3a      	adds	r2, r7, #0
 800747a:	320c      	adds	r2, #12
 800747c:	8812      	ldrh	r2, [r2, #0]
 800747e:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1026

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1029
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	1c3a      	adds	r2, r7, #0
 800748c:	320a      	adds	r2, #10
 800748e:	8812      	ldrh	r2, [r2, #0]
 8007490:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1030
}
 8007492:	46bd      	mov	sp, r7
 8007494:	b004      	add	sp, #16
 8007496:	bd80      	pop	{r7, pc}
 8007498:	ffffefff 	.word	0xffffefff
 800749c:	ffff8fff 	.word	0xffff8fff
 80074a0:	fffffcff 	.word	0xfffffcff
 80074a4:	ffffdfff 	.word	0xffffdfff
 80074a8:	40012c00 	.word	0x40012c00
 80074ac:	ffffbfff 	.word	0xffffbfff

080074b0 <TIM_OCStructInit>:
TIM_OCStructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1039
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1041
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1042
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1043
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1044
  TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1045
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1046
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	81da      	strh	r2, [r3, #14]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1047
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1048
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	825a      	strh	r2, [r3, #18]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1049
}
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b002      	add	sp, #8
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	46c0      	nop			; (mov r8, r8)

080074f0 <TIM_SelectOCxM>:
TIM_SelectOCxM():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1075
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	1cbb      	adds	r3, r7, #2
 80074fa:	8019      	strh	r1, [r3, #0]
 80074fc:	1c3b      	adds	r3, r7, #0
 80074fe:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1076
  uint32_t tmp = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1077
  uint16_t tmp1 = 0;
 8007504:	1c3b      	adds	r3, r7, #0
 8007506:	330a      	adds	r3, #10
 8007508:	2200      	movs	r2, #0
 800750a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1083

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1084
  tmp += CCMR_OFFSET;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3318      	adds	r3, #24
 8007514:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1086

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8007516:	1cbb      	adds	r3, r7, #2
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	2201      	movs	r2, #1
 800751c:	409a      	lsls	r2, r3
 800751e:	1c3b      	adds	r3, r7, #0
 8007520:	330a      	adds	r3, #10
 8007522:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1089

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	8c1b      	ldrh	r3, [r3, #32]
 8007528:	b29b      	uxth	r3, r3
 800752a:	1c3a      	adds	r2, r7, #0
 800752c:	320a      	adds	r2, #10
 800752e:	8812      	ldrh	r2, [r2, #0]
 8007530:	43d2      	mvns	r2, r2
 8007532:	b292      	uxth	r2, r2
 8007534:	4013      	ands	r3, r2
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1091

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800753c:	1cbb      	adds	r3, r7, #2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <TIM_SelectOCxM+0x5c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1091 (discriminator 1)
 8007544:	1cbb      	adds	r3, r7, #2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	2b08      	cmp	r3, #8
 800754a:	d114      	bne.n	8007576 <TIM_SelectOCxM+0x86>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1093
  {
    tmp += (TIM_Channel>>1);
 800754c:	1cbb      	adds	r3, r7, #2
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	085b      	lsrs	r3, r3, #1
 8007552:	b29b      	uxth	r3, r3
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	18d3      	adds	r3, r2, r3
 8007558:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1096

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	2170      	movs	r1, #112	; 0x70
 8007562:	438a      	bics	r2, r1
 8007564:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1099
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	6811      	ldr	r1, [r2, #0]
 800756c:	1c3a      	adds	r2, r7, #0
 800756e:	8812      	ldrh	r2, [r2, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	e017      	b.n	80075a6 <TIM_SelectOCxM+0xb6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1103
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8007576:	1cbb      	adds	r3, r7, #2
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	3b04      	subs	r3, #4
 800757c:	b29b      	uxth	r3, r3
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	b29b      	uxth	r3, r3
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	18d3      	adds	r3, r2, r3
 8007586:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1106

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	6811      	ldr	r1, [r2, #0]
 800758e:	4a07      	ldr	r2, [pc, #28]	; (80075ac <TIM_SelectOCxM+0xbc>)
 8007590:	400a      	ands	r2, r1
 8007592:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1109
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	6811      	ldr	r1, [r2, #0]
 800759a:	1c3a      	adds	r2, r7, #0
 800759c:	8812      	ldrh	r2, [r2, #0]
 800759e:	0212      	lsls	r2, r2, #8
 80075a0:	b292      	uxth	r2, r2
 80075a2:	430a      	orrs	r2, r1
 80075a4:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1111
  }
}
 80075a6:	46bd      	mov	sp, r7
 80075a8:	b004      	add	sp, #16
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	ffff8fff 	.word	0xffff8fff

080075b0 <TIM_SetCompare1>:
TIM_SetCompare1():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1120
  * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1125
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1126
}
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b002      	add	sp, #8
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	46c0      	nop			; (mov r8, r8)

080075c8 <TIM_SetCompare2>:
TIM_SetCompare2():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1135
  * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1140
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	639a      	str	r2, [r3, #56]	; 0x38
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1141
}
 80075d8:	46bd      	mov	sp, r7
 80075da:	b002      	add	sp, #8
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	46c0      	nop			; (mov r8, r8)

080075e0 <TIM_SetCompare3>:
TIM_SetCompare3():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1150
  * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1155
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	63da      	str	r2, [r3, #60]	; 0x3c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1156
}
 80075f0:	46bd      	mov	sp, r7
 80075f2:	b002      	add	sp, #8
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	46c0      	nop			; (mov r8, r8)

080075f8 <TIM_SetCompare4>:
TIM_SetCompare4():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1165
  * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1170
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1171
}
 8007608:	46bd      	mov	sp, r7
 800760a:	b002      	add	sp, #8
 800760c:	bd80      	pop	{r7, pc}
 800760e:	46c0      	nop			; (mov r8, r8)

08007610 <TIM_ForcedOC1Config>:
TIM_ForcedOC1Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1183
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	1c0a      	adds	r2, r1, #0
 800761a:	1cbb      	adds	r3, r7, #2
 800761c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1184
  uint16_t tmpccmr1 = 0;
 800761e:	1c3b      	adds	r3, r7, #0
 8007620:	330e      	adds	r3, #14
 8007622:	2200      	movs	r2, #0
 8007624:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1188
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8007626:	1c3b      	adds	r3, r7, #0
 8007628:	330e      	adds	r3, #14
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	8b12      	ldrh	r2, [r2, #24]
 800762e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1190
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8007630:	1c3b      	adds	r3, r7, #0
 8007632:	330e      	adds	r3, #14
 8007634:	1c3a      	adds	r2, r7, #0
 8007636:	320e      	adds	r2, #14
 8007638:	8812      	ldrh	r2, [r2, #0]
 800763a:	2170      	movs	r1, #112	; 0x70
 800763c:	438a      	bics	r2, r1
 800763e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1192
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8007640:	1c3b      	adds	r3, r7, #0
 8007642:	330e      	adds	r3, #14
 8007644:	1c39      	adds	r1, r7, #0
 8007646:	310e      	adds	r1, #14
 8007648:	1cba      	adds	r2, r7, #2
 800764a:	8809      	ldrh	r1, [r1, #0]
 800764c:	8812      	ldrh	r2, [r2, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1194
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	1c3a      	adds	r2, r7, #0
 8007656:	320e      	adds	r2, #14
 8007658:	8812      	ldrh	r2, [r2, #0]
 800765a:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1195
}
 800765c:	46bd      	mov	sp, r7
 800765e:	b004      	add	sp, #16
 8007660:	bd80      	pop	{r7, pc}
 8007662:	46c0      	nop			; (mov r8, r8)

08007664 <TIM_ForcedOC2Config>:
TIM_ForcedOC2Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1207
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	1c0a      	adds	r2, r1, #0
 800766e:	1cbb      	adds	r3, r7, #2
 8007670:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1208
  uint16_t tmpccmr1 = 0;
 8007672:	1c3b      	adds	r3, r7, #0
 8007674:	330e      	adds	r3, #14
 8007676:	2200      	movs	r2, #0
 8007678:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1214
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr1 = TIMx->CCMR1;
 800767a:	1c3b      	adds	r3, r7, #0
 800767c:	330e      	adds	r3, #14
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	8b12      	ldrh	r2, [r2, #24]
 8007682:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1216
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8007684:	1c3b      	adds	r3, r7, #0
 8007686:	330e      	adds	r3, #14
 8007688:	1c3a      	adds	r2, r7, #0
 800768a:	320e      	adds	r2, #14
 800768c:	8811      	ldrh	r1, [r2, #0]
 800768e:	4a0b      	ldr	r2, [pc, #44]	; (80076bc <TIM_ForcedOC2Config+0x58>)
 8007690:	400a      	ands	r2, r1
 8007692:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1218
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8007694:	1cbb      	adds	r3, r7, #2
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	b299      	uxth	r1, r3
 800769c:	1c3b      	adds	r3, r7, #0
 800769e:	330e      	adds	r3, #14
 80076a0:	1c3a      	adds	r2, r7, #0
 80076a2:	320e      	adds	r2, #14
 80076a4:	8812      	ldrh	r2, [r2, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1220
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	1c3a      	adds	r2, r7, #0
 80076ae:	320e      	adds	r2, #14
 80076b0:	8812      	ldrh	r2, [r2, #0]
 80076b2:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1221
}
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b004      	add	sp, #16
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	ffff8fff 	.word	0xffff8fff

080076c0 <TIM_ForcedOC3Config>:
TIM_ForcedOC3Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1233
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	1c0a      	adds	r2, r1, #0
 80076ca:	1cbb      	adds	r3, r7, #2
 80076cc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1234
  uint16_t tmpccmr2 = 0;
 80076ce:	1c3b      	adds	r3, r7, #0
 80076d0:	330e      	adds	r3, #14
 80076d2:	2200      	movs	r2, #0
 80076d4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1240
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 80076d6:	1c3b      	adds	r3, r7, #0
 80076d8:	330e      	adds	r3, #14
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	8b92      	ldrh	r2, [r2, #28]
 80076de:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1242
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 80076e0:	1c3b      	adds	r3, r7, #0
 80076e2:	330e      	adds	r3, #14
 80076e4:	1c3a      	adds	r2, r7, #0
 80076e6:	320e      	adds	r2, #14
 80076e8:	8812      	ldrh	r2, [r2, #0]
 80076ea:	2170      	movs	r1, #112	; 0x70
 80076ec:	438a      	bics	r2, r1
 80076ee:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1244
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80076f0:	1c3b      	adds	r3, r7, #0
 80076f2:	330e      	adds	r3, #14
 80076f4:	1c39      	adds	r1, r7, #0
 80076f6:	310e      	adds	r1, #14
 80076f8:	1cba      	adds	r2, r7, #2
 80076fa:	8809      	ldrh	r1, [r1, #0]
 80076fc:	8812      	ldrh	r2, [r2, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1246
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	1c3a      	adds	r2, r7, #0
 8007706:	320e      	adds	r2, #14
 8007708:	8812      	ldrh	r2, [r2, #0]
 800770a:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1247
}
 800770c:	46bd      	mov	sp, r7
 800770e:	b004      	add	sp, #16
 8007710:	bd80      	pop	{r7, pc}
 8007712:	46c0      	nop			; (mov r8, r8)

08007714 <TIM_ForcedOC4Config>:
TIM_ForcedOC4Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1259
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	1c0a      	adds	r2, r1, #0
 800771e:	1cbb      	adds	r3, r7, #2
 8007720:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1260
  uint16_t tmpccmr2 = 0;
 8007722:	1c3b      	adds	r3, r7, #0
 8007724:	330e      	adds	r3, #14
 8007726:	2200      	movs	r2, #0
 8007728:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1265
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 800772a:	1c3b      	adds	r3, r7, #0
 800772c:	330e      	adds	r3, #14
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	8b92      	ldrh	r2, [r2, #28]
 8007732:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1267
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8007734:	1c3b      	adds	r3, r7, #0
 8007736:	330e      	adds	r3, #14
 8007738:	1c3a      	adds	r2, r7, #0
 800773a:	320e      	adds	r2, #14
 800773c:	8811      	ldrh	r1, [r2, #0]
 800773e:	4a0b      	ldr	r2, [pc, #44]	; (800776c <TIM_ForcedOC4Config+0x58>)
 8007740:	400a      	ands	r2, r1
 8007742:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1269
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8007744:	1cbb      	adds	r3, r7, #2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	b299      	uxth	r1, r3
 800774c:	1c3b      	adds	r3, r7, #0
 800774e:	330e      	adds	r3, #14
 8007750:	1c3a      	adds	r2, r7, #0
 8007752:	320e      	adds	r2, #14
 8007754:	8812      	ldrh	r2, [r2, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1271
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	1c3a      	adds	r2, r7, #0
 800775e:	320e      	adds	r2, #14
 8007760:	8812      	ldrh	r2, [r2, #0]
 8007762:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1272
}
 8007764:	46bd      	mov	sp, r7
 8007766:	b004      	add	sp, #16
 8007768:	bd80      	pop	{r7, pc}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	ffff8fff 	.word	0xffff8fff

08007770 <TIM_CCPreloadControl>:
TIM_CCPreloadControl():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1282
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	1c0a      	adds	r2, r1, #0
 800777a:	1cfb      	adds	r3, r7, #3
 800777c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1286
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800777e:	1cfb      	adds	r3, r7, #3
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <TIM_CCPreloadControl+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1289
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	889b      	ldrh	r3, [r3, #4]
 800778a:	b29b      	uxth	r3, r3
 800778c:	2201      	movs	r2, #1
 800778e:	4313      	orrs	r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	809a      	strh	r2, [r3, #4]
 8007796:	e007      	b.n	80077a8 <TIM_CCPreloadControl+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1294
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	889b      	ldrh	r3, [r3, #4]
 800779c:	b29b      	uxth	r3, r3
 800779e:	2201      	movs	r2, #1
 80077a0:	4393      	bics	r3, r2
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1296
  }
}
 80077a8:	46bd      	mov	sp, r7
 80077aa:	b002      	add	sp, #8
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	46c0      	nop			; (mov r8, r8)

080077b0 <TIM_OC1PreloadConfig>:
TIM_OC1PreloadConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1309
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	1c0a      	adds	r2, r1, #0
 80077ba:	1cbb      	adds	r3, r7, #2
 80077bc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1310
  uint16_t tmpccmr1 = 0;
 80077be:	1c3b      	adds	r3, r7, #0
 80077c0:	330e      	adds	r3, #14
 80077c2:	2200      	movs	r2, #0
 80077c4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1315
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 80077c6:	1c3b      	adds	r3, r7, #0
 80077c8:	330e      	adds	r3, #14
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	8b12      	ldrh	r2, [r2, #24]
 80077ce:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1317
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80077d0:	1c3b      	adds	r3, r7, #0
 80077d2:	330e      	adds	r3, #14
 80077d4:	1c3a      	adds	r2, r7, #0
 80077d6:	320e      	adds	r2, #14
 80077d8:	8812      	ldrh	r2, [r2, #0]
 80077da:	2108      	movs	r1, #8
 80077dc:	438a      	bics	r2, r1
 80077de:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1319
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80077e0:	1c3b      	adds	r3, r7, #0
 80077e2:	330e      	adds	r3, #14
 80077e4:	1c39      	adds	r1, r7, #0
 80077e6:	310e      	adds	r1, #14
 80077e8:	1cba      	adds	r2, r7, #2
 80077ea:	8809      	ldrh	r1, [r1, #0]
 80077ec:	8812      	ldrh	r2, [r2, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1321
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	1c3a      	adds	r2, r7, #0
 80077f6:	320e      	adds	r2, #14
 80077f8:	8812      	ldrh	r2, [r2, #0]
 80077fa:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1322
}
 80077fc:	46bd      	mov	sp, r7
 80077fe:	b004      	add	sp, #16
 8007800:	bd80      	pop	{r7, pc}
 8007802:	46c0      	nop			; (mov r8, r8)

08007804 <TIM_OC2PreloadConfig>:
TIM_OC2PreloadConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1334
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	1c0a      	adds	r2, r1, #0
 800780e:	1cbb      	adds	r3, r7, #2
 8007810:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1335
  uint16_t tmpccmr1 = 0;
 8007812:	1c3b      	adds	r3, r7, #0
 8007814:	330e      	adds	r3, #14
 8007816:	2200      	movs	r2, #0
 8007818:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1340
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 800781a:	1c3b      	adds	r3, r7, #0
 800781c:	330e      	adds	r3, #14
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	8b12      	ldrh	r2, [r2, #24]
 8007822:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1342
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8007824:	1c3b      	adds	r3, r7, #0
 8007826:	330e      	adds	r3, #14
 8007828:	1c3a      	adds	r2, r7, #0
 800782a:	320e      	adds	r2, #14
 800782c:	8811      	ldrh	r1, [r2, #0]
 800782e:	4a0b      	ldr	r2, [pc, #44]	; (800785c <TIM_OC2PreloadConfig+0x58>)
 8007830:	400a      	ands	r2, r1
 8007832:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1344
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8007834:	1cbb      	adds	r3, r7, #2
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	b299      	uxth	r1, r3
 800783c:	1c3b      	adds	r3, r7, #0
 800783e:	330e      	adds	r3, #14
 8007840:	1c3a      	adds	r2, r7, #0
 8007842:	320e      	adds	r2, #14
 8007844:	8812      	ldrh	r2, [r2, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1346
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	1c3a      	adds	r2, r7, #0
 800784e:	320e      	adds	r2, #14
 8007850:	8812      	ldrh	r2, [r2, #0]
 8007852:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1347
}
 8007854:	46bd      	mov	sp, r7
 8007856:	b004      	add	sp, #16
 8007858:	bd80      	pop	{r7, pc}
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	fffff7ff 	.word	0xfffff7ff

08007860 <TIM_OC3PreloadConfig>:
TIM_OC3PreloadConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1359
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	1c0a      	adds	r2, r1, #0
 800786a:	1cbb      	adds	r3, r7, #2
 800786c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1360
  uint16_t tmpccmr2 = 0;
 800786e:	1c3b      	adds	r3, r7, #0
 8007870:	330e      	adds	r3, #14
 8007872:	2200      	movs	r2, #0
 8007874:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1366
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8007876:	1c3b      	adds	r3, r7, #0
 8007878:	330e      	adds	r3, #14
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	8b92      	ldrh	r2, [r2, #28]
 800787e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1368
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8007880:	1c3b      	adds	r3, r7, #0
 8007882:	330e      	adds	r3, #14
 8007884:	1c3a      	adds	r2, r7, #0
 8007886:	320e      	adds	r2, #14
 8007888:	8812      	ldrh	r2, [r2, #0]
 800788a:	2108      	movs	r1, #8
 800788c:	438a      	bics	r2, r1
 800788e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1370
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8007890:	1c3b      	adds	r3, r7, #0
 8007892:	330e      	adds	r3, #14
 8007894:	1c39      	adds	r1, r7, #0
 8007896:	310e      	adds	r1, #14
 8007898:	1cba      	adds	r2, r7, #2
 800789a:	8809      	ldrh	r1, [r1, #0]
 800789c:	8812      	ldrh	r2, [r2, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1372
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	1c3a      	adds	r2, r7, #0
 80078a6:	320e      	adds	r2, #14
 80078a8:	8812      	ldrh	r2, [r2, #0]
 80078aa:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1373
}
 80078ac:	46bd      	mov	sp, r7
 80078ae:	b004      	add	sp, #16
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	46c0      	nop			; (mov r8, r8)

080078b4 <TIM_OC4PreloadConfig>:
TIM_OC4PreloadConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1385
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	1c0a      	adds	r2, r1, #0
 80078be:	1cbb      	adds	r3, r7, #2
 80078c0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1386
  uint16_t tmpccmr2 = 0;
 80078c2:	1c3b      	adds	r3, r7, #0
 80078c4:	330e      	adds	r3, #14
 80078c6:	2200      	movs	r2, #0
 80078c8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1392
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 80078ca:	1c3b      	adds	r3, r7, #0
 80078cc:	330e      	adds	r3, #14
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	8b92      	ldrh	r2, [r2, #28]
 80078d2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1394
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 80078d4:	1c3b      	adds	r3, r7, #0
 80078d6:	330e      	adds	r3, #14
 80078d8:	1c3a      	adds	r2, r7, #0
 80078da:	320e      	adds	r2, #14
 80078dc:	8811      	ldrh	r1, [r2, #0]
 80078de:	4a0b      	ldr	r2, [pc, #44]	; (800790c <TIM_OC4PreloadConfig+0x58>)
 80078e0:	400a      	ands	r2, r1
 80078e2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1396
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80078e4:	1cbb      	adds	r3, r7, #2
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	b299      	uxth	r1, r3
 80078ec:	1c3b      	adds	r3, r7, #0
 80078ee:	330e      	adds	r3, #14
 80078f0:	1c3a      	adds	r2, r7, #0
 80078f2:	320e      	adds	r2, #14
 80078f4:	8812      	ldrh	r2, [r2, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1398
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	1c3a      	adds	r2, r7, #0
 80078fe:	320e      	adds	r2, #14
 8007900:	8812      	ldrh	r2, [r2, #0]
 8007902:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1399
}
 8007904:	46bd      	mov	sp, r7
 8007906:	b004      	add	sp, #16
 8007908:	bd80      	pop	{r7, pc}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	fffff7ff 	.word	0xfffff7ff

08007910 <TIM_OC1FastConfig>:
TIM_OC1FastConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1411
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	1c0a      	adds	r2, r1, #0
 800791a:	1cbb      	adds	r3, r7, #2
 800791c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1412
  uint16_t tmpccmr1 = 0;
 800791e:	1c3b      	adds	r3, r7, #0
 8007920:	330e      	adds	r3, #14
 8007922:	2200      	movs	r2, #0
 8007924:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1419
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8007926:	1c3b      	adds	r3, r7, #0
 8007928:	330e      	adds	r3, #14
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	8b12      	ldrh	r2, [r2, #24]
 800792e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1421
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8007930:	1c3b      	adds	r3, r7, #0
 8007932:	330e      	adds	r3, #14
 8007934:	1c3a      	adds	r2, r7, #0
 8007936:	320e      	adds	r2, #14
 8007938:	8812      	ldrh	r2, [r2, #0]
 800793a:	2104      	movs	r1, #4
 800793c:	438a      	bics	r2, r1
 800793e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1423
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8007940:	1c3b      	adds	r3, r7, #0
 8007942:	330e      	adds	r3, #14
 8007944:	1c39      	adds	r1, r7, #0
 8007946:	310e      	adds	r1, #14
 8007948:	1cba      	adds	r2, r7, #2
 800794a:	8809      	ldrh	r1, [r1, #0]
 800794c:	8812      	ldrh	r2, [r2, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1425
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	1c3a      	adds	r2, r7, #0
 8007956:	320e      	adds	r2, #14
 8007958:	8812      	ldrh	r2, [r2, #0]
 800795a:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1426
}
 800795c:	46bd      	mov	sp, r7
 800795e:	b004      	add	sp, #16
 8007960:	bd80      	pop	{r7, pc}
 8007962:	46c0      	nop			; (mov r8, r8)

08007964 <TIM_OC2FastConfig>:
TIM_OC2FastConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1438
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	1c0a      	adds	r2, r1, #0
 800796e:	1cbb      	adds	r3, r7, #2
 8007970:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1439
  uint16_t tmpccmr1 = 0;
 8007972:	1c3b      	adds	r3, r7, #0
 8007974:	330e      	adds	r3, #14
 8007976:	2200      	movs	r2, #0
 8007978:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1446
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800797a:	1c3b      	adds	r3, r7, #0
 800797c:	330e      	adds	r3, #14
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	8b12      	ldrh	r2, [r2, #24]
 8007982:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1448
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8007984:	1c3b      	adds	r3, r7, #0
 8007986:	330e      	adds	r3, #14
 8007988:	1c3a      	adds	r2, r7, #0
 800798a:	320e      	adds	r2, #14
 800798c:	8811      	ldrh	r1, [r2, #0]
 800798e:	4a0b      	ldr	r2, [pc, #44]	; (80079bc <TIM_OC2FastConfig+0x58>)
 8007990:	400a      	ands	r2, r1
 8007992:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1450
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8007994:	1cbb      	adds	r3, r7, #2
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	b299      	uxth	r1, r3
 800799c:	1c3b      	adds	r3, r7, #0
 800799e:	330e      	adds	r3, #14
 80079a0:	1c3a      	adds	r2, r7, #0
 80079a2:	320e      	adds	r2, #14
 80079a4:	8812      	ldrh	r2, [r2, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1452
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	1c3a      	adds	r2, r7, #0
 80079ae:	320e      	adds	r2, #14
 80079b0:	8812      	ldrh	r2, [r2, #0]
 80079b2:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1453
}
 80079b4:	46bd      	mov	sp, r7
 80079b6:	b004      	add	sp, #16
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	46c0      	nop			; (mov r8, r8)
 80079bc:	fffffbff 	.word	0xfffffbff

080079c0 <TIM_OC3FastConfig>:
TIM_OC3FastConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1465
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	1c0a      	adds	r2, r1, #0
 80079ca:	1cbb      	adds	r3, r7, #2
 80079cc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1466
  uint16_t tmpccmr2 = 0;
 80079ce:	1c3b      	adds	r3, r7, #0
 80079d0:	330e      	adds	r3, #14
 80079d2:	2200      	movs	r2, #0
 80079d4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1473
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80079d6:	1c3b      	adds	r3, r7, #0
 80079d8:	330e      	adds	r3, #14
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	8b92      	ldrh	r2, [r2, #28]
 80079de:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1475
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 80079e0:	1c3b      	adds	r3, r7, #0
 80079e2:	330e      	adds	r3, #14
 80079e4:	1c3a      	adds	r2, r7, #0
 80079e6:	320e      	adds	r2, #14
 80079e8:	8812      	ldrh	r2, [r2, #0]
 80079ea:	2104      	movs	r1, #4
 80079ec:	438a      	bics	r2, r1
 80079ee:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1477
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80079f0:	1c3b      	adds	r3, r7, #0
 80079f2:	330e      	adds	r3, #14
 80079f4:	1c39      	adds	r1, r7, #0
 80079f6:	310e      	adds	r1, #14
 80079f8:	1cba      	adds	r2, r7, #2
 80079fa:	8809      	ldrh	r1, [r1, #0]
 80079fc:	8812      	ldrh	r2, [r2, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1479
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	1c3a      	adds	r2, r7, #0
 8007a06:	320e      	adds	r2, #14
 8007a08:	8812      	ldrh	r2, [r2, #0]
 8007a0a:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1480
}
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b004      	add	sp, #16
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			; (mov r8, r8)

08007a14 <TIM_OC4FastConfig>:
TIM_OC4FastConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1492
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	1c0a      	adds	r2, r1, #0
 8007a1e:	1cbb      	adds	r3, r7, #2
 8007a20:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1493
  uint16_t tmpccmr2 = 0;
 8007a22:	1c3b      	adds	r3, r7, #0
 8007a24:	330e      	adds	r3, #14
 8007a26:	2200      	movs	r2, #0
 8007a28:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1500
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8007a2a:	1c3b      	adds	r3, r7, #0
 8007a2c:	330e      	adds	r3, #14
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	8b92      	ldrh	r2, [r2, #28]
 8007a32:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1502
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8007a34:	1c3b      	adds	r3, r7, #0
 8007a36:	330e      	adds	r3, #14
 8007a38:	1c3a      	adds	r2, r7, #0
 8007a3a:	320e      	adds	r2, #14
 8007a3c:	8811      	ldrh	r1, [r2, #0]
 8007a3e:	4a0b      	ldr	r2, [pc, #44]	; (8007a6c <TIM_OC4FastConfig+0x58>)
 8007a40:	400a      	ands	r2, r1
 8007a42:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1504
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8007a44:	1cbb      	adds	r3, r7, #2
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	b299      	uxth	r1, r3
 8007a4c:	1c3b      	adds	r3, r7, #0
 8007a4e:	330e      	adds	r3, #14
 8007a50:	1c3a      	adds	r2, r7, #0
 8007a52:	320e      	adds	r2, #14
 8007a54:	8812      	ldrh	r2, [r2, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1506
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	1c3a      	adds	r2, r7, #0
 8007a5e:	320e      	adds	r2, #14
 8007a60:	8812      	ldrh	r2, [r2, #0]
 8007a62:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1507
}
 8007a64:	46bd      	mov	sp, r7
 8007a66:	b004      	add	sp, #16
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	46c0      	nop			; (mov r8, r8)
 8007a6c:	fffffbff 	.word	0xfffffbff

08007a70 <TIM_ClearOC1Ref>:
TIM_ClearOC1Ref():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1519
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	1c0a      	adds	r2, r1, #0
 8007a7a:	1cbb      	adds	r3, r7, #2
 8007a7c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1520
  uint16_t tmpccmr1 = 0;
 8007a7e:	1c3b      	adds	r3, r7, #0
 8007a80:	330e      	adds	r3, #14
 8007a82:	2200      	movs	r2, #0
 8007a84:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1526
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8007a86:	1c3b      	adds	r3, r7, #0
 8007a88:	330e      	adds	r3, #14
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	8b12      	ldrh	r2, [r2, #24]
 8007a8e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1528
  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8007a90:	1c3b      	adds	r3, r7, #0
 8007a92:	330e      	adds	r3, #14
 8007a94:	1c3a      	adds	r2, r7, #0
 8007a96:	320e      	adds	r2, #14
 8007a98:	8812      	ldrh	r2, [r2, #0]
 8007a9a:	2180      	movs	r1, #128	; 0x80
 8007a9c:	438a      	bics	r2, r1
 8007a9e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1530
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8007aa0:	1c3b      	adds	r3, r7, #0
 8007aa2:	330e      	adds	r3, #14
 8007aa4:	1c39      	adds	r1, r7, #0
 8007aa6:	310e      	adds	r1, #14
 8007aa8:	1cba      	adds	r2, r7, #2
 8007aaa:	8809      	ldrh	r1, [r1, #0]
 8007aac:	8812      	ldrh	r2, [r2, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1532
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	1c3a      	adds	r2, r7, #0
 8007ab6:	320e      	adds	r2, #14
 8007ab8:	8812      	ldrh	r2, [r2, #0]
 8007aba:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1533
}
 8007abc:	46bd      	mov	sp, r7
 8007abe:	b004      	add	sp, #16
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	46c0      	nop			; (mov r8, r8)

08007ac4 <TIM_ClearOC2Ref>:
TIM_ClearOC2Ref():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1545
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	1c0a      	adds	r2, r1, #0
 8007ace:	1cbb      	adds	r3, r7, #2
 8007ad0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1546
  uint16_t tmpccmr1 = 0;
 8007ad2:	1c3b      	adds	r3, r7, #0
 8007ad4:	330e      	adds	r3, #14
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1552
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8007ada:	1c3b      	adds	r3, r7, #0
 8007adc:	330e      	adds	r3, #14
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	8b12      	ldrh	r2, [r2, #24]
 8007ae2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1554
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8007ae4:	1c3b      	adds	r3, r7, #0
 8007ae6:	330e      	adds	r3, #14
 8007ae8:	1c3a      	adds	r2, r7, #0
 8007aea:	320e      	adds	r2, #14
 8007aec:	8812      	ldrh	r2, [r2, #0]
 8007aee:	0452      	lsls	r2, r2, #17
 8007af0:	0c52      	lsrs	r2, r2, #17
 8007af2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1556
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8007af4:	1cbb      	adds	r3, r7, #2
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	b299      	uxth	r1, r3
 8007afc:	1c3b      	adds	r3, r7, #0
 8007afe:	330e      	adds	r3, #14
 8007b00:	1c3a      	adds	r2, r7, #0
 8007b02:	320e      	adds	r2, #14
 8007b04:	8812      	ldrh	r2, [r2, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1558
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	1c3a      	adds	r2, r7, #0
 8007b0e:	320e      	adds	r2, #14
 8007b10:	8812      	ldrh	r2, [r2, #0]
 8007b12:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1559
}
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b004      	add	sp, #16
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	46c0      	nop			; (mov r8, r8)

08007b1c <TIM_ClearOC3Ref>:
TIM_ClearOC3Ref():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1571
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	1c0a      	adds	r2, r1, #0
 8007b26:	1cbb      	adds	r3, r7, #2
 8007b28:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1572
  uint16_t tmpccmr2 = 0;
 8007b2a:	1c3b      	adds	r3, r7, #0
 8007b2c:	330e      	adds	r3, #14
 8007b2e:	2200      	movs	r2, #0
 8007b30:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1578
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 8007b32:	1c3b      	adds	r3, r7, #0
 8007b34:	330e      	adds	r3, #14
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	8b92      	ldrh	r2, [r2, #28]
 8007b3a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1580
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8007b3c:	1c3b      	adds	r3, r7, #0
 8007b3e:	330e      	adds	r3, #14
 8007b40:	1c3a      	adds	r2, r7, #0
 8007b42:	320e      	adds	r2, #14
 8007b44:	8812      	ldrh	r2, [r2, #0]
 8007b46:	2180      	movs	r1, #128	; 0x80
 8007b48:	438a      	bics	r2, r1
 8007b4a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1582
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8007b4c:	1c3b      	adds	r3, r7, #0
 8007b4e:	330e      	adds	r3, #14
 8007b50:	1c39      	adds	r1, r7, #0
 8007b52:	310e      	adds	r1, #14
 8007b54:	1cba      	adds	r2, r7, #2
 8007b56:	8809      	ldrh	r1, [r1, #0]
 8007b58:	8812      	ldrh	r2, [r2, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1584
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	1c3a      	adds	r2, r7, #0
 8007b62:	320e      	adds	r2, #14
 8007b64:	8812      	ldrh	r2, [r2, #0]
 8007b66:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1585
}
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	b004      	add	sp, #16
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	46c0      	nop			; (mov r8, r8)

08007b70 <TIM_ClearOC4Ref>:
TIM_ClearOC4Ref():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1597
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	1c0a      	adds	r2, r1, #0
 8007b7a:	1cbb      	adds	r3, r7, #2
 8007b7c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1598
  uint16_t tmpccmr2 = 0;
 8007b7e:	1c3b      	adds	r3, r7, #0
 8007b80:	330e      	adds	r3, #14
 8007b82:	2200      	movs	r2, #0
 8007b84:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1604
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 8007b86:	1c3b      	adds	r3, r7, #0
 8007b88:	330e      	adds	r3, #14
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	8b92      	ldrh	r2, [r2, #28]
 8007b8e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1606
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8007b90:	1c3b      	adds	r3, r7, #0
 8007b92:	330e      	adds	r3, #14
 8007b94:	1c3a      	adds	r2, r7, #0
 8007b96:	320e      	adds	r2, #14
 8007b98:	8812      	ldrh	r2, [r2, #0]
 8007b9a:	0452      	lsls	r2, r2, #17
 8007b9c:	0c52      	lsrs	r2, r2, #17
 8007b9e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1608
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8007ba0:	1cbb      	adds	r3, r7, #2
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	b299      	uxth	r1, r3
 8007ba8:	1c3b      	adds	r3, r7, #0
 8007baa:	330e      	adds	r3, #14
 8007bac:	1c3a      	adds	r2, r7, #0
 8007bae:	320e      	adds	r2, #14
 8007bb0:	8812      	ldrh	r2, [r2, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1610
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	1c3a      	adds	r2, r7, #0
 8007bba:	320e      	adds	r2, #14
 8007bbc:	8812      	ldrh	r2, [r2, #0]
 8007bbe:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1611
}
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	b004      	add	sp, #16
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	46c0      	nop			; (mov r8, r8)

08007bc8 <TIM_OC1PolarityConfig>:
TIM_OC1PolarityConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1623
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	1c0a      	adds	r2, r1, #0
 8007bd2:	1cbb      	adds	r3, r7, #2
 8007bd4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1624
  uint16_t tmpccer = 0;
 8007bd6:	1c3b      	adds	r3, r7, #0
 8007bd8:	330e      	adds	r3, #14
 8007bda:	2200      	movs	r2, #0
 8007bdc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1630
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8007bde:	1c3b      	adds	r3, r7, #0
 8007be0:	330e      	adds	r3, #14
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	8c12      	ldrh	r2, [r2, #32]
 8007be6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1632
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8007be8:	1c3b      	adds	r3, r7, #0
 8007bea:	330e      	adds	r3, #14
 8007bec:	1c3a      	adds	r2, r7, #0
 8007bee:	320e      	adds	r2, #14
 8007bf0:	8812      	ldrh	r2, [r2, #0]
 8007bf2:	2102      	movs	r1, #2
 8007bf4:	438a      	bics	r2, r1
 8007bf6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1633
  tmpccer |= TIM_OCPolarity;
 8007bf8:	1c3b      	adds	r3, r7, #0
 8007bfa:	330e      	adds	r3, #14
 8007bfc:	1c39      	adds	r1, r7, #0
 8007bfe:	310e      	adds	r1, #14
 8007c00:	1cba      	adds	r2, r7, #2
 8007c02:	8809      	ldrh	r1, [r1, #0]
 8007c04:	8812      	ldrh	r2, [r2, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1635
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	1c3a      	adds	r2, r7, #0
 8007c0e:	320e      	adds	r2, #14
 8007c10:	8812      	ldrh	r2, [r2, #0]
 8007c12:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1636
}
 8007c14:	46bd      	mov	sp, r7
 8007c16:	b004      	add	sp, #16
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	46c0      	nop			; (mov r8, r8)

08007c1c <TIM_OC1NPolarityConfig>:
TIM_OC1NPolarityConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1648
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	1c0a      	adds	r2, r1, #0
 8007c26:	1cbb      	adds	r3, r7, #2
 8007c28:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1649
  uint16_t tmpccer = 0;
 8007c2a:	1c3b      	adds	r3, r7, #0
 8007c2c:	330e      	adds	r3, #14
 8007c2e:	2200      	movs	r2, #0
 8007c30:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1654
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8007c32:	1c3b      	adds	r3, r7, #0
 8007c34:	330e      	adds	r3, #14
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	8c12      	ldrh	r2, [r2, #32]
 8007c3a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1656
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8007c3c:	1c3b      	adds	r3, r7, #0
 8007c3e:	330e      	adds	r3, #14
 8007c40:	1c3a      	adds	r2, r7, #0
 8007c42:	320e      	adds	r2, #14
 8007c44:	8812      	ldrh	r2, [r2, #0]
 8007c46:	2108      	movs	r1, #8
 8007c48:	438a      	bics	r2, r1
 8007c4a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1657
  tmpccer |= TIM_OCNPolarity;
 8007c4c:	1c3b      	adds	r3, r7, #0
 8007c4e:	330e      	adds	r3, #14
 8007c50:	1c39      	adds	r1, r7, #0
 8007c52:	310e      	adds	r1, #14
 8007c54:	1cba      	adds	r2, r7, #2
 8007c56:	8809      	ldrh	r1, [r1, #0]
 8007c58:	8812      	ldrh	r2, [r2, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1659
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	1c3a      	adds	r2, r7, #0
 8007c62:	320e      	adds	r2, #14
 8007c64:	8812      	ldrh	r2, [r2, #0]
 8007c66:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1660
}
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	b004      	add	sp, #16
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	46c0      	nop			; (mov r8, r8)

08007c70 <TIM_OC2PolarityConfig>:
TIM_OC2PolarityConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1672
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	1c0a      	adds	r2, r1, #0
 8007c7a:	1cbb      	adds	r3, r7, #2
 8007c7c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1673
  uint16_t tmpccer = 0;
 8007c7e:	1c3b      	adds	r3, r7, #0
 8007c80:	330e      	adds	r3, #14
 8007c82:	2200      	movs	r2, #0
 8007c84:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1679
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8007c86:	1c3b      	adds	r3, r7, #0
 8007c88:	330e      	adds	r3, #14
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	8c12      	ldrh	r2, [r2, #32]
 8007c8e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1681
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8007c90:	1c3b      	adds	r3, r7, #0
 8007c92:	330e      	adds	r3, #14
 8007c94:	1c3a      	adds	r2, r7, #0
 8007c96:	320e      	adds	r2, #14
 8007c98:	8812      	ldrh	r2, [r2, #0]
 8007c9a:	2120      	movs	r1, #32
 8007c9c:	438a      	bics	r2, r1
 8007c9e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1682
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8007ca0:	1cbb      	adds	r3, r7, #2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	b299      	uxth	r1, r3
 8007ca8:	1c3b      	adds	r3, r7, #0
 8007caa:	330e      	adds	r3, #14
 8007cac:	1c3a      	adds	r2, r7, #0
 8007cae:	320e      	adds	r2, #14
 8007cb0:	8812      	ldrh	r2, [r2, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1684
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	1c3a      	adds	r2, r7, #0
 8007cba:	320e      	adds	r2, #14
 8007cbc:	8812      	ldrh	r2, [r2, #0]
 8007cbe:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1685
}
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b004      	add	sp, #16
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	46c0      	nop			; (mov r8, r8)

08007cc8 <TIM_OC2NPolarityConfig>:
TIM_OC2NPolarityConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1697
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	1c0a      	adds	r2, r1, #0
 8007cd2:	1cbb      	adds	r3, r7, #2
 8007cd4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1698
  uint16_t tmpccer = 0;
 8007cd6:	1c3b      	adds	r3, r7, #0
 8007cd8:	330e      	adds	r3, #14
 8007cda:	2200      	movs	r2, #0
 8007cdc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1703
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8007cde:	1c3b      	adds	r3, r7, #0
 8007ce0:	330e      	adds	r3, #14
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	8c12      	ldrh	r2, [r2, #32]
 8007ce6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1705
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8007ce8:	1c3b      	adds	r3, r7, #0
 8007cea:	330e      	adds	r3, #14
 8007cec:	1c3a      	adds	r2, r7, #0
 8007cee:	320e      	adds	r2, #14
 8007cf0:	8812      	ldrh	r2, [r2, #0]
 8007cf2:	2180      	movs	r1, #128	; 0x80
 8007cf4:	438a      	bics	r2, r1
 8007cf6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1706
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8007cf8:	1cbb      	adds	r3, r7, #2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	b299      	uxth	r1, r3
 8007d00:	1c3b      	adds	r3, r7, #0
 8007d02:	330e      	adds	r3, #14
 8007d04:	1c3a      	adds	r2, r7, #0
 8007d06:	320e      	adds	r2, #14
 8007d08:	8812      	ldrh	r2, [r2, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1708
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	1c3a      	adds	r2, r7, #0
 8007d12:	320e      	adds	r2, #14
 8007d14:	8812      	ldrh	r2, [r2, #0]
 8007d16:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1709
}
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b004      	add	sp, #16
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	46c0      	nop			; (mov r8, r8)

08007d20 <TIM_OC3PolarityConfig>:
TIM_OC3PolarityConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1721
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	1c0a      	adds	r2, r1, #0
 8007d2a:	1cbb      	adds	r3, r7, #2
 8007d2c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1722
  uint16_t tmpccer = 0;
 8007d2e:	1c3b      	adds	r3, r7, #0
 8007d30:	330e      	adds	r3, #14
 8007d32:	2200      	movs	r2, #0
 8007d34:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1728
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8007d36:	1c3b      	adds	r3, r7, #0
 8007d38:	330e      	adds	r3, #14
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	8c12      	ldrh	r2, [r2, #32]
 8007d3e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1730
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8007d40:	1c3b      	adds	r3, r7, #0
 8007d42:	330e      	adds	r3, #14
 8007d44:	1c3a      	adds	r2, r7, #0
 8007d46:	320e      	adds	r2, #14
 8007d48:	8811      	ldrh	r1, [r2, #0]
 8007d4a:	4a0b      	ldr	r2, [pc, #44]	; (8007d78 <TIM_OC3PolarityConfig+0x58>)
 8007d4c:	400a      	ands	r2, r1
 8007d4e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1731
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8007d50:	1cbb      	adds	r3, r7, #2
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	b299      	uxth	r1, r3
 8007d58:	1c3b      	adds	r3, r7, #0
 8007d5a:	330e      	adds	r3, #14
 8007d5c:	1c3a      	adds	r2, r7, #0
 8007d5e:	320e      	adds	r2, #14
 8007d60:	8812      	ldrh	r2, [r2, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1733
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	1c3a      	adds	r2, r7, #0
 8007d6a:	320e      	adds	r2, #14
 8007d6c:	8812      	ldrh	r2, [r2, #0]
 8007d6e:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1734
}
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b004      	add	sp, #16
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	fffffdff 	.word	0xfffffdff

08007d7c <TIM_OC3NPolarityConfig>:
TIM_OC3NPolarityConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1746
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	1c0a      	adds	r2, r1, #0
 8007d86:	1cbb      	adds	r3, r7, #2
 8007d88:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1747
  uint16_t tmpccer = 0;
 8007d8a:	1c3b      	adds	r3, r7, #0
 8007d8c:	330e      	adds	r3, #14
 8007d8e:	2200      	movs	r2, #0
 8007d90:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1753
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8007d92:	1c3b      	adds	r3, r7, #0
 8007d94:	330e      	adds	r3, #14
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	8c12      	ldrh	r2, [r2, #32]
 8007d9a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1755
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8007d9c:	1c3b      	adds	r3, r7, #0
 8007d9e:	330e      	adds	r3, #14
 8007da0:	1c3a      	adds	r2, r7, #0
 8007da2:	320e      	adds	r2, #14
 8007da4:	8811      	ldrh	r1, [r2, #0]
 8007da6:	4a0b      	ldr	r2, [pc, #44]	; (8007dd4 <TIM_OC3NPolarityConfig+0x58>)
 8007da8:	400a      	ands	r2, r1
 8007daa:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1756
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8007dac:	1cbb      	adds	r3, r7, #2
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	021b      	lsls	r3, r3, #8
 8007db2:	b299      	uxth	r1, r3
 8007db4:	1c3b      	adds	r3, r7, #0
 8007db6:	330e      	adds	r3, #14
 8007db8:	1c3a      	adds	r2, r7, #0
 8007dba:	320e      	adds	r2, #14
 8007dbc:	8812      	ldrh	r2, [r2, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1758
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	1c3a      	adds	r2, r7, #0
 8007dc6:	320e      	adds	r2, #14
 8007dc8:	8812      	ldrh	r2, [r2, #0]
 8007dca:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1759
}
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	b004      	add	sp, #16
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	fffff7ff 	.word	0xfffff7ff

08007dd8 <TIM_OC4PolarityConfig>:
TIM_OC4PolarityConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1771
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	1c0a      	adds	r2, r1, #0
 8007de2:	1cbb      	adds	r3, r7, #2
 8007de4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1772
  uint16_t tmpccer = 0;
 8007de6:	1c3b      	adds	r3, r7, #0
 8007de8:	330e      	adds	r3, #14
 8007dea:	2200      	movs	r2, #0
 8007dec:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1778
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8007dee:	1c3b      	adds	r3, r7, #0
 8007df0:	330e      	adds	r3, #14
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	8c12      	ldrh	r2, [r2, #32]
 8007df6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1780
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8007df8:	1c3b      	adds	r3, r7, #0
 8007dfa:	330e      	adds	r3, #14
 8007dfc:	1c3a      	adds	r2, r7, #0
 8007dfe:	320e      	adds	r2, #14
 8007e00:	8811      	ldrh	r1, [r2, #0]
 8007e02:	4a0b      	ldr	r2, [pc, #44]	; (8007e30 <TIM_OC4PolarityConfig+0x58>)
 8007e04:	400a      	ands	r2, r1
 8007e06:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1781
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8007e08:	1cbb      	adds	r3, r7, #2
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	031b      	lsls	r3, r3, #12
 8007e0e:	b299      	uxth	r1, r3
 8007e10:	1c3b      	adds	r3, r7, #0
 8007e12:	330e      	adds	r3, #14
 8007e14:	1c3a      	adds	r2, r7, #0
 8007e16:	320e      	adds	r2, #14
 8007e18:	8812      	ldrh	r2, [r2, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1783
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	1c3a      	adds	r2, r7, #0
 8007e22:	320e      	adds	r2, #14
 8007e24:	8812      	ldrh	r2, [r2, #0]
 8007e26:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1784
}
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	b004      	add	sp, #16
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	ffffdfff 	.word	0xffffdfff

08007e34 <TIM_SelectOCREFClear>:
TIM_SelectOCREFClear():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1796
  *            @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to ETRF.
  *            @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connected to OCREF_CLR input.  
  * @retval None
  */
void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	1c0a      	adds	r2, r1, #0
 8007e3e:	1cbb      	adds	r3, r7, #2
 8007e40:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1802
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	891b      	ldrh	r3, [r3, #8]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2208      	movs	r2, #8
 8007e4a:	4393      	bics	r3, r2
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1803
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	891b      	ldrh	r3, [r3, #8]
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	1cbb      	adds	r3, r7, #2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1804
}
 8007e64:	46bd      	mov	sp, r7
 8007e66:	b002      	add	sp, #8
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	46c0      	nop			; (mov r8, r8)

08007e6c <TIM_CCxCmd>:
TIM_CCxCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1820
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	1cbb      	adds	r3, r7, #2
 8007e76:	8019      	strh	r1, [r3, #0]
 8007e78:	1c3b      	adds	r3, r7, #0
 8007e7a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1821
  uint16_t tmp = 0;
 8007e7c:	1c3b      	adds	r3, r7, #0
 8007e7e:	330e      	adds	r3, #14
 8007e80:	2200      	movs	r2, #0
 8007e82:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1827

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx)); 
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8007e84:	1cbb      	adds	r3, r7, #2
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	409a      	lsls	r2, r3
 8007e8c:	1c3b      	adds	r3, r7, #0
 8007e8e:	330e      	adds	r3, #14
 8007e90:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1830

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	8c1b      	ldrh	r3, [r3, #32]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	1c3a      	adds	r2, r7, #0
 8007e9a:	320e      	adds	r2, #14
 8007e9c:	8812      	ldrh	r2, [r2, #0]
 8007e9e:	43d2      	mvns	r2, r2
 8007ea0:	b292      	uxth	r2, r2
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1833

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	8c1b      	ldrh	r3, [r3, #32]
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	1c3b      	adds	r3, r7, #0
 8007eb2:	8819      	ldrh	r1, [r3, #0]
 8007eb4:	1cbb      	adds	r3, r7, #2
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	1c08      	adds	r0, r1, #0
 8007eba:	4098      	lsls	r0, r3
 8007ebc:	1c03      	adds	r3, r0, #0
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1834
}
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	b004      	add	sp, #16
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	46c0      	nop			; (mov r8, r8)

08007ed0 <TIM_CCxNCmd>:
TIM_CCxNCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1849
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	1cbb      	adds	r3, r7, #2
 8007eda:	8019      	strh	r1, [r3, #0]
 8007edc:	1c3b      	adds	r3, r7, #0
 8007ede:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1850
  uint16_t tmp = 0;
 8007ee0:	1c3b      	adds	r3, r7, #0
 8007ee2:	330e      	adds	r3, #14
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1857
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8007ee8:	1cbb      	adds	r3, r7, #2
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	2204      	movs	r2, #4
 8007eee:	409a      	lsls	r2, r3
 8007ef0:	1c3b      	adds	r3, r7, #0
 8007ef2:	330e      	adds	r3, #14
 8007ef4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1860

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	8c1b      	ldrh	r3, [r3, #32]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	1c3a      	adds	r2, r7, #0
 8007efe:	320e      	adds	r2, #14
 8007f00:	8812      	ldrh	r2, [r2, #0]
 8007f02:	43d2      	mvns	r2, r2
 8007f04:	b292      	uxth	r2, r2
 8007f06:	4013      	ands	r3, r2
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1863

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	8c1b      	ldrh	r3, [r3, #32]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	1c3b      	adds	r3, r7, #0
 8007f16:	8819      	ldrh	r1, [r3, #0]
 8007f18:	1cbb      	adds	r3, r7, #2
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	1c08      	adds	r0, r1, #0
 8007f1e:	4098      	lsls	r0, r3
 8007f20:	1c03      	adds	r3, r0, #0
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	4313      	orrs	r3, r2
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1864
}
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	b004      	add	sp, #16
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	46c0      	nop			; (mov r8, r8)

08007f34 <TIM_SelectCOM>:
TIM_SelectCOM():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1874
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	1c0a      	adds	r2, r1, #0
 8007f3e:	1cfb      	adds	r3, r7, #3
 8007f40:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1878
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007f42:	1cfb      	adds	r3, r7, #3
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <TIM_SelectCOM+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1881
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	889b      	ldrh	r3, [r3, #4]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2204      	movs	r2, #4
 8007f52:	4313      	orrs	r3, r2
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	809a      	strh	r2, [r3, #4]
 8007f5a:	e007      	b.n	8007f6c <TIM_SelectCOM+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1886
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	889b      	ldrh	r3, [r3, #4]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2204      	movs	r2, #4
 8007f64:	4393      	bics	r3, r2
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1888
  }
}
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	b002      	add	sp, #8
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	46c0      	nop			; (mov r8, r8)

08007f74 <TIM_ICInit>:
TIM_ICInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1950
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1959
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d110      	bne.n	8007fa8 <TIM_ICInit+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1963
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	8859      	ldrh	r1, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1964
               TIM_ICInitStruct->TIM_ICSelection,
 8007f8a:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1963

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007f8c:	889a      	ldrh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1965
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8007f8e:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1963

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007f90:	891b      	ldrh	r3, [r3, #8]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fcbe 	bl	8008914 <TI1_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1967
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	88db      	ldrh	r3, [r3, #6]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	1c10      	adds	r0, r2, #0
 8007fa0:	1c19      	adds	r1, r3, #0
 8007fa2:	f000 f8f1 	bl	8008188 <TIM_SetIC1Prescaler>
 8007fa6:	e039      	b.n	800801c <TIM_ICInit+0xa8>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1969
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d110      	bne.n	8007fd2 <TIM_ICInit+0x5e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1973
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	8859      	ldrh	r1, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1974
               TIM_ICInitStruct->TIM_ICSelection,
 8007fb4:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1973
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007fb6:	889a      	ldrh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1975
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8007fb8:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1973
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007fba:	891b      	ldrh	r3, [r3, #8]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fd0d 	bl	80089dc <TI2_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1977
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	88db      	ldrh	r3, [r3, #6]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	1c10      	adds	r0, r2, #0
 8007fca:	1c19      	adds	r1, r3, #0
 8007fcc:	f000 f8f8 	bl	80081c0 <TIM_SetIC2Prescaler>
 8007fd0:	e024      	b.n	800801c <TIM_ICInit+0xa8>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1979
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d110      	bne.n	8007ffc <TIM_ICInit+0x88>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1983
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	8859      	ldrh	r1, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1984
               TIM_ICInitStruct->TIM_ICSelection,
 8007fde:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1983
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8007fe0:	889a      	ldrh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1985
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8007fe2:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1983
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8007fe4:	891b      	ldrh	r3, [r3, #8]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fd70 	bl	8008acc <TI3_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1987
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	88db      	ldrh	r3, [r3, #6]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	1c10      	adds	r0, r2, #0
 8007ff4:	1c19      	adds	r1, r3, #0
 8007ff6:	f000 f903 	bl	8008200 <TIM_SetIC3Prescaler>
 8007ffa:	e00f      	b.n	800801c <TIM_ICInit+0xa8>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1993
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	8859      	ldrh	r1, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1994
               TIM_ICInitStruct->TIM_ICSelection,
 8008000:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1993
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008002:	889a      	ldrh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1995
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8008004:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1993
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008006:	891b      	ldrh	r3, [r3, #8]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fdd3 	bl	8008bb4 <TI4_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1997
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	88db      	ldrh	r3, [r3, #6]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	1c10      	adds	r0, r2, #0
 8008016:	1c19      	adds	r1, r3, #0
 8008018:	f000 f90e 	bl	8008238 <TIM_SetIC4Prescaler>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:1999
  }
}
 800801c:	46bd      	mov	sp, r7
 800801e:	b002      	add	sp, #8
 8008020:	bd80      	pop	{r7, pc}
 8008022:	46c0      	nop			; (mov r8, r8)

08008024 <TIM_ICStructInit>:
TIM_ICStructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2008
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2010
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2011
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2012
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2013
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	80da      	strh	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2014
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2015
}
 800804a:	46bd      	mov	sp, r7
 800804c:	b002      	add	sp, #8
 800804e:	bd80      	pop	{r7, pc}

08008050 <TIM_PWMIConfig>:
TIM_PWMIConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2027
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2028
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800805a:	1c3b      	adds	r3, r7, #0
 800805c:	330e      	adds	r3, #14
 800805e:	2200      	movs	r2, #0
 8008060:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2029
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8008062:	1c3b      	adds	r3, r7, #0
 8008064:	330c      	adds	r3, #12
 8008066:	2201      	movs	r2, #1
 8008068:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2033
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	885b      	ldrh	r3, [r3, #2]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d104      	bne.n	800807c <TIM_PWMIConfig+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2035
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8008072:	1c3b      	adds	r3, r7, #0
 8008074:	330e      	adds	r3, #14
 8008076:	2202      	movs	r2, #2
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	e003      	b.n	8008084 <TIM_PWMIConfig+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2039
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800807c:	1c3b      	adds	r3, r7, #0
 800807e:	330e      	adds	r3, #14
 8008080:	2200      	movs	r2, #0
 8008082:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2042
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	889b      	ldrh	r3, [r3, #4]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d104      	bne.n	8008096 <TIM_PWMIConfig+0x46>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2044
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800808c:	1c3b      	adds	r3, r7, #0
 800808e:	330c      	adds	r3, #12
 8008090:	2202      	movs	r2, #2
 8008092:	801a      	strh	r2, [r3, #0]
 8008094:	e003      	b.n	800809e <TIM_PWMIConfig+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2048
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8008096:	1c3b      	adds	r3, r7, #0
 8008098:	330c      	adds	r3, #12
 800809a:	2201      	movs	r2, #1
 800809c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2050
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d122      	bne.n	80080ec <TIM_PWMIConfig+0x9c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2053
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	8859      	ldrh	r1, [r3, #2]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	889a      	ldrh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2054
               TIM_ICInitStruct->TIM_ICFilter);
 80080ae:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2053
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80080b0:	891b      	ldrh	r3, [r3, #8]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fc2e 	bl	8008914 <TI1_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2056
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	88db      	ldrh	r3, [r3, #6]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	1c10      	adds	r0, r2, #0
 80080c0:	1c19      	adds	r1, r3, #0
 80080c2:	f000 f861 	bl	8008188 <TIM_SetIC1Prescaler>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2058
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	891b      	ldrh	r3, [r3, #8]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	1c3a      	adds	r2, r7, #0
 80080ce:	320e      	adds	r2, #14
 80080d0:	8811      	ldrh	r1, [r2, #0]
 80080d2:	1c3a      	adds	r2, r7, #0
 80080d4:	320c      	adds	r2, #12
 80080d6:	8812      	ldrh	r2, [r2, #0]
 80080d8:	f000 fc80 	bl	80089dc <TI2_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2060
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	88db      	ldrh	r3, [r3, #6]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	1c10      	adds	r0, r2, #0
 80080e4:	1c19      	adds	r1, r3, #0
 80080e6:	f000 f86b 	bl	80081c0 <TIM_SetIC2Prescaler>
 80080ea:	e021      	b.n	8008130 <TIM_PWMIConfig+0xe0>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2065
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	8859      	ldrh	r1, [r3, #2]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	889a      	ldrh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2066
               TIM_ICInitStruct->TIM_ICFilter);
 80080f4:	683b      	ldr	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2065
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80080f6:	891b      	ldrh	r3, [r3, #8]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fc6f 	bl	80089dc <TI2_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2068
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	88db      	ldrh	r3, [r3, #6]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	1c10      	adds	r0, r2, #0
 8008106:	1c19      	adds	r1, r3, #0
 8008108:	f000 f85a 	bl	80081c0 <TIM_SetIC2Prescaler>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2070
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	891b      	ldrh	r3, [r3, #8]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	1c3a      	adds	r2, r7, #0
 8008114:	320e      	adds	r2, #14
 8008116:	8811      	ldrh	r1, [r2, #0]
 8008118:	1c3a      	adds	r2, r7, #0
 800811a:	320c      	adds	r2, #12
 800811c:	8812      	ldrh	r2, [r2, #0]
 800811e:	f000 fbf9 	bl	8008914 <TI1_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2072
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	1c10      	adds	r0, r2, #0
 800812a:	1c19      	adds	r1, r3, #0
 800812c:	f000 f82c 	bl	8008188 <TIM_SetIC1Prescaler>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2074
  }
}
 8008130:	46bd      	mov	sp, r7
 8008132:	b004      	add	sp, #16
 8008134:	bd80      	pop	{r7, pc}
 8008136:	46c0      	nop			; (mov r8, r8)

08008138 <TIM_GetCapture1>:
TIM_GetCapture1():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2082
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2087
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2088
}
 8008144:	1c18      	adds	r0, r3, #0
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bd80      	pop	{r7, pc}

0800814c <TIM_GetCapture2>:
TIM_GetCapture2():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2096
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2101
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2102
}
 8008158:	1c18      	adds	r0, r3, #0
 800815a:	46bd      	mov	sp, r7
 800815c:	b002      	add	sp, #8
 800815e:	bd80      	pop	{r7, pc}

08008160 <TIM_GetCapture3>:
TIM_GetCapture3():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2110
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2115
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2116
}
 800816c:	1c18      	adds	r0, r3, #0
 800816e:	46bd      	mov	sp, r7
 8008170:	b002      	add	sp, #8
 8008172:	bd80      	pop	{r7, pc}

08008174 <TIM_GetCapture4>:
TIM_GetCapture4():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2124
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2129
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2130
}
 8008180:	1c18      	adds	r0, r3, #0
 8008182:	46bd      	mov	sp, r7
 8008184:	b002      	add	sp, #8
 8008186:	bd80      	pop	{r7, pc}

08008188 <TIM_SetIC1Prescaler>:
TIM_SetIC1Prescaler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2144
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	1c0a      	adds	r2, r1, #0
 8008192:	1cbb      	adds	r3, r7, #2
 8008194:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2150
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	8b1b      	ldrh	r3, [r3, #24]
 800819a:	b29b      	uxth	r3, r3
 800819c:	220c      	movs	r2, #12
 800819e:	4393      	bics	r3, r2
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2152
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	8b1b      	ldrh	r3, [r3, #24]
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	1cbb      	adds	r3, r7, #2
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2153
}
 80081b8:	46bd      	mov	sp, r7
 80081ba:	b002      	add	sp, #8
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	46c0      	nop			; (mov r8, r8)

080081c0 <TIM_SetIC2Prescaler>:
TIM_SetIC2Prescaler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2167
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	1c0a      	adds	r2, r1, #0
 80081ca:	1cbb      	adds	r3, r7, #2
 80081cc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2173
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	8b1b      	ldrh	r3, [r3, #24]
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	4b09      	ldr	r3, [pc, #36]	; (80081fc <TIM_SetIC2Prescaler+0x3c>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	b29a      	uxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2175
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	8b1b      	ldrh	r3, [r3, #24]
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	1cbb      	adds	r3, r7, #2
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4313      	orrs	r3, r2
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2176
}
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b002      	add	sp, #8
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	fffff3ff 	.word	0xfffff3ff

08008200 <TIM_SetIC3Prescaler>:
TIM_SetIC3Prescaler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2190
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	1c0a      	adds	r2, r1, #0
 800820a:	1cbb      	adds	r3, r7, #2
 800820c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2196
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	8b9b      	ldrh	r3, [r3, #28]
 8008212:	b29b      	uxth	r3, r3
 8008214:	220c      	movs	r2, #12
 8008216:	4393      	bics	r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2198
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	8b9b      	ldrh	r3, [r3, #28]
 8008222:	b29a      	uxth	r2, r3
 8008224:	1cbb      	adds	r3, r7, #2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	4313      	orrs	r3, r2
 800822a:	b29a      	uxth	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2199
}
 8008230:	46bd      	mov	sp, r7
 8008232:	b002      	add	sp, #8
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			; (mov r8, r8)

08008238 <TIM_SetIC4Prescaler>:
TIM_SetIC4Prescaler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2213
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	1c0a      	adds	r2, r1, #0
 8008242:	1cbb      	adds	r3, r7, #2
 8008244:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2219
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	8b9b      	ldrh	r3, [r3, #28]
 800824a:	b29a      	uxth	r2, r3
 800824c:	4b09      	ldr	r3, [pc, #36]	; (8008274 <TIM_SetIC4Prescaler+0x3c>)
 800824e:	4013      	ands	r3, r2
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2221
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	8b9b      	ldrh	r3, [r3, #28]
 800825a:	b29a      	uxth	r2, r3
 800825c:	1cbb      	adds	r3, r7, #2
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	b29b      	uxth	r3, r3
 8008264:	4313      	orrs	r3, r2
 8008266:	b29a      	uxth	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2222
}
 800826c:	46bd      	mov	sp, r7
 800826e:	b002      	add	sp, #8
 8008270:	bd80      	pop	{r7, pc}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	fffff3ff 	.word	0xfffff3ff

08008278 <TIM_ITConfig>:
TIM_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2265
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	1cbb      	adds	r3, r7, #2
 8008282:	8019      	strh	r1, [r3, #0]
 8008284:	1c7b      	adds	r3, r7, #1
 8008286:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2271
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008288:	1c7b      	adds	r3, r7, #1
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d009      	beq.n	80082a4 <TIM_ITConfig+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2274
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	899b      	ldrh	r3, [r3, #12]
 8008294:	b29a      	uxth	r2, r3
 8008296:	1cbb      	adds	r3, r7, #2
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	4313      	orrs	r3, r2
 800829c:	b29a      	uxth	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	819a      	strh	r2, [r3, #12]
 80082a2:	e00a      	b.n	80082ba <TIM_ITConfig+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2279
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	899b      	ldrh	r3, [r3, #12]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	1cba      	adds	r2, r7, #2
 80082ac:	8812      	ldrh	r2, [r2, #0]
 80082ae:	43d2      	mvns	r2, r2
 80082b0:	b292      	uxth	r2, r2
 80082b2:	4013      	ands	r3, r2
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2281
  }
}
 80082ba:	46bd      	mov	sp, r7
 80082bc:	b002      	add	sp, #8
 80082be:	bd80      	pop	{r7, pc}

080082c0 <TIM_GenerateEvent>:
TIM_GenerateEvent():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2306
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1.
  *             
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	1c0a      	adds	r2, r1, #0
 80082ca:	1cbb      	adds	r3, r7, #2
 80082cc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2311
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource)); 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	1cba      	adds	r2, r7, #2
 80082d2:	8812      	ldrh	r2, [r2, #0]
 80082d4:	829a      	strh	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2312
}
 80082d6:	46bd      	mov	sp, r7
 80082d8:	b002      	add	sp, #8
 80082da:	bd80      	pop	{r7, pc}

080082dc <TIM_GetFlagStatus>:
TIM_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2341
  * @note   TIM_FLAG_COM is used only with TIM1 TIM15, TIM16 and TIM17.
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	1c0a      	adds	r2, r1, #0
 80082e6:	1cbb      	adds	r3, r7, #2
 80082e8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2342
  ITStatus bitstatus = RESET; 
 80082ea:	1c3b      	adds	r3, r7, #0
 80082ec:	330f      	adds	r3, #15
 80082ee:	2200      	movs	r2, #0
 80082f0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2348
   
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	8a1b      	ldrh	r3, [r3, #16]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	1cba      	adds	r2, r7, #2
 80082fa:	8812      	ldrh	r2, [r2, #0]
 80082fc:	4013      	ands	r3, r2
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d004      	beq.n	800830e <TIM_GetFlagStatus+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2350
  {
    bitstatus = SET;
 8008304:	1c3b      	adds	r3, r7, #0
 8008306:	330f      	adds	r3, #15
 8008308:	2201      	movs	r2, #1
 800830a:	701a      	strb	r2, [r3, #0]
 800830c:	e003      	b.n	8008316 <TIM_GetFlagStatus+0x3a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2354
  }
  else
  {
    bitstatus = RESET;
 800830e:	1c3b      	adds	r3, r7, #0
 8008310:	330f      	adds	r3, #15
 8008312:	2200      	movs	r2, #0
 8008314:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2356
  }
  return bitstatus;
 8008316:	1c3b      	adds	r3, r7, #0
 8008318:	330f      	adds	r3, #15
 800831a:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2357
}
 800831c:	1c18      	adds	r0, r3, #0
 800831e:	46bd      	mov	sp, r7
 8008320:	b004      	add	sp, #16
 8008322:	bd80      	pop	{r7, pc}

08008324 <TIM_ClearFlag>:
TIM_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2387
  * @note   TIM_FLAG_COM is used only with TIM1, TIM15, TIM16 and TIM17.
  *
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	1c0a      	adds	r2, r1, #0
 800832e:	1cbb      	adds	r3, r7, #2
 8008330:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2393
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8008332:	1cbb      	adds	r3, r7, #2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	43db      	mvns	r3, r3
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2394
}
 800833e:	46bd      	mov	sp, r7
 8008340:	b002      	add	sp, #8
 8008342:	bd80      	pop	{r7, pc}

08008344 <TIM_GetITStatus>:
TIM_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2419
  * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
  *
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	1c0a      	adds	r2, r1, #0
 800834e:	1cbb      	adds	r3, r7, #2
 8008350:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2420
  ITStatus bitstatus = RESET;  
 8008352:	1c3b      	adds	r3, r7, #0
 8008354:	330f      	adds	r3, #15
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2421
  uint16_t itstatus = 0x0, itenable = 0x0;
 800835a:	1c3b      	adds	r3, r7, #0
 800835c:	330c      	adds	r3, #12
 800835e:	2200      	movs	r2, #0
 8008360:	801a      	strh	r2, [r3, #0]
 8008362:	1c3b      	adds	r3, r7, #0
 8008364:	330a      	adds	r3, #10
 8008366:	2200      	movs	r2, #0
 8008368:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2427
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	8a1b      	ldrh	r3, [r3, #16]
 800836e:	b29a      	uxth	r2, r3
 8008370:	1c3b      	adds	r3, r7, #0
 8008372:	330c      	adds	r3, #12
 8008374:	1cb9      	adds	r1, r7, #2
 8008376:	8809      	ldrh	r1, [r1, #0]
 8008378:	400a      	ands	r2, r1
 800837a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2429
  
  itenable = TIMx->DIER & TIM_IT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	899b      	ldrh	r3, [r3, #12]
 8008380:	b29a      	uxth	r2, r3
 8008382:	1c3b      	adds	r3, r7, #0
 8008384:	330a      	adds	r3, #10
 8008386:	1cb9      	adds	r1, r7, #2
 8008388:	8809      	ldrh	r1, [r1, #0]
 800838a:	400a      	ands	r2, r1
 800838c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2430
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800838e:	1c3b      	adds	r3, r7, #0
 8008390:	330c      	adds	r3, #12
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d009      	beq.n	80083ac <TIM_GetITStatus+0x68>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2430 (discriminator 1)
 8008398:	1c3b      	adds	r3, r7, #0
 800839a:	330a      	adds	r3, #10
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <TIM_GetITStatus+0x68>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2432
  {
    bitstatus = SET;
 80083a2:	1c3b      	adds	r3, r7, #0
 80083a4:	330f      	adds	r3, #15
 80083a6:	2201      	movs	r2, #1
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e003      	b.n	80083b4 <TIM_GetITStatus+0x70>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2436
  }
  else
  {
    bitstatus = RESET;
 80083ac:	1c3b      	adds	r3, r7, #0
 80083ae:	330f      	adds	r3, #15
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2438
  }
  return bitstatus;
 80083b4:	1c3b      	adds	r3, r7, #0
 80083b6:	330f      	adds	r3, #15
 80083b8:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2439
}
 80083ba:	1c18      	adds	r0, r3, #0
 80083bc:	46bd      	mov	sp, r7
 80083be:	b004      	add	sp, #16
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	46c0      	nop			; (mov r8, r8)

080083c4 <TIM_ClearITPendingBit>:
TIM_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2464
  * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
  *
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	1c0a      	adds	r2, r1, #0
 80083ce:	1cbb      	adds	r3, r7, #2
 80083d0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2470
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80083d2:	1cbb      	adds	r3, r7, #2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	43db      	mvns	r3, r3
 80083d8:	b29a      	uxth	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2471
}
 80083de:	46bd      	mov	sp, r7
 80083e0:	b002      	add	sp, #8
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <TIM_DMAConfig>:
TIM_DMAConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2501
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	1cbb      	adds	r3, r7, #2
 80083ee:	8019      	strh	r1, [r3, #0]
 80083f0:	1c3b      	adds	r3, r7, #0
 80083f2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2507
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80083f4:	1cba      	adds	r2, r7, #2
 80083f6:	1c3b      	adds	r3, r7, #0
 80083f8:	8812      	ldrh	r2, [r2, #0]
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	b299      	uxth	r1, r3
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	2348      	movs	r3, #72	; 0x48
 8008404:	52d1      	strh	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2508
}
 8008406:	46bd      	mov	sp, r7
 8008408:	b002      	add	sp, #8
 800840a:	bd80      	pop	{r7, pc}

0800840c <TIM_DMACmd>:
TIM_DMACmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2527
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	1cbb      	adds	r3, r7, #2
 8008416:	8019      	strh	r1, [r3, #0]
 8008418:	1c7b      	adds	r3, r7, #1
 800841a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2533
  /* Check the parameters */
  assert_param(IS_TIM_LIST10_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800841c:	1c7b      	adds	r3, r7, #1
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d009      	beq.n	8008438 <TIM_DMACmd+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2536
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	899b      	ldrh	r3, [r3, #12]
 8008428:	b29a      	uxth	r2, r3
 800842a:	1cbb      	adds	r3, r7, #2
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	4313      	orrs	r3, r2
 8008430:	b29a      	uxth	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	819a      	strh	r2, [r3, #12]
 8008436:	e00a      	b.n	800844e <TIM_DMACmd+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2541
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	899b      	ldrh	r3, [r3, #12]
 800843c:	b29b      	uxth	r3, r3
 800843e:	1cba      	adds	r2, r7, #2
 8008440:	8812      	ldrh	r2, [r2, #0]
 8008442:	43d2      	mvns	r2, r2
 8008444:	b292      	uxth	r2, r2
 8008446:	4013      	ands	r3, r2
 8008448:	b29a      	uxth	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2543
  }
}
 800844e:	46bd      	mov	sp, r7
 8008450:	b002      	add	sp, #8
 8008452:	bd80      	pop	{r7, pc}

08008454 <TIM_SelectCCDMA>:
TIM_SelectCCDMA():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2553
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	1c0a      	adds	r2, r1, #0
 800845e:	1cfb      	adds	r3, r7, #3
 8008460:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2558
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008462:	1cfb      	adds	r3, r7, #3
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d008      	beq.n	800847c <TIM_SelectCCDMA+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2561
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	b29b      	uxth	r3, r3
 8008470:	2208      	movs	r2, #8
 8008472:	4313      	orrs	r3, r2
 8008474:	b29a      	uxth	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	809a      	strh	r2, [r3, #4]
 800847a:	e007      	b.n	800848c <TIM_SelectCCDMA+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2566
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	889b      	ldrh	r3, [r3, #4]
 8008480:	b29b      	uxth	r3, r3
 8008482:	2208      	movs	r2, #8
 8008484:	4393      	bics	r3, r2
 8008486:	b29a      	uxth	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2568
  }
}
 800848c:	46bd      	mov	sp, r7
 800848e:	b002      	add	sp, #8
 8008490:	bd80      	pop	{r7, pc}
 8008492:	46c0      	nop			; (mov r8, r8)

08008494 <TIM_InternalClockConfig>:
TIM_InternalClockConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2592
  * @brief  Configures the TIMx internal Clock
  * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2596
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	891b      	ldrh	r3, [r3, #8]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2207      	movs	r2, #7
 80084a4:	4393      	bics	r3, r2
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2597
}
 80084ac:	46bd      	mov	sp, r7
 80084ae:	b002      	add	sp, #8
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	46c0      	nop			; (mov r8, r8)

080084b4 <TIM_ITRxExternalClockConfig>:
TIM_ITRxExternalClockConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2611
  *            @arg  TIM_TS_ITR2: Internal Trigger 2
  *            @arg  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	1c0a      	adds	r2, r1, #0
 80084be:	1cbb      	adds	r3, r7, #2
 80084c0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2616
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	1cbb      	adds	r3, r7, #2
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	1c10      	adds	r0, r2, #0
 80084ca:	1c19      	adds	r1, r3, #0
 80084cc:	f000 f8bc 	bl	8008648 <TIM_SelectInputTrigger>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2618
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	891b      	ldrh	r3, [r3, #8]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2207      	movs	r2, #7
 80084d8:	4313      	orrs	r3, r2
 80084da:	b29a      	uxth	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2619
}
 80084e0:	46bd      	mov	sp, r7
 80084e2:	b002      	add	sp, #8
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	46c0      	nop			; (mov r8, r8)

080084e8 <TIM_TIxExternalClockConfig>:
TIM_TIxExternalClockConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2639
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	1c08      	adds	r0, r1, #0
 80084f2:	1c11      	adds	r1, r2, #0
 80084f4:	1c1a      	adds	r2, r3, #0
 80084f6:	1c3b      	adds	r3, r7, #0
 80084f8:	330a      	adds	r3, #10
 80084fa:	8018      	strh	r0, [r3, #0]
 80084fc:	1c3b      	adds	r3, r7, #0
 80084fe:	3308      	adds	r3, #8
 8008500:	8019      	strh	r1, [r3, #0]
 8008502:	1dbb      	adds	r3, r7, #6
 8008504:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2646
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8008506:	1c3b      	adds	r3, r7, #0
 8008508:	330a      	adds	r3, #10
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	2b60      	cmp	r3, #96	; 0x60
 800850e:	d10b      	bne.n	8008528 <TIM_TIxExternalClockConfig+0x40>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2648
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8008510:	68f9      	ldr	r1, [r7, #12]
 8008512:	1c3b      	adds	r3, r7, #0
 8008514:	3308      	adds	r3, #8
 8008516:	881a      	ldrh	r2, [r3, #0]
 8008518:	1dbb      	adds	r3, r7, #6
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	1c08      	adds	r0, r1, #0
 800851e:	1c11      	adds	r1, r2, #0
 8008520:	2201      	movs	r2, #1
 8008522:	f000 fa5b 	bl	80089dc <TI2_Config>
 8008526:	e00a      	b.n	800853e <TIM_TIxExternalClockConfig+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2652
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8008528:	68f9      	ldr	r1, [r7, #12]
 800852a:	1c3b      	adds	r3, r7, #0
 800852c:	3308      	adds	r3, #8
 800852e:	881a      	ldrh	r2, [r3, #0]
 8008530:	1dbb      	adds	r3, r7, #6
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	1c08      	adds	r0, r1, #0
 8008536:	1c11      	adds	r1, r2, #0
 8008538:	2201      	movs	r2, #1
 800853a:	f000 f9eb 	bl	8008914 <TI1_Config>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2655
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	1c3b      	adds	r3, r7, #0
 8008542:	330a      	adds	r3, #10
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	1c10      	adds	r0, r2, #0
 8008548:	1c19      	adds	r1, r3, #0
 800854a:	f000 f87d 	bl	8008648 <TIM_SelectInputTrigger>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2657
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	891b      	ldrh	r3, [r3, #8]
 8008552:	b29b      	uxth	r3, r3
 8008554:	2207      	movs	r2, #7
 8008556:	4313      	orrs	r3, r2
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2658
}
 800855e:	46bd      	mov	sp, r7
 8008560:	b004      	add	sp, #16
 8008562:	bd80      	pop	{r7, pc}

08008564 <TIM_ETRClockMode1Config>:
TIM_ETRClockMode1Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2679
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	1c08      	adds	r0, r1, #0
 800856e:	1c11      	adds	r1, r2, #0
 8008570:	1c1a      	adds	r2, r3, #0
 8008572:	1c3b      	adds	r3, r7, #0
 8008574:	330a      	adds	r3, #10
 8008576:	8018      	strh	r0, [r3, #0]
 8008578:	1c3b      	adds	r3, r7, #0
 800857a:	3308      	adds	r3, #8
 800857c:	8019      	strh	r1, [r3, #0]
 800857e:	1dbb      	adds	r3, r7, #6
 8008580:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2680
  uint16_t tmpsmcr = 0;
 8008582:	1c3b      	adds	r3, r7, #0
 8008584:	3316      	adds	r3, #22
 8008586:	2200      	movs	r2, #0
 8008588:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2689
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	1c3b      	adds	r3, r7, #0
 800858e:	330a      	adds	r3, #10
 8008590:	8819      	ldrh	r1, [r3, #0]
 8008592:	1c3b      	adds	r3, r7, #0
 8008594:	3308      	adds	r3, #8
 8008596:	881a      	ldrh	r2, [r3, #0]
 8008598:	1dbb      	adds	r3, r7, #6
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	f000 f8d2 	bl	8008744 <TIM_ETRConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2692
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085a0:	1c3b      	adds	r3, r7, #0
 80085a2:	3316      	adds	r3, #22
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	8912      	ldrh	r2, [r2, #8]
 80085a8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2694
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80085aa:	1c3b      	adds	r3, r7, #0
 80085ac:	3316      	adds	r3, #22
 80085ae:	1c3a      	adds	r2, r7, #0
 80085b0:	3216      	adds	r2, #22
 80085b2:	8812      	ldrh	r2, [r2, #0]
 80085b4:	2107      	movs	r1, #7
 80085b6:	438a      	bics	r2, r1
 80085b8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2696
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80085ba:	1c3b      	adds	r3, r7, #0
 80085bc:	3316      	adds	r3, #22
 80085be:	1c3a      	adds	r2, r7, #0
 80085c0:	3216      	adds	r2, #22
 80085c2:	8812      	ldrh	r2, [r2, #0]
 80085c4:	2107      	movs	r1, #7
 80085c6:	430a      	orrs	r2, r1
 80085c8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2698
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80085ca:	1c3b      	adds	r3, r7, #0
 80085cc:	3316      	adds	r3, #22
 80085ce:	1c3a      	adds	r2, r7, #0
 80085d0:	3216      	adds	r2, #22
 80085d2:	8812      	ldrh	r2, [r2, #0]
 80085d4:	2170      	movs	r1, #112	; 0x70
 80085d6:	438a      	bics	r2, r1
 80085d8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2699
  tmpsmcr |= TIM_TS_ETRF;
 80085da:	1c3b      	adds	r3, r7, #0
 80085dc:	3316      	adds	r3, #22
 80085de:	1c3a      	adds	r2, r7, #0
 80085e0:	3216      	adds	r2, #22
 80085e2:	8812      	ldrh	r2, [r2, #0]
 80085e4:	2170      	movs	r1, #112	; 0x70
 80085e6:	430a      	orrs	r2, r1
 80085e8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2701
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	1c3a      	adds	r2, r7, #0
 80085ee:	3216      	adds	r2, #22
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2702
}
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b006      	add	sp, #24
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	46c0      	nop			; (mov r8, r8)

080085fc <TIM_ETRClockMode2Config>:
TIM_ETRClockMode2Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2723
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	1c08      	adds	r0, r1, #0
 8008606:	1c11      	adds	r1, r2, #0
 8008608:	1c1a      	adds	r2, r3, #0
 800860a:	1c3b      	adds	r3, r7, #0
 800860c:	330a      	adds	r3, #10
 800860e:	8018      	strh	r0, [r3, #0]
 8008610:	1c3b      	adds	r3, r7, #0
 8008612:	3308      	adds	r3, #8
 8008614:	8019      	strh	r1, [r3, #0]
 8008616:	1dbb      	adds	r3, r7, #6
 8008618:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2731
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	1c3b      	adds	r3, r7, #0
 800861e:	330a      	adds	r3, #10
 8008620:	8819      	ldrh	r1, [r3, #0]
 8008622:	1c3b      	adds	r3, r7, #0
 8008624:	3308      	adds	r3, #8
 8008626:	881a      	ldrh	r2, [r3, #0]
 8008628:	1dbb      	adds	r3, r7, #6
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	f000 f88a 	bl	8008744 <TIM_ETRConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2733
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	891b      	ldrh	r3, [r3, #8]
 8008634:	b29b      	uxth	r3, r3
 8008636:	2280      	movs	r2, #128	; 0x80
 8008638:	01d2      	lsls	r2, r2, #7
 800863a:	4313      	orrs	r3, r2
 800863c:	b29a      	uxth	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2734
}
 8008642:	46bd      	mov	sp, r7
 8008644:	b004      	add	sp, #16
 8008646:	bd80      	pop	{r7, pc}

08008648 <TIM_SelectInputTrigger>:
TIM_SelectInputTrigger():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2787
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	1c0a      	adds	r2, r1, #0
 8008652:	1cbb      	adds	r3, r7, #2
 8008654:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2788
  uint16_t tmpsmcr = 0;
 8008656:	1c3b      	adds	r3, r7, #0
 8008658:	330e      	adds	r3, #14
 800865a:	2200      	movs	r2, #0
 800865c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2795
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800865e:	1c3b      	adds	r3, r7, #0
 8008660:	330e      	adds	r3, #14
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	8912      	ldrh	r2, [r2, #8]
 8008666:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2797
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8008668:	1c3b      	adds	r3, r7, #0
 800866a:	330e      	adds	r3, #14
 800866c:	1c3a      	adds	r2, r7, #0
 800866e:	320e      	adds	r2, #14
 8008670:	8812      	ldrh	r2, [r2, #0]
 8008672:	2170      	movs	r1, #112	; 0x70
 8008674:	438a      	bics	r2, r1
 8008676:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2799
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8008678:	1c3b      	adds	r3, r7, #0
 800867a:	330e      	adds	r3, #14
 800867c:	1c39      	adds	r1, r7, #0
 800867e:	310e      	adds	r1, #14
 8008680:	1cba      	adds	r2, r7, #2
 8008682:	8809      	ldrh	r1, [r1, #0]
 8008684:	8812      	ldrh	r2, [r2, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2801
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	1c3a      	adds	r2, r7, #0
 800868e:	320e      	adds	r2, #14
 8008690:	8812      	ldrh	r2, [r2, #0]
 8008692:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2802
}
 8008694:	46bd      	mov	sp, r7
 8008696:	b004      	add	sp, #16
 8008698:	bd80      	pop	{r7, pc}
 800869a:	46c0      	nop			; (mov r8, r8)

0800869c <TIM_SelectOutputTrigger>:
TIM_SelectOutputTrigger():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2826
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	1c0a      	adds	r2, r1, #0
 80086a6:	1cbb      	adds	r3, r7, #2
 80086a8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2832
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	889b      	ldrh	r3, [r3, #4]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2270      	movs	r2, #112	; 0x70
 80086b2:	4393      	bics	r3, r2
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2834
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	889b      	ldrh	r3, [r3, #4]
 80086be:	b29a      	uxth	r2, r3
 80086c0:	1cbb      	adds	r3, r7, #2
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2835
}
 80086cc:	46bd      	mov	sp, r7
 80086ce:	b002      	add	sp, #8
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	46c0      	nop			; (mov r8, r8)

080086d4 <TIM_SelectSlaveMode>:
TIM_SelectSlaveMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2850
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	1c0a      	adds	r2, r1, #0
 80086de:	1cbb      	adds	r3, r7, #2
 80086e0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2856
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  
  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	891b      	ldrh	r3, [r3, #8]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2207      	movs	r2, #7
 80086ea:	4393      	bics	r3, r2
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2858
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	891b      	ldrh	r3, [r3, #8]
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	1cbb      	adds	r3, r7, #2
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	b29a      	uxth	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2859
}
 8008704:	46bd      	mov	sp, r7
 8008706:	b002      	add	sp, #8
 8008708:	bd80      	pop	{r7, pc}
 800870a:	46c0      	nop			; (mov r8, r8)

0800870c <TIM_SelectMasterSlaveMode>:
TIM_SelectMasterSlaveMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2872
  *                                             and its slaves (through TRGO).
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	1c0a      	adds	r2, r1, #0
 8008716:	1cbb      	adds	r3, r7, #2
 8008718:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2878
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	891b      	ldrh	r3, [r3, #8]
 800871e:	b29b      	uxth	r3, r3
 8008720:	2280      	movs	r2, #128	; 0x80
 8008722:	4393      	bics	r3, r2
 8008724:	b29a      	uxth	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2881
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	891b      	ldrh	r3, [r3, #8]
 800872e:	b29a      	uxth	r2, r3
 8008730:	1cbb      	adds	r3, r7, #2
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	4313      	orrs	r3, r2
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2882
}
 800873c:	46bd      	mov	sp, r7
 800873e:	b002      	add	sp, #8
 8008740:	bd80      	pop	{r7, pc}
 8008742:	46c0      	nop			; (mov r8, r8)

08008744 <TIM_ETRConfig>:
TIM_ETRConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2903
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	1c08      	adds	r0, r1, #0
 800874e:	1c11      	adds	r1, r2, #0
 8008750:	1c1a      	adds	r2, r3, #0
 8008752:	1c3b      	adds	r3, r7, #0
 8008754:	330a      	adds	r3, #10
 8008756:	8018      	strh	r0, [r3, #0]
 8008758:	1c3b      	adds	r3, r7, #0
 800875a:	3308      	adds	r3, #8
 800875c:	8019      	strh	r1, [r3, #0]
 800875e:	1dbb      	adds	r3, r7, #6
 8008760:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2904
  uint16_t tmpsmcr = 0;
 8008762:	1c3b      	adds	r3, r7, #0
 8008764:	3316      	adds	r3, #22
 8008766:	2200      	movs	r2, #0
 8008768:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2912
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 800876a:	1c3b      	adds	r3, r7, #0
 800876c:	3316      	adds	r3, #22
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	8912      	ldrh	r2, [r2, #8]
 8008772:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2914
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8008774:	1c3b      	adds	r3, r7, #0
 8008776:	3316      	adds	r3, #22
 8008778:	1c3a      	adds	r2, r7, #0
 800877a:	3216      	adds	r2, #22
 800877c:	8811      	ldrh	r1, [r2, #0]
 800877e:	22ff      	movs	r2, #255	; 0xff
 8008780:	400a      	ands	r2, r1
 8008782:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2916
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8008784:	1dbb      	adds	r3, r7, #6
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	021b      	lsls	r3, r3, #8
 800878a:	b29a      	uxth	r2, r3
 800878c:	1c3b      	adds	r3, r7, #0
 800878e:	3308      	adds	r3, #8
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	4313      	orrs	r3, r2
 8008794:	b29a      	uxth	r2, r3
 8008796:	1c3b      	adds	r3, r7, #0
 8008798:	330a      	adds	r3, #10
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	4313      	orrs	r3, r2
 800879e:	b299      	uxth	r1, r3
 80087a0:	1c3b      	adds	r3, r7, #0
 80087a2:	3316      	adds	r3, #22
 80087a4:	1c3a      	adds	r2, r7, #0
 80087a6:	3216      	adds	r2, #22
 80087a8:	8812      	ldrh	r2, [r2, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2918
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	1c3a      	adds	r2, r7, #0
 80087b2:	3216      	adds	r2, #22
 80087b4:	8812      	ldrh	r2, [r2, #0]
 80087b6:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2919
}
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b006      	add	sp, #24
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	46c0      	nop			; (mov r8, r8)

080087c0 <TIM_EncoderInterfaceConfig>:
TIM_EncoderInterfaceConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2958
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	1c08      	adds	r0, r1, #0
 80087ca:	1c11      	adds	r1, r2, #0
 80087cc:	1c1a      	adds	r2, r3, #0
 80087ce:	1c3b      	adds	r3, r7, #0
 80087d0:	330a      	adds	r3, #10
 80087d2:	8018      	strh	r0, [r3, #0]
 80087d4:	1c3b      	adds	r3, r7, #0
 80087d6:	3308      	adds	r3, #8
 80087d8:	8019      	strh	r1, [r3, #0]
 80087da:	1dbb      	adds	r3, r7, #6
 80087dc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2959
  uint16_t tmpsmcr = 0;
 80087de:	1c3b      	adds	r3, r7, #0
 80087e0:	3316      	adds	r3, #22
 80087e2:	2200      	movs	r2, #0
 80087e4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2960
  uint16_t tmpccmr1 = 0;
 80087e6:	1c3b      	adds	r3, r7, #0
 80087e8:	3314      	adds	r3, #20
 80087ea:	2200      	movs	r2, #0
 80087ec:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2961
  uint16_t tmpccer = 0;
 80087ee:	1c3b      	adds	r3, r7, #0
 80087f0:	3312      	adds	r3, #18
 80087f2:	2200      	movs	r2, #0
 80087f4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2970
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087f6:	1c3b      	adds	r3, r7, #0
 80087f8:	3316      	adds	r3, #22
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	8912      	ldrh	r2, [r2, #8]
 80087fe:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2972
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8008800:	1c3b      	adds	r3, r7, #0
 8008802:	3314      	adds	r3, #20
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	8b12      	ldrh	r2, [r2, #24]
 8008808:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2974
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880a:	1c3b      	adds	r3, r7, #0
 800880c:	3312      	adds	r3, #18
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	8c12      	ldrh	r2, [r2, #32]
 8008812:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2976
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8008814:	1c3b      	adds	r3, r7, #0
 8008816:	3316      	adds	r3, #22
 8008818:	1c3a      	adds	r2, r7, #0
 800881a:	3216      	adds	r2, #22
 800881c:	8812      	ldrh	r2, [r2, #0]
 800881e:	2107      	movs	r1, #7
 8008820:	438a      	bics	r2, r1
 8008822:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2977
  tmpsmcr |= TIM_EncoderMode;
 8008824:	1c3b      	adds	r3, r7, #0
 8008826:	3316      	adds	r3, #22
 8008828:	1c39      	adds	r1, r7, #0
 800882a:	3116      	adds	r1, #22
 800882c:	1c3a      	adds	r2, r7, #0
 800882e:	320a      	adds	r2, #10
 8008830:	8809      	ldrh	r1, [r1, #0]
 8008832:	8812      	ldrh	r2, [r2, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2979
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8008838:	1c3b      	adds	r3, r7, #0
 800883a:	3314      	adds	r3, #20
 800883c:	1c3a      	adds	r2, r7, #0
 800883e:	3214      	adds	r2, #20
 8008840:	8811      	ldrh	r1, [r2, #0]
 8008842:	4a1a      	ldr	r2, [pc, #104]	; (80088ac <TIM_EncoderInterfaceConfig+0xec>)
 8008844:	400a      	ands	r2, r1
 8008846:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2980
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8008848:	1c3b      	adds	r3, r7, #0
 800884a:	3314      	adds	r3, #20
 800884c:	1c3a      	adds	r2, r7, #0
 800884e:	3214      	adds	r2, #20
 8008850:	8812      	ldrh	r2, [r2, #0]
 8008852:	4917      	ldr	r1, [pc, #92]	; (80088b0 <TIM_EncoderInterfaceConfig+0xf0>)
 8008854:	430a      	orrs	r2, r1
 8008856:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2982
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008858:	1c3b      	adds	r3, r7, #0
 800885a:	3312      	adds	r3, #18
 800885c:	1c3a      	adds	r2, r7, #0
 800885e:	3212      	adds	r2, #18
 8008860:	8812      	ldrh	r2, [r2, #0]
 8008862:	21aa      	movs	r1, #170	; 0xaa
 8008864:	438a      	bics	r2, r1
 8008866:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2983
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8008868:	1dbb      	adds	r3, r7, #6
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	011b      	lsls	r3, r3, #4
 800886e:	b29a      	uxth	r2, r3
 8008870:	1c3b      	adds	r3, r7, #0
 8008872:	3308      	adds	r3, #8
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	4313      	orrs	r3, r2
 8008878:	b299      	uxth	r1, r3
 800887a:	1c3b      	adds	r3, r7, #0
 800887c:	3312      	adds	r3, #18
 800887e:	1c3a      	adds	r2, r7, #0
 8008880:	3212      	adds	r2, #18
 8008882:	8812      	ldrh	r2, [r2, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2985
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	1c3a      	adds	r2, r7, #0
 800888c:	3216      	adds	r2, #22
 800888e:	8812      	ldrh	r2, [r2, #0]
 8008890:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2987
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	1c3a      	adds	r2, r7, #0
 8008896:	3214      	adds	r2, #20
 8008898:	8812      	ldrh	r2, [r2, #0]
 800889a:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2989
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	1c3a      	adds	r2, r7, #0
 80088a0:	3212      	adds	r2, #18
 80088a2:	8812      	ldrh	r2, [r2, #0]
 80088a4:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:2990
}
 80088a6:	46bd      	mov	sp, r7
 80088a8:	b006      	add	sp, #24
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	fffffcfc 	.word	0xfffffcfc
 80088b0:	00000101 	.word	0x00000101

080088b4 <TIM_SelectHallSensor>:
TIM_SelectHallSensor():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3000
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	1c0a      	adds	r2, r1, #0
 80088be:	1cfb      	adds	r3, r7, #3
 80088c0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3005
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80088c2:	1cfb      	adds	r3, r7, #3
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d008      	beq.n	80088dc <TIM_SelectHallSensor+0x28>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3008
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	889b      	ldrh	r3, [r3, #4]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	2280      	movs	r2, #128	; 0x80
 80088d2:	4313      	orrs	r3, r2
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	809a      	strh	r2, [r3, #4]
 80088da:	e007      	b.n	80088ec <TIM_SelectHallSensor+0x38>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3013
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	889b      	ldrh	r3, [r3, #4]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2280      	movs	r2, #128	; 0x80
 80088e4:	4393      	bics	r3, r2
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3015
  }
}
 80088ec:	46bd      	mov	sp, r7
 80088ee:	b002      	add	sp, #8
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	46c0      	nop			; (mov r8, r8)

080088f4 <TIM_RemapConfig>:
TIM_RemapConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3046
  *            @arg TIM14_MCO: TIM14 Channel 1 is connected to MCO clock.  
  *                            MCO clock can be HSI14, SYSCLK, HSI, HSE or PLL/2.  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	1c0a      	adds	r2, r1, #0
 80088fe:	1cbb      	adds	r3, r7, #2
 8008900:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3052
 /* Check the parameters */
  assert_param(IS_TIM_LIST11_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	1cb9      	adds	r1, r7, #2
 8008906:	2350      	movs	r3, #80	; 0x50
 8008908:	8809      	ldrh	r1, [r1, #0]
 800890a:	52d1      	strh	r1, [r2, r3]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3053
}
 800890c:	46bd      	mov	sp, r7
 800890e:	b002      	add	sp, #8
 8008910:	bd80      	pop	{r7, pc}
 8008912:	46c0      	nop			; (mov r8, r8)

08008914 <TI1_Config>:
TI1_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3077
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	1c08      	adds	r0, r1, #0
 800891e:	1c11      	adds	r1, r2, #0
 8008920:	1c1a      	adds	r2, r3, #0
 8008922:	1c3b      	adds	r3, r7, #0
 8008924:	330a      	adds	r3, #10
 8008926:	8018      	strh	r0, [r3, #0]
 8008928:	1c3b      	adds	r3, r7, #0
 800892a:	3308      	adds	r3, #8
 800892c:	8019      	strh	r1, [r3, #0]
 800892e:	1dbb      	adds	r3, r7, #6
 8008930:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3078
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8008932:	1c3b      	adds	r3, r7, #0
 8008934:	3316      	adds	r3, #22
 8008936:	2200      	movs	r2, #0
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	1c3b      	adds	r3, r7, #0
 800893c:	3314      	adds	r3, #20
 800893e:	2200      	movs	r2, #0
 8008940:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3080
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8c1b      	ldrh	r3, [r3, #32]
 8008946:	b29b      	uxth	r3, r3
 8008948:	2201      	movs	r2, #1
 800894a:	4393      	bics	r3, r2
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3081
  tmpccmr1 = TIMx->CCMR1;
 8008952:	1c3b      	adds	r3, r7, #0
 8008954:	3316      	adds	r3, #22
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	8b12      	ldrh	r2, [r2, #24]
 800895a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3082
  tmpccer = TIMx->CCER;
 800895c:	1c3b      	adds	r3, r7, #0
 800895e:	3314      	adds	r3, #20
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	8c12      	ldrh	r2, [r2, #32]
 8008964:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3084
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8008966:	1c3b      	adds	r3, r7, #0
 8008968:	3316      	adds	r3, #22
 800896a:	1c3a      	adds	r2, r7, #0
 800896c:	3216      	adds	r2, #22
 800896e:	8812      	ldrh	r2, [r2, #0]
 8008970:	21f3      	movs	r1, #243	; 0xf3
 8008972:	438a      	bics	r2, r1
 8008974:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3085
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8008976:	1dbb      	adds	r3, r7, #6
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	b29a      	uxth	r2, r3
 800897e:	1c3b      	adds	r3, r7, #0
 8008980:	3308      	adds	r3, #8
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	4313      	orrs	r3, r2
 8008986:	b299      	uxth	r1, r3
 8008988:	1c3b      	adds	r3, r7, #0
 800898a:	3316      	adds	r3, #22
 800898c:	1c3a      	adds	r2, r7, #0
 800898e:	3216      	adds	r2, #22
 8008990:	8812      	ldrh	r2, [r2, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3088
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008996:	1c3b      	adds	r3, r7, #0
 8008998:	3314      	adds	r3, #20
 800899a:	1c3a      	adds	r2, r7, #0
 800899c:	3214      	adds	r2, #20
 800899e:	8812      	ldrh	r2, [r2, #0]
 80089a0:	210a      	movs	r1, #10
 80089a2:	438a      	bics	r2, r1
 80089a4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3089
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80089a6:	1c3a      	adds	r2, r7, #0
 80089a8:	320a      	adds	r2, #10
 80089aa:	1c3b      	adds	r3, r7, #0
 80089ac:	3314      	adds	r3, #20
 80089ae:	8812      	ldrh	r2, [r2, #0]
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	1c3b      	adds	r3, r7, #0
 80089b8:	3314      	adds	r3, #20
 80089ba:	2101      	movs	r1, #1
 80089bc:	430a      	orrs	r2, r1
 80089be:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3091
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	1c3a      	adds	r2, r7, #0
 80089c4:	3216      	adds	r2, #22
 80089c6:	8812      	ldrh	r2, [r2, #0]
 80089c8:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3092
  TIMx->CCER = tmpccer;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	1c3a      	adds	r2, r7, #0
 80089ce:	3214      	adds	r2, #20
 80089d0:	8812      	ldrh	r2, [r2, #0]
 80089d2:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3093
}
 80089d4:	46bd      	mov	sp, r7
 80089d6:	b006      	add	sp, #24
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	46c0      	nop			; (mov r8, r8)

080089dc <TI2_Config>:
TI2_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3113
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	1c08      	adds	r0, r1, #0
 80089e6:	1c11      	adds	r1, r2, #0
 80089e8:	1c1a      	adds	r2, r3, #0
 80089ea:	1c3b      	adds	r3, r7, #0
 80089ec:	330a      	adds	r3, #10
 80089ee:	8018      	strh	r0, [r3, #0]
 80089f0:	1c3b      	adds	r3, r7, #0
 80089f2:	3308      	adds	r3, #8
 80089f4:	8019      	strh	r1, [r3, #0]
 80089f6:	1dbb      	adds	r3, r7, #6
 80089f8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3114
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80089fa:	1c3b      	adds	r3, r7, #0
 80089fc:	3316      	adds	r3, #22
 80089fe:	2200      	movs	r2, #0
 8008a00:	801a      	strh	r2, [r3, #0]
 8008a02:	1c3b      	adds	r3, r7, #0
 8008a04:	3314      	adds	r3, #20
 8008a06:	2200      	movs	r2, #0
 8008a08:	801a      	strh	r2, [r3, #0]
 8008a0a:	1c3b      	adds	r3, r7, #0
 8008a0c:	3312      	adds	r3, #18
 8008a0e:	2200      	movs	r2, #0
 8008a10:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3116
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8c1b      	ldrh	r3, [r3, #32]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2210      	movs	r2, #16
 8008a1a:	4393      	bics	r3, r2
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3117
  tmpccmr1 = TIMx->CCMR1;
 8008a22:	1c3b      	adds	r3, r7, #0
 8008a24:	3316      	adds	r3, #22
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	8b12      	ldrh	r2, [r2, #24]
 8008a2a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3118
  tmpccer = TIMx->CCER;
 8008a2c:	1c3b      	adds	r3, r7, #0
 8008a2e:	3314      	adds	r3, #20
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	8c12      	ldrh	r2, [r2, #32]
 8008a34:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3119
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8008a36:	1c3b      	adds	r3, r7, #0
 8008a38:	3312      	adds	r3, #18
 8008a3a:	1c3a      	adds	r2, r7, #0
 8008a3c:	320a      	adds	r2, #10
 8008a3e:	8812      	ldrh	r2, [r2, #0]
 8008a40:	0112      	lsls	r2, r2, #4
 8008a42:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3121
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8008a44:	1c3b      	adds	r3, r7, #0
 8008a46:	3316      	adds	r3, #22
 8008a48:	1c3a      	adds	r2, r7, #0
 8008a4a:	3216      	adds	r2, #22
 8008a4c:	8811      	ldrh	r1, [r2, #0]
 8008a4e:	4a1e      	ldr	r2, [pc, #120]	; (8008ac8 <TI2_Config+0xec>)
 8008a50:	400a      	ands	r2, r1
 8008a52:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3122
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8008a54:	1dbb      	adds	r3, r7, #6
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	031b      	lsls	r3, r3, #12
 8008a5a:	b299      	uxth	r1, r3
 8008a5c:	1c3b      	adds	r3, r7, #0
 8008a5e:	3316      	adds	r3, #22
 8008a60:	1c3a      	adds	r2, r7, #0
 8008a62:	3216      	adds	r2, #22
 8008a64:	8812      	ldrh	r2, [r2, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3123
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8008a6a:	1c3b      	adds	r3, r7, #0
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	b299      	uxth	r1, r3
 8008a74:	1c3b      	adds	r3, r7, #0
 8008a76:	3316      	adds	r3, #22
 8008a78:	1c3a      	adds	r2, r7, #0
 8008a7a:	3216      	adds	r2, #22
 8008a7c:	8812      	ldrh	r2, [r2, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3125
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a82:	1c3b      	adds	r3, r7, #0
 8008a84:	3314      	adds	r3, #20
 8008a86:	1c3a      	adds	r2, r7, #0
 8008a88:	3214      	adds	r2, #20
 8008a8a:	8812      	ldrh	r2, [r2, #0]
 8008a8c:	21a0      	movs	r1, #160	; 0xa0
 8008a8e:	438a      	bics	r2, r1
 8008a90:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3126
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8008a92:	1c3a      	adds	r2, r7, #0
 8008a94:	3212      	adds	r2, #18
 8008a96:	1c3b      	adds	r3, r7, #0
 8008a98:	3314      	adds	r3, #20
 8008a9a:	8812      	ldrh	r2, [r2, #0]
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	1c3b      	adds	r3, r7, #0
 8008aa4:	3314      	adds	r3, #20
 8008aa6:	2110      	movs	r1, #16
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3128
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	1c3a      	adds	r2, r7, #0
 8008ab0:	3216      	adds	r2, #22
 8008ab2:	8812      	ldrh	r2, [r2, #0]
 8008ab4:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3129
  TIMx->CCER = tmpccer;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	1c3a      	adds	r2, r7, #0
 8008aba:	3214      	adds	r2, #20
 8008abc:	8812      	ldrh	r2, [r2, #0]
 8008abe:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3130
}
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	b006      	add	sp, #24
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	00000cff 	.word	0x00000cff

08008acc <TI3_Config>:
TI3_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3150
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	1c08      	adds	r0, r1, #0
 8008ad6:	1c11      	adds	r1, r2, #0
 8008ad8:	1c1a      	adds	r2, r3, #0
 8008ada:	1c3b      	adds	r3, r7, #0
 8008adc:	330a      	adds	r3, #10
 8008ade:	8018      	strh	r0, [r3, #0]
 8008ae0:	1c3b      	adds	r3, r7, #0
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	8019      	strh	r1, [r3, #0]
 8008ae6:	1dbb      	adds	r3, r7, #6
 8008ae8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3151
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8008aea:	1c3b      	adds	r3, r7, #0
 8008aec:	3316      	adds	r3, #22
 8008aee:	2200      	movs	r2, #0
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	1c3b      	adds	r3, r7, #0
 8008af4:	3314      	adds	r3, #20
 8008af6:	2200      	movs	r2, #0
 8008af8:	801a      	strh	r2, [r3, #0]
 8008afa:	1c3b      	adds	r3, r7, #0
 8008afc:	3312      	adds	r3, #18
 8008afe:	2200      	movs	r2, #0
 8008b00:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3153
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8c1b      	ldrh	r3, [r3, #32]
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	4b28      	ldr	r3, [pc, #160]	; (8008bac <TI3_Config+0xe0>)
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3154
  tmpccmr2 = TIMx->CCMR2;
 8008b12:	1c3b      	adds	r3, r7, #0
 8008b14:	3316      	adds	r3, #22
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	8b92      	ldrh	r2, [r2, #28]
 8008b1a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3155
  tmpccer = TIMx->CCER;
 8008b1c:	1c3b      	adds	r3, r7, #0
 8008b1e:	3314      	adds	r3, #20
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	8c12      	ldrh	r2, [r2, #32]
 8008b24:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3156
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8008b26:	1c3b      	adds	r3, r7, #0
 8008b28:	3312      	adds	r3, #18
 8008b2a:	1c3a      	adds	r2, r7, #0
 8008b2c:	320a      	adds	r2, #10
 8008b2e:	8812      	ldrh	r2, [r2, #0]
 8008b30:	0212      	lsls	r2, r2, #8
 8008b32:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3158
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8008b34:	1c3b      	adds	r3, r7, #0
 8008b36:	3316      	adds	r3, #22
 8008b38:	1c3a      	adds	r2, r7, #0
 8008b3a:	3216      	adds	r2, #22
 8008b3c:	8812      	ldrh	r2, [r2, #0]
 8008b3e:	21f3      	movs	r1, #243	; 0xf3
 8008b40:	438a      	bics	r2, r1
 8008b42:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3159
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8008b44:	1dbb      	adds	r3, r7, #6
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	1c3b      	adds	r3, r7, #0
 8008b4e:	3308      	adds	r3, #8
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	b299      	uxth	r1, r3
 8008b56:	1c3b      	adds	r3, r7, #0
 8008b58:	3316      	adds	r3, #22
 8008b5a:	1c3a      	adds	r2, r7, #0
 8008b5c:	3216      	adds	r2, #22
 8008b5e:	8812      	ldrh	r2, [r2, #0]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3161
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008b64:	1c3b      	adds	r3, r7, #0
 8008b66:	3314      	adds	r3, #20
 8008b68:	1c3a      	adds	r2, r7, #0
 8008b6a:	3214      	adds	r2, #20
 8008b6c:	8811      	ldrh	r1, [r2, #0]
 8008b6e:	4a10      	ldr	r2, [pc, #64]	; (8008bb0 <TI3_Config+0xe4>)
 8008b70:	400a      	ands	r2, r1
 8008b72:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3162
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 8008b74:	1c3a      	adds	r2, r7, #0
 8008b76:	3212      	adds	r2, #18
 8008b78:	1c3b      	adds	r3, r7, #0
 8008b7a:	3314      	adds	r3, #20
 8008b7c:	8812      	ldrh	r2, [r2, #0]
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	1c3b      	adds	r3, r7, #0
 8008b86:	3314      	adds	r3, #20
 8008b88:	2180      	movs	r1, #128	; 0x80
 8008b8a:	0049      	lsls	r1, r1, #1
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3164
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	1c3a      	adds	r2, r7, #0
 8008b94:	3216      	adds	r2, #22
 8008b96:	8812      	ldrh	r2, [r2, #0]
 8008b98:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3165
  TIMx->CCER = tmpccer;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	1c3a      	adds	r2, r7, #0
 8008b9e:	3214      	adds	r2, #20
 8008ba0:	8812      	ldrh	r2, [r2, #0]
 8008ba2:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3166
}
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	b006      	add	sp, #24
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	fffffeff 	.word	0xfffffeff
 8008bb0:	fffff5ff 	.word	0xfffff5ff

08008bb4 <TI4_Config>:
TI4_Config():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3186
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	1c08      	adds	r0, r1, #0
 8008bbe:	1c11      	adds	r1, r2, #0
 8008bc0:	1c1a      	adds	r2, r3, #0
 8008bc2:	1c3b      	adds	r3, r7, #0
 8008bc4:	330a      	adds	r3, #10
 8008bc6:	8018      	strh	r0, [r3, #0]
 8008bc8:	1c3b      	adds	r3, r7, #0
 8008bca:	3308      	adds	r3, #8
 8008bcc:	8019      	strh	r1, [r3, #0]
 8008bce:	1dbb      	adds	r3, r7, #6
 8008bd0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3187
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8008bd2:	1c3b      	adds	r3, r7, #0
 8008bd4:	3316      	adds	r3, #22
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	1c3b      	adds	r3, r7, #0
 8008bdc:	3314      	adds	r3, #20
 8008bde:	2200      	movs	r2, #0
 8008be0:	801a      	strh	r2, [r3, #0]
 8008be2:	1c3b      	adds	r3, r7, #0
 8008be4:	3312      	adds	r3, #18
 8008be6:	2200      	movs	r2, #0
 8008be8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3190

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8c1b      	ldrh	r3, [r3, #32]
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	4b2b      	ldr	r3, [pc, #172]	; (8008ca0 <TI4_Config+0xec>)
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3191
  tmpccmr2 = TIMx->CCMR2;
 8008bfa:	1c3b      	adds	r3, r7, #0
 8008bfc:	3316      	adds	r3, #22
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	8b92      	ldrh	r2, [r2, #28]
 8008c02:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3192
  tmpccer = TIMx->CCER;
 8008c04:	1c3b      	adds	r3, r7, #0
 8008c06:	3314      	adds	r3, #20
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	8c12      	ldrh	r2, [r2, #32]
 8008c0c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3193
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8008c0e:	1c3b      	adds	r3, r7, #0
 8008c10:	3312      	adds	r3, #18
 8008c12:	1c3a      	adds	r2, r7, #0
 8008c14:	320a      	adds	r2, #10
 8008c16:	8812      	ldrh	r2, [r2, #0]
 8008c18:	0312      	lsls	r2, r2, #12
 8008c1a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3195
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8008c1c:	1c3b      	adds	r3, r7, #0
 8008c1e:	3316      	adds	r3, #22
 8008c20:	1c3a      	adds	r2, r7, #0
 8008c22:	3216      	adds	r2, #22
 8008c24:	8811      	ldrh	r1, [r2, #0]
 8008c26:	4a1f      	ldr	r2, [pc, #124]	; (8008ca4 <TI4_Config+0xf0>)
 8008c28:	400a      	ands	r2, r1
 8008c2a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3196
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8008c2c:	1c3b      	adds	r3, r7, #0
 8008c2e:	3308      	adds	r3, #8
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	021b      	lsls	r3, r3, #8
 8008c34:	b299      	uxth	r1, r3
 8008c36:	1c3b      	adds	r3, r7, #0
 8008c38:	3316      	adds	r3, #22
 8008c3a:	1c3a      	adds	r2, r7, #0
 8008c3c:	3216      	adds	r2, #22
 8008c3e:	8812      	ldrh	r2, [r2, #0]
 8008c40:	430a      	orrs	r2, r1
 8008c42:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3197
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8008c44:	1dbb      	adds	r3, r7, #6
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	031b      	lsls	r3, r3, #12
 8008c4a:	b299      	uxth	r1, r3
 8008c4c:	1c3b      	adds	r3, r7, #0
 8008c4e:	3316      	adds	r3, #22
 8008c50:	1c3a      	adds	r2, r7, #0
 8008c52:	3216      	adds	r2, #22
 8008c54:	8812      	ldrh	r2, [r2, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3199
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008c5a:	1c3b      	adds	r3, r7, #0
 8008c5c:	3314      	adds	r3, #20
 8008c5e:	1c3a      	adds	r2, r7, #0
 8008c60:	3214      	adds	r2, #20
 8008c62:	8811      	ldrh	r1, [r2, #0]
 8008c64:	4a10      	ldr	r2, [pc, #64]	; (8008ca8 <TI4_Config+0xf4>)
 8008c66:	400a      	ands	r2, r1
 8008c68:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3200
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8008c6a:	1c3a      	adds	r2, r7, #0
 8008c6c:	3212      	adds	r2, #18
 8008c6e:	1c3b      	adds	r3, r7, #0
 8008c70:	3314      	adds	r3, #20
 8008c72:	8812      	ldrh	r2, [r2, #0]
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	1c3b      	adds	r3, r7, #0
 8008c7c:	3314      	adds	r3, #20
 8008c7e:	2180      	movs	r1, #128	; 0x80
 8008c80:	0149      	lsls	r1, r1, #5
 8008c82:	430a      	orrs	r2, r1
 8008c84:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3202
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	1c3a      	adds	r2, r7, #0
 8008c8a:	3216      	adds	r2, #22
 8008c8c:	8812      	ldrh	r2, [r2, #0]
 8008c8e:	839a      	strh	r2, [r3, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3203
  TIMx->CCER = tmpccer;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	1c3a      	adds	r2, r7, #0
 8008c94:	3214      	adds	r2, #20
 8008c96:	8812      	ldrh	r2, [r2, #0]
 8008c98:	841a      	strh	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c:3204
}
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	b006      	add	sp, #24
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	ffffefff 	.word	0xffffefff
 8008ca4:	00000cff 	.word	0x00000cff
 8008ca8:	00005fff 	.word	0x00005fff

08008cac <USART_DeInit>:
USART_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:173
  * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
  * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:177
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <USART_DeInit+0x50>)
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d10c      	bne.n	8008cd6 <USART_DeInit+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:179
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	01db      	lsls	r3, r3, #7
 8008cc0:	1c18      	adds	r0, r3, #0
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	f7fb fdbc 	bl	8004840 <RCC_APB2PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:180
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8008cc8:	2380      	movs	r3, #128	; 0x80
 8008cca:	01db      	lsls	r3, r3, #7
 8008ccc:	1c18      	adds	r0, r3, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	f7fb fdb6 	bl	8004840 <RCC_APB2PeriphResetCmd>
 8008cd4:	e00f      	b.n	8008cf6 <USART_DeInit+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:184
  }
  else 
  {
    if  (USARTx == USART2)
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <USART_DeInit+0x54>)
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d10b      	bne.n	8008cf6 <USART_DeInit+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:186
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8008cde:	2380      	movs	r3, #128	; 0x80
 8008ce0:	029b      	lsls	r3, r3, #10
 8008ce2:	1c18      	adds	r0, r3, #0
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	f7fb fdc9 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:187
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8008cea:	2380      	movs	r3, #128	; 0x80
 8008cec:	029b      	lsls	r3, r3, #10
 8008cee:	1c18      	adds	r0, r3, #0
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f7fb fdc3 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:190
    }
  }
}
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	b002      	add	sp, #8
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	40013800 	.word	0x40013800
 8008d00:	40004400 	.word	0x40004400

08008d04 <USART_Init>:
USART_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:201
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08c      	sub	sp, #48	; 0x30
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:202
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d12:	2300      	movs	r3, #0
 8008d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d16:	2300      	movs	r3, #0
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:215
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	1c19      	adds	r1, r3, #0
 8008d22:	4391      	bics	r1, r2
 8008d24:	1c0a      	adds	r2, r1, #0
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:218
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:220
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8008d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d32:	4b47      	ldr	r3, [pc, #284]	; (8008e50 <USART_Init+0x14c>)
 8008d34:	4013      	ands	r3, r2
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:224
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:227
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d46:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:230
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:232
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8008d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d50:	4b40      	ldr	r3, [pc, #256]	; (8008e54 <USART_Init+0x150>)
 8008d52:	4013      	ands	r3, r2
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:238
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:239
    USART_InitStruct->USART_Mode;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	691b      	ldr	r3, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:238
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8008d64:	4313      	orrs	r3, r2
 8008d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:242
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d70:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:245
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:247
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8008d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7a:	4b37      	ldr	r3, [pc, #220]	; (8008e58 <USART_Init+0x154>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:251
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d86:	4313      	orrs	r3, r2
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:254
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8e:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:258
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8008d90:	1c3b      	adds	r3, r7, #0
 8008d92:	3308      	adds	r3, #8
 8008d94:	1c18      	adds	r0, r3, #0
 8008d96:	f7fb fba5 	bl	80044e4 <RCC_GetClocksFreq>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:260
  
  if (USARTx == USART1)
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4b2f      	ldr	r3, [pc, #188]	; (8008e5c <USART_Init+0x158>)
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d104      	bne.n	8008dac <USART_Init+0xa8>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:262
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8008da2:	1c3b      	adds	r3, r7, #0
 8008da4:	3308      	adds	r3, #8
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008daa:	e003      	b.n	8008db4 <USART_Init+0xb0>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:266
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8008dac:	1c3b      	adds	r3, r7, #0
 8008dae:	3308      	adds	r3, #8
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	62bb      	str	r3, [r7, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:270
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	d014      	beq.n	8008dea <USART_Init+0xe6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:273
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	005a      	lsls	r2, r3, #1
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	1c10      	adds	r0, r2, #0
 8008dca:	1c19      	adds	r1, r3, #0
 8008dcc:	f7f7 f9f4 	bl	80001b8 <__aeabi_uidiv>
 8008dd0:	1c03      	adds	r3, r0, #0
 8008dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:274
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	005a      	lsls	r2, r3, #1
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	1c10      	adds	r0, r2, #0
 8008dde:	1c19      	adds	r1, r3, #0
 8008de0:	f7f7 fa2e 	bl	8000240 <__aeabi_uidivmod>
 8008de4:	1c0b      	adds	r3, r1, #0
 8008de6:	627b      	str	r3, [r7, #36]	; 0x24
 8008de8:	e010      	b.n	8008e0c <USART_Init+0x108>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:279
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df0:	1c19      	adds	r1, r3, #0
 8008df2:	f7f7 f9e1 	bl	80001b8 <__aeabi_uidiv>
 8008df6:	1c03      	adds	r3, r0, #0
 8008df8:	62fb      	str	r3, [r7, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:280
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e00:	1c10      	adds	r0, r2, #0
 8008e02:	1c19      	adds	r1, r3, #0
 8008e04:	f7f7 fa1c 	bl	8000240 <__aeabi_uidivmod>
 8008e08:	1c0b      	adds	r3, r1, #0
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:284
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	085a      	lsrs	r2, r3, #1
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d802      	bhi.n	8008e1e <USART_Init+0x11a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:286
  {
    divider++;
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:290
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	2380      	movs	r3, #128	; 0x80
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	4013      	ands	r3, r2
 8008e28:	d00a      	beq.n	8008e40 <USART_Init+0x13c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:293
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8008e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2c:	230f      	movs	r3, #15
 8008e2e:	4013      	ands	r3, r2
 8008e30:	085b      	lsrs	r3, r3, #1
 8008e32:	627b      	str	r3, [r7, #36]	; 0x24
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:296
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8008e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e36:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <USART_Init+0x15c>)
 8008e38:	401a      	ands	r2, r3
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:300
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:301
}
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	b00c      	add	sp, #48	; 0x30
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	46c0      	nop			; (mov r8, r8)
 8008e50:	ffffcfff 	.word	0xffffcfff
 8008e54:	ffffe9f3 	.word	0xffffe9f3
 8008e58:	fffffcff 	.word	0xfffffcff
 8008e5c:	40013800 	.word	0x40013800
 8008e60:	0000fff0 	.word	0x0000fff0

08008e64 <USART_StructInit>:
USART_StructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:310
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:312
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2296      	movs	r2, #150	; 0x96
 8008e70:	0192      	lsls	r2, r2, #6
 8008e72:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:313
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:314
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:315
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:316
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	220c      	movs	r2, #12
 8008e8a:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:317
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:318
}
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b002      	add	sp, #8
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USART_ClockInit>:
USART_ClockInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:330
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:331
  uint32_t tmpreg = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:339
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:341
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <USART_ClockInit+0x44>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:347
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:348
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:347
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8008ec2:	431a      	orrs	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:348
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:347
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:350
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:351
}
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	b004      	add	sp, #16
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	fffff0ff 	.word	0xfffff0ff

08008ee0 <USART_ClockStructInit>:
USART_ClockStructInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:360
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:362
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:363
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:364
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:365
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:366
}
 8008f00:	46bd      	mov	sp, r7
 8008f02:	b002      	add	sp, #8
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	46c0      	nop			; (mov r8, r8)

08008f08 <USART_Cmd>:
USART_Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:376
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	1c0a      	adds	r2, r1, #0
 8008f12:	1cfb      	adds	r3, r7, #3
 8008f14:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:381
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008f16:	1cfb      	adds	r3, r7, #3
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d006      	beq.n	8008f2c <USART_Cmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:384
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2201      	movs	r2, #1
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	e007      	b.n	8008f3c <USART_Cmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:389
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2201      	movs	r2, #1
 8008f32:	1c19      	adds	r1, r3, #0
 8008f34:	4391      	bics	r1, r2
 8008f36:	1c0a      	adds	r2, r1, #0
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:391
  }
}
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	b002      	add	sp, #8
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	46c0      	nop			; (mov r8, r8)

08008f44 <USART_DirectionModeCmd>:
USART_DirectionModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:405
  * @param  NewState: new state of the USART transfer direction.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	1dfb      	adds	r3, r7, #7
 8008f50:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:411
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8008f52:	1dfb      	adds	r3, r7, #7
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d006      	beq.n	8008f68 <USART_DirectionModeCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:415
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e006      	b.n	8008f76 <USART_DirectionModeCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:421
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	43d2      	mvns	r2, r2
 8008f70:	401a      	ands	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:423
  }
}
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b004      	add	sp, #16
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USART_OverSampling8Cmd>:
USART_OverSampling8Cmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:435
  * @note   This function has to be called before calling USART_Init() function
  *         in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	1c0a      	adds	r2, r1, #0
 8008f86:	1cfb      	adds	r3, r7, #3
 8008f88:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:440
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008f8a:	1cfb      	adds	r3, r7, #3
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d007      	beq.n	8008fa2 <USART_OverSampling8Cmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:443
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2280      	movs	r2, #128	; 0x80
 8008f98:	0212      	lsls	r2, r2, #8
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	e005      	b.n	8008fae <USART_OverSampling8Cmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:448
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4b03      	ldr	r3, [pc, #12]	; (8008fb4 <USART_OverSampling8Cmd+0x38>)
 8008fa8:	401a      	ands	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:450
  }
}  
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	b002      	add	sp, #8
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	ffff7fff 	.word	0xffff7fff

08008fb8 <USART_OneBitMethodCmd>:
USART_OneBitMethodCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:461
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	1c0a      	adds	r2, r1, #0
 8008fc2:	1cfb      	adds	r3, r7, #3
 8008fc4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:466
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008fc6:	1cfb      	adds	r3, r7, #3
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <USART_OneBitMethodCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:469
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	2280      	movs	r2, #128	; 0x80
 8008fd4:	0112      	lsls	r2, r2, #4
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	609a      	str	r2, [r3, #8]
 8008fdc:	e005      	b.n	8008fea <USART_OneBitMethodCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:474
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689a      	ldr	r2, [r3, #8]
 8008fe2:	4b03      	ldr	r3, [pc, #12]	; (8008ff0 <USART_OneBitMethodCmd+0x38>)
 8008fe4:	401a      	ands	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:476
  }
}
 8008fea:	46bd      	mov	sp, r7
 8008fec:	b002      	add	sp, #8
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	fffff7ff 	.word	0xfffff7ff

08008ff4 <USART_MSBFirstCmd>:
USART_MSBFirstCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:489
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	1c0a      	adds	r2, r1, #0
 8008ffe:	1cfb      	adds	r3, r7, #3
 8009000:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:494
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009002:	1cfb      	adds	r3, r7, #3
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d007      	beq.n	800901a <USART_MSBFirstCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:498
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2280      	movs	r2, #128	; 0x80
 8009010:	0312      	lsls	r2, r2, #12
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	605a      	str	r2, [r3, #4]
 8009018:	e005      	b.n	8009026 <USART_MSBFirstCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:504
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the 
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	4b03      	ldr	r3, [pc, #12]	; (800902c <USART_MSBFirstCmd+0x38>)
 8009020:	401a      	ands	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:506
  }
}
 8009026:	46bd      	mov	sp, r7
 8009028:	b002      	add	sp, #8
 800902a:	bd80      	pop	{r7, pc}
 800902c:	fff7ffff 	.word	0xfff7ffff

08009030 <USART_DataInvCmd>:
USART_DataInvCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:521
  *                          logic (1=H, 0=L) 
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	1c0a      	adds	r2, r1, #0
 800903a:	1cfb      	adds	r3, r7, #3
 800903c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:526
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800903e:	1cfb      	adds	r3, r7, #3
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d007      	beq.n	8009056 <USART_DataInvCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:530
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2280      	movs	r2, #128	; 0x80
 800904c:	02d2      	lsls	r2, r2, #11
 800904e:	431a      	orrs	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	605a      	str	r2, [r3, #4]
 8009054:	e005      	b.n	8009062 <USART_DataInvCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:536
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <USART_DataInvCmd+0x38>)
 800905c:	401a      	ands	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:538
  }
}
 8009062:	46bd      	mov	sp, r7
 8009064:	b002      	add	sp, #8
 8009066:	bd80      	pop	{r7, pc}
 8009068:	fffbffff 	.word	0xfffbffff

0800906c <USART_InvPinCmd>:
USART_InvPinCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:555
  *            @arg DISABLE: pin(s) signal works using the standard logic levels (Vdd =1, Gnd =0).
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	1dfb      	adds	r3, r7, #7
 8009078:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:561
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800907a:	1dfb      	adds	r3, r7, #7
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d006      	beq.n	8009090 <USART_InvPinCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:565
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	431a      	orrs	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	605a      	str	r2, [r3, #4]
 800908e:	e006      	b.n	800909e <USART_InvPinCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:571
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	43d2      	mvns	r2, r2
 8009098:	401a      	ands	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:573
  }
}
 800909e:	46bd      	mov	sp, r7
 80090a0:	b004      	add	sp, #16
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USART_SWAPPinCmd>:
USART_SWAPPinCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:586
  *            @arg DISABLE: TX/RX pins are used as defined in standard pinout
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	1c0a      	adds	r2, r1, #0
 80090ae:	1cfb      	adds	r3, r7, #3
 80090b0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:591
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80090b2:	1cfb      	adds	r3, r7, #3
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <USART_SWAPPinCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:594
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	2280      	movs	r2, #128	; 0x80
 80090c0:	0212      	lsls	r2, r2, #8
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	605a      	str	r2, [r3, #4]
 80090c8:	e005      	b.n	80090d6 <USART_SWAPPinCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:599
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	4b03      	ldr	r3, [pc, #12]	; (80090dc <USART_SWAPPinCmd+0x38>)
 80090d0:	401a      	ands	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:601
  }
}
 80090d6:	46bd      	mov	sp, r7
 80090d8:	b002      	add	sp, #8
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	ffff7fff 	.word	0xffff7fff

080090e0 <USART_ReceiverTimeOutCmd>:
USART_ReceiverTimeOutCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:611
  * @param  NewState: new state of the USARTx receiver Time Out.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	1c0a      	adds	r2, r1, #0
 80090ea:	1cfb      	adds	r3, r7, #3
 80090ec:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:616
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80090ee:	1cfb      	adds	r3, r7, #3
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d007      	beq.n	8009106 <USART_ReceiverTimeOutCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:620
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2280      	movs	r2, #128	; 0x80
 80090fc:	0412      	lsls	r2, r2, #16
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	605a      	str	r2, [r3, #4]
 8009104:	e005      	b.n	8009112 <USART_ReceiverTimeOutCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:626
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685a      	ldr	r2, [r3, #4]
 800910a:	4b03      	ldr	r3, [pc, #12]	; (8009118 <USART_ReceiverTimeOutCmd+0x38>)
 800910c:	401a      	ands	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:628
  }
}
 8009112:	46bd      	mov	sp, r7
 8009114:	b002      	add	sp, #8
 8009116:	bd80      	pop	{r7, pc}
 8009118:	ff7fffff 	.word	0xff7fffff

0800911c <USART_SetReceiverTimeOut>:
USART_SetReceiverTimeOut():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:637
  * @param  USARTx: where x can be 1 to select the USART peripheral.
  * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
  * @retval None
  */
void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
{    
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:644
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	0e1b      	lsrs	r3, r3, #24
 800912c:	061a      	lsls	r2, r3, #24
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:647
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695a      	ldr	r2, [r3, #20]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:648
}
 800913e:	46bd      	mov	sp, r7
 8009140:	b002      	add	sp, #8
 8009142:	bd80      	pop	{r7, pc}

08009144 <USART_SetPrescaler>:
USART_SetPrescaler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:658
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   This function has to be called before calling USART_Cmd() function.    
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	1c0a      	adds	r2, r1, #0
 800914e:	1cfb      	adds	r3, r7, #3
 8009150:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:663
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	8a1b      	ldrh	r3, [r3, #16]
 8009156:	b29b      	uxth	r3, r3
 8009158:	22ff      	movs	r2, #255	; 0xff
 800915a:	4393      	bics	r3, r2
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:665
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	8a1b      	ldrh	r3, [r3, #16]
 8009166:	b29a      	uxth	r2, r3
 8009168:	1cfb      	adds	r3, r7, #3
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	b29b      	uxth	r3, r3
 800916e:	4313      	orrs	r3, r2
 8009170:	b29a      	uxth	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:666
}
 8009176:	46bd      	mov	sp, r7
 8009178:	b002      	add	sp, #8
 800917a:	bd80      	pop	{r7, pc}

0800917c <USART_STOPModeCmd>:
USART_STOPModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:705
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called when USART clock is set to HSI or LSE. 
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	1c0a      	adds	r2, r1, #0
 8009186:	1cfb      	adds	r3, r7, #3
 8009188:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:710
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800918a:	1cfb      	adds	r3, r7, #3
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d006      	beq.n	80091a0 <USART_STOPModeCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:714
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2202      	movs	r2, #2
 8009198:	431a      	orrs	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e007      	b.n	80091b0 <USART_STOPModeCmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:720
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2202      	movs	r2, #2
 80091a6:	1c19      	adds	r1, r3, #0
 80091a8:	4391      	bics	r1, r2
 80091aa:	1c0a      	adds	r2, r1, #0
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:722
  }
}
 80091b0:	46bd      	mov	sp, r7
 80091b2:	b002      	add	sp, #8
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	46c0      	nop			; (mov r8, r8)

080091b8 <USART_StopModeWakeUpSourceConfig>:
USART_StopModeWakeUpSourceConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:736
  *            @arg USART_WakeUpSource_RXNE: WUF active on RXNE.
  * @note   This function has to be called before calling USART_Cmd() function.   
  * @retval None
  */
void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:741
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <USART_StopModeWakeUpSourceConfig+0x28>)
 80091c8:	401a      	ands	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:742
  USARTx->CR3 |= USART_WakeUpSource;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:743
}
 80091da:	46bd      	mov	sp, r7
 80091dc:	b002      	add	sp, #8
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	ffcfffff 	.word	0xffcfffff

080091e4 <USART_AutoBaudRateCmd>:
USART_AutoBaudRateCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:786
  * @param  NewState: new state of the USARTx auto baud rate.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	1c0a      	adds	r2, r1, #0
 80091ee:	1cfb      	adds	r3, r7, #3
 80091f0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:791
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80091f2:	1cfb      	adds	r3, r7, #3
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d007      	beq.n	800920a <USART_AutoBaudRateCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:795
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	2280      	movs	r2, #128	; 0x80
 8009200:	0352      	lsls	r2, r2, #13
 8009202:	431a      	orrs	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	605a      	str	r2, [r3, #4]
 8009208:	e005      	b.n	8009216 <USART_AutoBaudRateCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:801
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	4b03      	ldr	r3, [pc, #12]	; (800921c <USART_AutoBaudRateCmd+0x38>)
 8009210:	401a      	ands	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:803
  }
}
 8009216:	46bd      	mov	sp, r7
 8009218:	b002      	add	sp, #8
 800921a:	bd80      	pop	{r7, pc}
 800921c:	ffefffff 	.word	0xffefffff

08009220 <USART_AutoBaudRateConfig>:
USART_AutoBaudRateConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:816
  *            @arg USART_AutoBaudRate_FallingEdge: Falling edge to falling edge measurement.
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:821
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	4b06      	ldr	r3, [pc, #24]	; (8009248 <USART_AutoBaudRateConfig+0x28>)
 8009230:	401a      	ands	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:822
  USARTx->CR2 |= USART_AutoBaudRate;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	431a      	orrs	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:823
}
 8009242:	46bd      	mov	sp, r7
 8009244:	b002      	add	sp, #8
 8009246:	bd80      	pop	{r7, pc}
 8009248:	ff9fffff 	.word	0xff9fffff

0800924c <USART_SendData>:
USART_SendData():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:858
  * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	1c0a      	adds	r2, r1, #0
 8009256:	1cbb      	adds	r3, r7, #2
 8009258:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:864
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 800925a:	1cbb      	adds	r3, r7, #2
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	05db      	lsls	r3, r3, #23
 8009260:	0ddb      	lsrs	r3, r3, #23
 8009262:	b29a      	uxth	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	851a      	strh	r2, [r3, #40]	; 0x28
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:865
}
 8009268:	46bd      	mov	sp, r7
 800926a:	b002      	add	sp, #8
 800926c:	bd80      	pop	{r7, pc}
 800926e:	46c0      	nop			; (mov r8, r8)

08009270 <USART_ReceiveData>:
USART_ReceiveData():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:873
  * @brief  Returns the most recent received data by the USARTx peripheral.
  * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:878
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800927c:	b29b      	uxth	r3, r3
 800927e:	05db      	lsls	r3, r3, #23
 8009280:	0ddb      	lsrs	r3, r3, #23
 8009282:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:879
}
 8009284:	1c18      	adds	r0, r3, #0
 8009286:	46bd      	mov	sp, r7
 8009288:	b002      	add	sp, #8
 800928a:	bd80      	pop	{r7, pc}

0800928c <USART_SetAddress>:
USART_SetAddress():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:922
  * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	1c0a      	adds	r2, r1, #0
 8009296:	1cfb      	adds	r3, r7, #3
 8009298:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:927
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	021b      	lsls	r3, r3, #8
 80092a0:	0a1a      	lsrs	r2, r3, #8
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:929
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	1cfb      	adds	r3, r7, #3
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	061b      	lsls	r3, r3, #24
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:930
}
 80092b6:	46bd      	mov	sp, r7
 80092b8:	b002      	add	sp, #8
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USART_MuteModeCmd>:
USART_MuteModeCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:940
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	1c0a      	adds	r2, r1, #0
 80092c6:	1cfb      	adds	r3, r7, #3
 80092c8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:945
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80092ca:	1cfb      	adds	r3, r7, #3
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d007      	beq.n	80092e2 <USART_MuteModeCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:948
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2280      	movs	r2, #128	; 0x80
 80092d8:	0192      	lsls	r2, r2, #6
 80092da:	431a      	orrs	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	e005      	b.n	80092ee <USART_MuteModeCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:953
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	4b03      	ldr	r3, [pc, #12]	; (80092f4 <USART_MuteModeCmd+0x38>)
 80092e8:	401a      	ands	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:955
  }
}
 80092ee:	46bd      	mov	sp, r7
 80092f0:	b002      	add	sp, #8
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	ffffdfff 	.word	0xffffdfff

080092f8 <USART_MuteModeWakeUpConfig>:
USART_MuteModeWakeUpConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:967
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:972
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	4b06      	ldr	r3, [pc, #24]	; (8009320 <USART_MuteModeWakeUpConfig+0x28>)
 8009308:	401a      	ands	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:973
  USARTx->CR1 |= USART_WakeUp;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	431a      	orrs	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:974
}
 800931a:	46bd      	mov	sp, r7
 800931c:	b002      	add	sp, #8
 800931e:	bd80      	pop	{r7, pc}
 8009320:	fffff7ff 	.word	0xfffff7ff

08009324 <USART_AddressDetectionConfig>:
USART_AddressDetectionConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:986
  *            @arg USART_AddressLength_4b: 4-bit address length detection 
  *            @arg USART_AddressLength_7b: 7-bit address length detection 
  * @retval None
  */
void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:991
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2210      	movs	r2, #16
 8009334:	1c19      	adds	r1, r3, #0
 8009336:	4391      	bics	r1, r2
 8009338:	1c0a      	adds	r2, r1, #0
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:992
  USARTx->CR2 |= USART_AddressLength;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	431a      	orrs	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:993
}
 800934a:	46bd      	mov	sp, r7
 800934c:	b002      	add	sp, #8
 800934e:	bd80      	pop	{r7, pc}

08009350 <USART_LINBreakDetectLengthConfig>:
USART_LINBreakDetectLengthConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1049
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1054
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	2220      	movs	r2, #32
 8009360:	1c19      	adds	r1, r3, #0
 8009362:	4391      	bics	r1, r2
 8009364:	1c0a      	adds	r2, r1, #0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1055
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	431a      	orrs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1056
}
 8009376:	46bd      	mov	sp, r7
 8009378:	b002      	add	sp, #8
 800937a:	bd80      	pop	{r7, pc}

0800937c <USART_LINCmd>:
USART_LINCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1066
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	1c0a      	adds	r2, r1, #0
 8009386:	1cfb      	adds	r3, r7, #3
 8009388:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1071
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800938a:	1cfb      	adds	r3, r7, #3
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d007      	beq.n	80093a2 <USART_LINCmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1074
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2280      	movs	r2, #128	; 0x80
 8009398:	01d2      	lsls	r2, r2, #7
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	605a      	str	r2, [r3, #4]
 80093a0:	e005      	b.n	80093ae <USART_LINCmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1079
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	4b03      	ldr	r3, [pc, #12]	; (80093b4 <USART_LINCmd+0x38>)
 80093a8:	401a      	ands	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1081
  }
}
 80093ae:	46bd      	mov	sp, r7
 80093b0:	b002      	add	sp, #8
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	ffffbfff 	.word	0xffffbfff

080093b8 <USART_HalfDuplexCmd>:
USART_HalfDuplexCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1122
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	1c0a      	adds	r2, r1, #0
 80093c2:	1cfb      	adds	r3, r7, #3
 80093c4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1127
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80093c6:	1cfb      	adds	r3, r7, #3
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d006      	beq.n	80093dc <USART_HalfDuplexCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1130
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	2208      	movs	r2, #8
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	609a      	str	r2, [r3, #8]
 80093da:	e007      	b.n	80093ec <USART_HalfDuplexCmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1135
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	2208      	movs	r2, #8
 80093e2:	1c19      	adds	r1, r3, #0
 80093e4:	4391      	bics	r1, r2
 80093e6:	1c0a      	adds	r2, r1, #0
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1137
  }
}
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b002      	add	sp, #8
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	46c0      	nop			; (mov r8, r8)

080093f4 <USART_SetGuardTime>:
USART_SetGuardTime():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1202
  * @param  USARTx: where x can be 1 to select the USART peripheral.
  * @param  USART_GuardTime: specifies the guard time.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	1c0a      	adds	r2, r1, #0
 80093fe:	1cfb      	adds	r3, r7, #3
 8009400:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1207
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	8a1b      	ldrh	r3, [r3, #16]
 8009406:	b29a      	uxth	r2, r3
 8009408:	23ff      	movs	r3, #255	; 0xff
 800940a:	4013      	ands	r3, r2
 800940c:	b29a      	uxth	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1209
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	8a1b      	ldrh	r3, [r3, #16]
 8009416:	b29a      	uxth	r2, r3
 8009418:	1cfb      	adds	r3, r7, #3
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	b29b      	uxth	r3, r3
 800941e:	021b      	lsls	r3, r3, #8
 8009420:	b29b      	uxth	r3, r3
 8009422:	4313      	orrs	r3, r2
 8009424:	b29a      	uxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1210
}
 800942a:	46bd      	mov	sp, r7
 800942c:	b002      	add	sp, #8
 800942e:	bd80      	pop	{r7, pc}

08009430 <USART_SmartCardCmd>:
USART_SmartCardCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1220
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	1c0a      	adds	r2, r1, #0
 800943a:	1cfb      	adds	r3, r7, #3
 800943c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1224
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800943e:	1cfb      	adds	r3, r7, #3
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d006      	beq.n	8009454 <USART_SmartCardCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1227
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	2220      	movs	r2, #32
 800944c:	431a      	orrs	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	609a      	str	r2, [r3, #8]
 8009452:	e007      	b.n	8009464 <USART_SmartCardCmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1232
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	2220      	movs	r2, #32
 800945a:	1c19      	adds	r1, r3, #0
 800945c:	4391      	bics	r1, r2
 800945e:	1c0a      	adds	r2, r1, #0
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1234
  }
}
 8009464:	46bd      	mov	sp, r7
 8009466:	b002      	add	sp, #8
 8009468:	bd80      	pop	{r7, pc}
 800946a:	46c0      	nop			; (mov r8, r8)

0800946c <USART_SmartCardNACKCmd>:
USART_SmartCardNACKCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1244
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	1c0a      	adds	r2, r1, #0
 8009476:	1cfb      	adds	r3, r7, #3
 8009478:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1248
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800947a:	1cfb      	adds	r3, r7, #3
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d006      	beq.n	8009490 <USART_SmartCardNACKCmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1251
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2210      	movs	r2, #16
 8009488:	431a      	orrs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	609a      	str	r2, [r3, #8]
 800948e:	e007      	b.n	80094a0 <USART_SmartCardNACKCmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1256
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	2210      	movs	r2, #16
 8009496:	1c19      	adds	r1, r3, #0
 8009498:	4391      	bics	r1, r2
 800949a:	1c0a      	adds	r2, r1, #0
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1258
  }
}
 80094a0:	46bd      	mov	sp, r7
 80094a2:	b002      	add	sp, #8
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	46c0      	nop			; (mov r8, r8)

080094a8 <USART_SetAutoRetryCount>:
USART_SetAutoRetryCount():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1267
  * @param  USARTx: where x can be 1 to select the USART peripheral.
  * @param  USART_AutoCount: specifies the Smart Card auto retry count.
  * @retval None
  */
void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
{    
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	1c0a      	adds	r2, r1, #0
 80094b2:	1cfb      	adds	r3, r7, #3
 80094b4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1272
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <USART_SetAutoRetryCount+0x30>)
 80094bc:	401a      	ands	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1274
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	1cfb      	adds	r3, r7, #3
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	045b      	lsls	r3, r3, #17
 80094cc:	431a      	orrs	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1275
}
 80094d2:	46bd      	mov	sp, r7
 80094d4:	b002      	add	sp, #8
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	fff1ffff 	.word	0xfff1ffff

080094dc <USART_SetBlockLength>:
USART_SetBlockLength():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1284
  * @param  USARTx: where x can be 1 to select the USART peripheral.
  * @param  USART_BlockLength: specifies the Smart Card block length.
  * @retval None
  */
void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
{    
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	1c0a      	adds	r2, r1, #0
 80094e6:	1cfb      	adds	r3, r7, #3
 80094e8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1289
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	0a1a      	lsrs	r2, r3, #8
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1291
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	695a      	ldr	r2, [r3, #20]
 80094fa:	1cfb      	adds	r3, r7, #3
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	061b      	lsls	r3, r3, #24
 8009500:	431a      	orrs	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1292
}
 8009506:	46bd      	mov	sp, r7
 8009508:	b002      	add	sp, #8
 800950a:	bd80      	pop	{r7, pc}

0800950c <USART_IrDAConfig>:
USART_IrDAConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1346
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1351
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	2204      	movs	r2, #4
 800951c:	1c19      	adds	r1, r3, #0
 800951e:	4391      	bics	r1, r2
 8009520:	1c0a      	adds	r2, r1, #0
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1352
  USARTx->CR3 |= USART_IrDAMode;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689a      	ldr	r2, [r3, #8]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1353
}
 8009532:	46bd      	mov	sp, r7
 8009534:	b002      	add	sp, #8
 8009536:	bd80      	pop	{r7, pc}

08009538 <USART_IrDACmd>:
USART_IrDACmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1363
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	1c0a      	adds	r2, r1, #0
 8009542:	1cfb      	adds	r3, r7, #3
 8009544:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1368
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009546:	1cfb      	adds	r3, r7, #3
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d006      	beq.n	800955c <USART_IrDACmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1371
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2202      	movs	r2, #2
 8009554:	431a      	orrs	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	609a      	str	r2, [r3, #8]
 800955a:	e007      	b.n	800956c <USART_IrDACmd+0x34>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1376
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2202      	movs	r2, #2
 8009562:	1c19      	adds	r1, r3, #0
 8009564:	4391      	bics	r1, r2
 8009566:	1c0a      	adds	r2, r1, #0
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1378
  }
}
 800956c:	46bd      	mov	sp, r7
 800956e:	b002      	add	sp, #8
 8009570:	bd80      	pop	{r7, pc}
 8009572:	46c0      	nop			; (mov r8, r8)

08009574 <USART_DECmd>:
USART_DECmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1420
  * @param  NewState: new state of the driver enable mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	1c0a      	adds	r2, r1, #0
 800957e:	1cfb      	adds	r3, r7, #3
 8009580:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1424
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009582:	1cfb      	adds	r3, r7, #3
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d007      	beq.n	800959a <USART_DECmd+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1427
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2280      	movs	r2, #128	; 0x80
 8009590:	01d2      	lsls	r2, r2, #7
 8009592:	431a      	orrs	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	609a      	str	r2, [r3, #8]
 8009598:	e005      	b.n	80095a6 <USART_DECmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1432
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689a      	ldr	r2, [r3, #8]
 800959e:	4b03      	ldr	r3, [pc, #12]	; (80095ac <USART_DECmd+0x38>)
 80095a0:	401a      	ands	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1434
  }
}
 80095a6:	46bd      	mov	sp, r7
 80095a8:	b002      	add	sp, #8
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	ffffbfff 	.word	0xffffbfff

080095b0 <USART_DEPolarityConfig>:
USART_DEPolarityConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1446
  *            @arg USART_DEPolarity_Low
  *            @arg USART_DEPolarity_High
  * @retval None
  */
void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1451
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	689a      	ldr	r2, [r3, #8]
 80095be:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <USART_DEPolarityConfig+0x28>)
 80095c0:	401a      	ands	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1452
  USARTx->CR3 |= USART_DEPolarity;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	689a      	ldr	r2, [r3, #8]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	431a      	orrs	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1453
}
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b002      	add	sp, #8
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	ffff7fff 	.word	0xffff7fff

080095dc <USART_SetDEAssertionTime>:
USART_SetDEAssertionTime():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1463
  * @param  USART_DEAssertionTime: specifies the time between the activation of
  *         the DE signal and the beginning of the start bit
  * @retval None
  */
void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1469
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <USART_SetDEAssertionTime+0x2c>)
 80095ec:	401a      	ands	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1471
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	055b      	lsls	r3, r3, #21
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1472
}
 8009600:	46bd      	mov	sp, r7
 8009602:	b002      	add	sp, #8
 8009604:	bd80      	pop	{r7, pc}
 8009606:	46c0      	nop			; (mov r8, r8)
 8009608:	fc1fffff 	.word	0xfc1fffff

0800960c <USART_SetDEDeassertionTime>:
USART_SetDEDeassertionTime():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1482
  * @param  USART_DeassertionTime: specifies the time between the middle of the last 
  *         stop bit in a transmitted message and the de-activation of the DE signal
  * @retval None
  */
void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1488
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	4b07      	ldr	r3, [pc, #28]	; (8009638 <USART_SetDEDeassertionTime+0x2c>)
 800961c:	401a      	ands	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1490
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	041b      	lsls	r3, r3, #16
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1491
}
 8009630:	46bd      	mov	sp, r7
 8009632:	b002      	add	sp, #8
 8009634:	bd80      	pop	{r7, pc}
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	ffe0ffff 	.word	0xffe0ffff

0800963c <USART_DMACmd>:
USART_DMACmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1528
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	1dfb      	adds	r3, r7, #7
 8009648:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1534
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800964a:	1dfb      	adds	r3, r7, #7
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d006      	beq.n	8009660 <USART_DMACmd+0x24>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1538
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	431a      	orrs	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	609a      	str	r2, [r3, #8]
 800965e:	e006      	b.n	800966e <USART_DMACmd+0x32>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1544
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	43d2      	mvns	r2, r2
 8009668:	401a      	ands	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1546
  }
}
 800966e:	46bd      	mov	sp, r7
 8009670:	b004      	add	sp, #16
 8009672:	bd80      	pop	{r7, pc}

08009674 <USART_DMAReceptionErrorConfig>:
USART_DMAReceptionErrorConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1560
  *            @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
  *                                           reception error is asserted.
  * @retval None
  */
void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1566
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689a      	ldr	r2, [r3, #8]
 8009682:	4b06      	ldr	r3, [pc, #24]	; (800969c <USART_DMAReceptionErrorConfig+0x28>)
 8009684:	401a      	ands	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1568
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689a      	ldr	r2, [r3, #8]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	431a      	orrs	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1569
}
 8009696:	46bd      	mov	sp, r7
 8009698:	b002      	add	sp, #8
 800969a:	bd80      	pop	{r7, pc}
 800969c:	ffffdfff 	.word	0xffffdfff

080096a0 <USART_ITConfig>:
USART_ITConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1692
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	1dfb      	adds	r3, r7, #7
 80096ac:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1693
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	61bb      	str	r3, [r7, #24]
 80096b2:	2300      	movs	r3, #0
 80096b4:	617b      	str	r3, [r7, #20]
 80096b6:	2300      	movs	r3, #0
 80096b8:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1694
  uint32_t usartxbase = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	61fb      	str	r3, [r7, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1700
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	61fb      	str	r3, [r7, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1703
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	61bb      	str	r3, [r7, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1706
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	23ff      	movs	r3, #255	; 0xff
 80096d0:	4013      	ands	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1707
  itmask = (((uint32_t)0x01) << itpos);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2201      	movs	r2, #1
 80096d8:	1c11      	adds	r1, r2, #0
 80096da:	4099      	lsls	r1, r3
 80096dc:	1c0b      	adds	r3, r1, #0
 80096de:	613b      	str	r3, [r7, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1709
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d103      	bne.n	80096ee <USART_ITConfig+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1711
  {
    usartxbase += 0x04;
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	3304      	adds	r3, #4
 80096ea:	61fb      	str	r3, [r7, #28]
 80096ec:	e005      	b.n	80096fa <USART_ITConfig+0x5a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1713
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d102      	bne.n	80096fa <USART_ITConfig+0x5a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1715
  {
    usartxbase += 0x08;
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	3308      	adds	r3, #8
 80096f8:	61fb      	str	r3, [r7, #28]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1720
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80096fa:	1dfb      	adds	r3, r7, #7
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d006      	beq.n	8009710 <USART_ITConfig+0x70>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1722
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	6811      	ldr	r1, [r2, #0]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	430a      	orrs	r2, r1
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	e006      	b.n	800971e <USART_ITConfig+0x7e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1726
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	6812      	ldr	r2, [r2, #0]
 8009716:	6939      	ldr	r1, [r7, #16]
 8009718:	43c9      	mvns	r1, r1
 800971a:	400a      	ands	r2, r1
 800971c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1728
  }
}
 800971e:	46bd      	mov	sp, r7
 8009720:	b008      	add	sp, #32
 8009722:	bd80      	pop	{r7, pc}

08009724 <USART_RequestCmd>:
USART_RequestCmd():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1745
  * @param  NewState: new state of the DMA interface when reception error occurs.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	1dfb      	adds	r3, r7, #7
 8009730:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1751
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8009732:	1dfb      	adds	r3, r7, #7
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d009      	beq.n	800974e <USART_RequestCmd+0x2a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1755
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8b1b      	ldrh	r3, [r3, #24]
 800973e:	b29a      	uxth	r2, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	b29b      	uxth	r3, r3
 8009744:	4313      	orrs	r3, r2
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	831a      	strh	r2, [r3, #24]
 800974c:	e00a      	b.n	8009764 <USART_RequestCmd+0x40>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1761
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8b1b      	ldrh	r3, [r3, #24]
 8009752:	b29b      	uxth	r3, r3
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	b292      	uxth	r2, r2
 8009758:	43d2      	mvns	r2, r2
 800975a:	b292      	uxth	r2, r2
 800975c:	4013      	ands	r3, r2
 800975e:	b29a      	uxth	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	831a      	strh	r2, [r3, #24]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1763
  }
}
 8009764:	46bd      	mov	sp, r7
 8009766:	b004      	add	sp, #16
 8009768:	bd80      	pop	{r7, pc}
 800976a:	46c0      	nop			; (mov r8, r8)

0800976c <USART_OverrunDetectionConfig>:
USART_OverrunDetectionConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1777
  *            @arg USART_OVRDetection_Disable: OVR error detection disabled when
  *                                             the USART OVR error is asserted.
  * @retval None
  */
void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1783
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689a      	ldr	r2, [r3, #8]
 800977a:	4b06      	ldr	r3, [pc, #24]	; (8009794 <USART_OverrunDetectionConfig+0x28>)
 800977c:	401a      	ands	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1785
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	689a      	ldr	r2, [r3, #8]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	431a      	orrs	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1786
}
 800978e:	46bd      	mov	sp, r7
 8009790:	b002      	add	sp, #8
 8009792:	bd80      	pop	{r7, pc}
 8009794:	ffffefff 	.word	0xffffefff

08009798 <USART_GetFlagStatus>:
USART_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1818
  *            @arg USART_FLAG_FE:  Framing Error flag.
  *            @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1819
  FlagStatus bitstatus = RESET;
 80097a2:	1c3b      	adds	r3, r7, #0
 80097a4:	330f      	adds	r3, #15
 80097a6:	2200      	movs	r2, #0
 80097a8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1824
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4013      	ands	r3, r2
 80097b2:	d004      	beq.n	80097be <USART_GetFlagStatus+0x26>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1826
  {
    bitstatus = SET;
 80097b4:	1c3b      	adds	r3, r7, #0
 80097b6:	330f      	adds	r3, #15
 80097b8:	2201      	movs	r2, #1
 80097ba:	701a      	strb	r2, [r3, #0]
 80097bc:	e003      	b.n	80097c6 <USART_GetFlagStatus+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1830
  }
  else
  {
    bitstatus = RESET;
 80097be:	1c3b      	adds	r3, r7, #0
 80097c0:	330f      	adds	r3, #15
 80097c2:	2200      	movs	r2, #0
 80097c4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1832
  }
  return bitstatus;
 80097c6:	1c3b      	adds	r3, r7, #0
 80097c8:	330f      	adds	r3, #15
 80097ca:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1833
}
 80097cc:	1c18      	adds	r0, r3, #0
 80097ce:	46bd      	mov	sp, r7
 80097d0:	b004      	add	sp, #16
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USART_ClearFlag>:
USART_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1866
  * @note     SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
  *           (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1871
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1872
}
 80097e4:	46bd      	mov	sp, r7
 80097e6:	b002      	add	sp, #8
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	46c0      	nop			; (mov r8, r8)

080097ec <USART_GetITStatus>:
USART_GetITStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1896
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1897
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	60fb      	str	r3, [r7, #12]
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	2300      	movs	r3, #0
 8009800:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1898
  ITStatus bitstatus = RESET;
 8009802:	1c3b      	adds	r3, r7, #0
 8009804:	3313      	adds	r3, #19
 8009806:	2200      	movs	r2, #0
 8009808:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1904
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	b29b      	uxth	r3, r3
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	b29b      	uxth	r3, r3
 8009812:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1906
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	23ff      	movs	r3, #255	; 0xff
 8009818:	4013      	ands	r3, r2
 800981a:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1907
  itmask = (uint32_t)0x01 << itmask;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2201      	movs	r2, #1
 8009820:	1c11      	adds	r1, r2, #0
 8009822:	4099      	lsls	r1, r3
 8009824:	1c0b      	adds	r3, r1, #0
 8009826:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1909
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d105      	bne.n	800983a <USART_GetITStatus+0x4e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1911
  {
    itmask &= USARTx->CR1;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	4013      	ands	r3, r2
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e00d      	b.n	8009856 <USART_GetITStatus+0x6a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1913
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d105      	bne.n	800984c <USART_GetITStatus+0x60>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1915
  {
    itmask &= USARTx->CR2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	4013      	ands	r3, r2
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e004      	b.n	8009856 <USART_GetITStatus+0x6a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1919
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	4013      	ands	r3, r2
 8009854:	617b      	str	r3, [r7, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1922
  }
  
  bitpos = USART_IT >> 0x10;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	0c1b      	lsrs	r3, r3, #16
 800985a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1923
  bitpos = (uint32_t)0x01 << bitpos;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2201      	movs	r2, #1
 8009860:	1c11      	adds	r1, r2, #0
 8009862:	4099      	lsls	r1, r3
 8009864:	1c0b      	adds	r3, r1, #0
 8009866:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1924
  bitpos &= USARTx->ISR;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	69da      	ldr	r2, [r3, #28]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4013      	ands	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1925
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <USART_GetITStatus+0x9c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1925 (discriminator 1)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <USART_GetITStatus+0x9c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1927
  {
    bitstatus = SET;
 800987e:	1c3b      	adds	r3, r7, #0
 8009880:	3313      	adds	r3, #19
 8009882:	2201      	movs	r2, #1
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	e003      	b.n	8009890 <USART_GetITStatus+0xa4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1931
  }
  else
  {
    bitstatus = RESET;
 8009888:	1c3b      	adds	r3, r7, #0
 800988a:	3313      	adds	r3, #19
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1934
  }
  
  return bitstatus;  
 8009890:	1c3b      	adds	r3, r7, #0
 8009892:	3313      	adds	r3, #19
 8009894:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1935
}
 8009896:	1c18      	adds	r0, r3, #0
 8009898:	46bd      	mov	sp, r7
 800989a:	b006      	add	sp, #24
 800989c:	bd80      	pop	{r7, pc}
 800989e:	46c0      	nop			; (mov r8, r8)

080098a0 <USART_ClearITPendingBit>:
USART_ClearITPendingBit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1967
  *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
  *           USART_RQR (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1968
  uint32_t bitpos = 0, itmask = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	2300      	movs	r3, #0
 80098b0:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1973
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	0c1b      	lsrs	r3, r3, #16
 80098b6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1974
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2201      	movs	r2, #1
 80098bc:	1c11      	adds	r1, r2, #0
 80098be:	4099      	lsls	r1, r3
 80098c0:	1c0b      	adds	r3, r1, #0
 80098c2:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1975
  USARTx->ICR = (uint32_t)itmask;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	621a      	str	r2, [r3, #32]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c:1976
}
 80098ca:	46bd      	mov	sp, r7
 80098cc:	b004      	add	sp, #16
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <WWDG_DeInit>:
WWDG_DeInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:133
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:134
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 80098d4:	2380      	movs	r3, #128	; 0x80
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	1c18      	adds	r0, r3, #0
 80098da:	2101      	movs	r1, #1
 80098dc:	f7fa ffce 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:135
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80098e0:	2380      	movs	r3, #128	; 0x80
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	1c18      	adds	r0, r3, #0
 80098e6:	2100      	movs	r1, #0
 80098e8:	f7fa ffc8 	bl	800487c <RCC_APB1PeriphResetCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:136
}
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <WWDG_SetPrescaler>:
WWDG_SetPrescaler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:149
  *            @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *            @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:150
  uint32_t tmpreg = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:154
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 80098fc:	4b07      	ldr	r3, [pc, #28]	; (800991c <WWDG_SetPrescaler+0x2c>)
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	4b07      	ldr	r3, [pc, #28]	; (8009920 <WWDG_SetPrescaler+0x30>)
 8009902:	4013      	ands	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:156
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4313      	orrs	r3, r2
 800990c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:158
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800990e:	4b03      	ldr	r3, [pc, #12]	; (800991c <WWDG_SetPrescaler+0x2c>)
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:159
}
 8009914:	46bd      	mov	sp, r7
 8009916:	b004      	add	sp, #16
 8009918:	bd80      	pop	{r7, pc}
 800991a:	46c0      	nop			; (mov r8, r8)
 800991c:	40002c00 	.word	0x40002c00
 8009920:	fffffe7f 	.word	0xfffffe7f

08009924 <WWDG_SetWindowValue>:
WWDG_SetWindowValue():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:168
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *          This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	1c02      	adds	r2, r0, #0
 800992c:	1dfb      	adds	r3, r7, #7
 800992e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:169
  __IO uint32_t tmpreg = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:175

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <WWDG_SetWindowValue+0x34>)
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	227f      	movs	r2, #127	; 0x7f
 800993a:	4393      	bics	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:178

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800993e:	1dfb      	adds	r3, r7, #7
 8009940:	781a      	ldrb	r2, [r3, #0]
 8009942:	237f      	movs	r3, #127	; 0x7f
 8009944:	401a      	ands	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:181

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800994c:	4b02      	ldr	r3, [pc, #8]	; (8009958 <WWDG_SetWindowValue+0x34>)
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:182
}
 8009952:	46bd      	mov	sp, r7
 8009954:	b004      	add	sp, #16
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40002c00 	.word	0x40002c00

0800995c <WWDG_EnableIT>:
WWDG_EnableIT():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:191
  * @note   Once enabled this interrupt cannot be disabled except by a system reset. 
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:192
  WWDG->CFR |= WWDG_CFR_EWI;
 8009960:	4b04      	ldr	r3, [pc, #16]	; (8009974 <WWDG_EnableIT+0x18>)
 8009962:	4a04      	ldr	r2, [pc, #16]	; (8009974 <WWDG_EnableIT+0x18>)
 8009964:	6852      	ldr	r2, [r2, #4]
 8009966:	2180      	movs	r1, #128	; 0x80
 8009968:	0089      	lsls	r1, r1, #2
 800996a:	430a      	orrs	r2, r1
 800996c:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:193
}
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	40002c00 	.word	0x40002c00

08009978 <WWDG_SetCounter>:
WWDG_SetCounter():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:203
  *          This parameter must be a number between 0x40 and 0x7F (to prevent 
  *          generating an immediate reset).
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	1c02      	adds	r2, r0, #0
 8009980:	1dfb      	adds	r3, r7, #7
 8009982:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:208
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8009984:	4b04      	ldr	r3, [pc, #16]	; (8009998 <WWDG_SetCounter+0x20>)
 8009986:	1dfa      	adds	r2, r7, #7
 8009988:	7811      	ldrb	r1, [r2, #0]
 800998a:	227f      	movs	r2, #127	; 0x7f
 800998c:	400a      	ands	r2, r1
 800998e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:209
}
 8009990:	46bd      	mov	sp, r7
 8009992:	b002      	add	sp, #8
 8009994:	bd80      	pop	{r7, pc}
 8009996:	46c0      	nop			; (mov r8, r8)
 8009998:	40002c00 	.word	0x40002c00

0800999c <WWDG_Enable>:
WWDG_Enable():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:235
  *          This parameter must be a number between 0x40 and 0x7F (to prevent 
  *          generating an immediate reset).
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	1c02      	adds	r2, r0, #0
 80099a4:	1dfb      	adds	r3, r7, #7
 80099a6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:238
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 80099a8:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <WWDG_Enable+0x24>)
 80099aa:	1dfa      	adds	r2, r7, #7
 80099ac:	7812      	ldrb	r2, [r2, #0]
 80099ae:	2180      	movs	r1, #128	; 0x80
 80099b0:	4249      	negs	r1, r1
 80099b2:	430a      	orrs	r2, r1
 80099b4:	b2d2      	uxtb	r2, r2
 80099b6:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:239
}
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b002      	add	sp, #8
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	40002c00 	.word	0x40002c00

080099c4 <WWDG_GetFlagStatus>:
WWDG_GetFlagStatus():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:263
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET).
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:264
  FlagStatus bitstatus = RESET;
 80099ca:	1dfb      	adds	r3, r7, #7
 80099cc:	2200      	movs	r2, #0
 80099ce:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:266
    
  if ((WWDG->SR) != (uint32_t)RESET)
 80099d0:	4b08      	ldr	r3, [pc, #32]	; (80099f4 <WWDG_GetFlagStatus+0x30>)
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <WWDG_GetFlagStatus+0x1c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:268
  {
    bitstatus = SET;
 80099d8:	1dfb      	adds	r3, r7, #7
 80099da:	2201      	movs	r2, #1
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	e002      	b.n	80099e6 <WWDG_GetFlagStatus+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:272
  }
  else
  {
    bitstatus = RESET;
 80099e0:	1dfb      	adds	r3, r7, #7
 80099e2:	2200      	movs	r2, #0
 80099e4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:274
  }
  return bitstatus;
 80099e6:	1dfb      	adds	r3, r7, #7
 80099e8:	781b      	ldrb	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:275
}
 80099ea:	1c18      	adds	r0, r3, #0
 80099ec:	46bd      	mov	sp, r7
 80099ee:	b002      	add	sp, #8
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	46c0      	nop			; (mov r8, r8)
 80099f4:	40002c00 	.word	0x40002c00

080099f8 <WWDG_ClearFlag>:
WWDG_ClearFlag():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:283
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:284
  WWDG->SR = (uint32_t)RESET;
 80099fc:	4b02      	ldr	r3, [pc, #8]	; (8009a08 <WWDG_ClearFlag+0x10>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c:285
}
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	46c0      	nop			; (mov r8, r8)
 8009a08:	40002c00 	.word	0x40002c00

08009a0c <SystemInit>:
SystemInit():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:160
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:162
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009a10:	4b1b      	ldr	r3, [pc, #108]	; (8009a80 <SystemInit+0x74>)
 8009a12:	4a1b      	ldr	r2, [pc, #108]	; (8009a80 <SystemInit+0x74>)
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	2101      	movs	r1, #1
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:165

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8009a1c:	4b18      	ldr	r3, [pc, #96]	; (8009a80 <SystemInit+0x74>)
 8009a1e:	4a18      	ldr	r2, [pc, #96]	; (8009a80 <SystemInit+0x74>)
 8009a20:	6851      	ldr	r1, [r2, #4]
 8009a22:	4a18      	ldr	r2, [pc, #96]	; (8009a84 <SystemInit+0x78>)
 8009a24:	400a      	ands	r2, r1
 8009a26:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:168
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <SystemInit+0x74>)
 8009a2a:	4a15      	ldr	r2, [pc, #84]	; (8009a80 <SystemInit+0x74>)
 8009a2c:	6811      	ldr	r1, [r2, #0]
 8009a2e:	4a16      	ldr	r2, [pc, #88]	; (8009a88 <SystemInit+0x7c>)
 8009a30:	400a      	ands	r2, r1
 8009a32:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:171

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009a34:	4b12      	ldr	r3, [pc, #72]	; (8009a80 <SystemInit+0x74>)
 8009a36:	4a12      	ldr	r2, [pc, #72]	; (8009a80 <SystemInit+0x74>)
 8009a38:	6811      	ldr	r1, [r2, #0]
 8009a3a:	4a14      	ldr	r2, [pc, #80]	; (8009a8c <SystemInit+0x80>)
 8009a3c:	400a      	ands	r2, r1
 8009a3e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:174

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8009a40:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <SystemInit+0x74>)
 8009a42:	4a0f      	ldr	r2, [pc, #60]	; (8009a80 <SystemInit+0x74>)
 8009a44:	6851      	ldr	r1, [r2, #4]
 8009a46:	4a12      	ldr	r2, [pc, #72]	; (8009a90 <SystemInit+0x84>)
 8009a48:	400a      	ands	r2, r1
 8009a4a:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:177

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <SystemInit+0x74>)
 8009a4e:	4a0c      	ldr	r2, [pc, #48]	; (8009a80 <SystemInit+0x74>)
 8009a50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a52:	210f      	movs	r1, #15
 8009a54:	438a      	bics	r2, r1
 8009a56:	62da      	str	r2, [r3, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:180

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8009a58:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <SystemInit+0x74>)
 8009a5a:	4a09      	ldr	r2, [pc, #36]	; (8009a80 <SystemInit+0x74>)
 8009a5c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009a5e:	4a0d      	ldr	r2, [pc, #52]	; (8009a94 <SystemInit+0x88>)
 8009a60:	400a      	ands	r2, r1
 8009a62:	631a      	str	r2, [r3, #48]	; 0x30
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:183

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8009a64:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <SystemInit+0x74>)
 8009a66:	4a06      	ldr	r2, [pc, #24]	; (8009a80 <SystemInit+0x74>)
 8009a68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	438a      	bics	r2, r1
 8009a6e:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:186

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009a70:	4b03      	ldr	r3, [pc, #12]	; (8009a80 <SystemInit+0x74>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:189

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8009a76:	f000 f877 	bl	8009b68 <SetSysClock>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:190
}
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	40021000 	.word	0x40021000
 8009a84:	f8ffb80c 	.word	0xf8ffb80c
 8009a88:	fef6ffff 	.word	0xfef6ffff
 8009a8c:	fffbffff 	.word	0xfffbffff
 8009a90:	ffc0ffff 	.word	0xffc0ffff
 8009a94:	fffffeac 	.word	0xfffffeac

08009a98 <SystemCoreClockUpdate>:
SystemCoreClockUpdate():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:228
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:229
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60bb      	str	r3, [r7, #8]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	607b      	str	r3, [r7, #4]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	603b      	str	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:232

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009aae:	4b29      	ldr	r3, [pc, #164]	; (8009b54 <SystemCoreClockUpdate+0xbc>)
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	230c      	movs	r3, #12
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:234
  
  switch (tmp)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d007      	beq.n	8009ace <SystemCoreClockUpdate+0x36>
 8009abe:	2b08      	cmp	r3, #8
 8009ac0:	d009      	beq.n	8009ad6 <SystemCoreClockUpdate+0x3e>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d130      	bne.n	8009b28 <SystemCoreClockUpdate+0x90>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:237
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8009ac6:	4b24      	ldr	r3, [pc, #144]	; (8009b58 <SystemCoreClockUpdate+0xc0>)
 8009ac8:	4a24      	ldr	r2, [pc, #144]	; (8009b5c <SystemCoreClockUpdate+0xc4>)
 8009aca:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:238
      break;
 8009acc:	e030      	b.n	8009b30 <SystemCoreClockUpdate+0x98>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:240
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8009ace:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <SystemCoreClockUpdate+0xc0>)
 8009ad0:	4a22      	ldr	r2, [pc, #136]	; (8009b5c <SystemCoreClockUpdate+0xc4>)
 8009ad2:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:241
      break;
 8009ad4:	e02c      	b.n	8009b30 <SystemCoreClockUpdate+0x98>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:244
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8009ad6:	4b1f      	ldr	r3, [pc, #124]	; (8009b54 <SystemCoreClockUpdate+0xbc>)
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	23f0      	movs	r3, #240	; 0xf0
 8009adc:	039b      	lsls	r3, r3, #14
 8009ade:	4013      	ands	r3, r2
 8009ae0:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:245
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8009ae2:	4b1c      	ldr	r3, [pc, #112]	; (8009b54 <SystemCoreClockUpdate+0xbc>)
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	2380      	movs	r3, #128	; 0x80
 8009ae8:	025b      	lsls	r3, r3, #9
 8009aea:	4013      	ands	r3, r2
 8009aec:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:246
      pllmull = ( pllmull >> 18) + 2;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	0c9b      	lsrs	r3, r3, #18
 8009af2:	3302      	adds	r3, #2
 8009af4:	60bb      	str	r3, [r7, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:248
      
      if (pllsource == 0x00)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d105      	bne.n	8009b08 <SystemCoreClockUpdate+0x70>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:251
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	4a18      	ldr	r2, [pc, #96]	; (8009b60 <SystemCoreClockUpdate+0xc8>)
 8009b00:	435a      	muls	r2, r3
 8009b02:	4b15      	ldr	r3, [pc, #84]	; (8009b58 <SystemCoreClockUpdate+0xc0>)
 8009b04:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:259
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 8009b06:	e013      	b.n	8009b30 <SystemCoreClockUpdate+0x98>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:255
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8009b08:	4b12      	ldr	r3, [pc, #72]	; (8009b54 <SystemCoreClockUpdate+0xbc>)
 8009b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0c:	230f      	movs	r3, #15
 8009b0e:	4013      	ands	r3, r2
 8009b10:	3301      	adds	r3, #1
 8009b12:	603b      	str	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:257
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8009b14:	4811      	ldr	r0, [pc, #68]	; (8009b5c <SystemCoreClockUpdate+0xc4>)
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	f7f6 fb4e 	bl	80001b8 <__aeabi_uidiv>
 8009b1c:	1c03      	adds	r3, r0, #0
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	435a      	muls	r2, r3
 8009b22:	4b0d      	ldr	r3, [pc, #52]	; (8009b58 <SystemCoreClockUpdate+0xc0>)
 8009b24:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:259
      }      
      break;
 8009b26:	e003      	b.n	8009b30 <SystemCoreClockUpdate+0x98>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:261
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8009b28:	4b0b      	ldr	r3, [pc, #44]	; (8009b58 <SystemCoreClockUpdate+0xc0>)
 8009b2a:	4a0c      	ldr	r2, [pc, #48]	; (8009b5c <SystemCoreClockUpdate+0xc4>)
 8009b2c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:262
      break;
 8009b2e:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:266
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8009b30:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <SystemCoreClockUpdate+0xbc>)
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	23f0      	movs	r3, #240	; 0xf0
 8009b36:	4013      	ands	r3, r2
 8009b38:	091b      	lsrs	r3, r3, #4
 8009b3a:	4a0a      	ldr	r2, [pc, #40]	; (8009b64 <SystemCoreClockUpdate+0xcc>)
 8009b3c:	5cd3      	ldrb	r3, [r2, r3]
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:268
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8009b42:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <SystemCoreClockUpdate+0xc0>)
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	40da      	lsrs	r2, r3
 8009b4a:	4b03      	ldr	r3, [pc, #12]	; (8009b58 <SystemCoreClockUpdate+0xc0>)
 8009b4c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:269
}
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	b004      	add	sp, #16
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	40021000 	.word	0x40021000
 8009b58:	20000024 	.word	0x20000024
 8009b5c:	007a1200 	.word	0x007a1200
 8009b60:	003d0900 	.word	0x003d0900
 8009b64:	20000028 	.word	0x20000028

08009b68 <SetSysClock>:
SetSysClock():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:280
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:281
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	607b      	str	r3, [r7, #4]
 8009b72:	2300      	movs	r3, #0
 8009b74:	603b      	str	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:285
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8009b76:	4b31      	ldr	r3, [pc, #196]	; (8009c3c <SetSysClock+0xd4>)
 8009b78:	4a30      	ldr	r2, [pc, #192]	; (8009c3c <SetSysClock+0xd4>)
 8009b7a:	6812      	ldr	r2, [r2, #0]
 8009b7c:	2180      	movs	r1, #128	; 0x80
 8009b7e:	0249      	lsls	r1, r1, #9
 8009b80:	430a      	orrs	r2, r1
 8009b82:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:290 (discriminator 1)
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009b84:	4b2d      	ldr	r3, [pc, #180]	; (8009c3c <SetSysClock+0xd4>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	2380      	movs	r3, #128	; 0x80
 8009b8a:	029b      	lsls	r3, r3, #10
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	603b      	str	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:291 (discriminator 1)
    StartUpCounter++;  
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3301      	adds	r3, #1
 8009b94:	607b      	str	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:292 (discriminator 1)
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <SetSysClock+0x3e>
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	23a0      	movs	r3, #160	; 0xa0
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d1ee      	bne.n	8009b84 <SetSysClock+0x1c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:294

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8009ba6:	4b25      	ldr	r3, [pc, #148]	; (8009c3c <SetSysClock+0xd4>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	2380      	movs	r3, #128	; 0x80
 8009bac:	029b      	lsls	r3, r3, #10
 8009bae:	4013      	ands	r3, r2
 8009bb0:	d002      	beq.n	8009bb8 <SetSysClock+0x50>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:296
  {
    HSEStatus = (uint32_t)0x01;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	603b      	str	r3, [r7, #0]
 8009bb6:	e001      	b.n	8009bbc <SetSysClock+0x54>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:300
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	603b      	str	r3, [r7, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:303
  }  

  if (HSEStatus == (uint32_t)0x01)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d138      	bne.n	8009c34 <SetSysClock+0xcc>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:306
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8009bc2:	4b1f      	ldr	r3, [pc, #124]	; (8009c40 <SetSysClock+0xd8>)
 8009bc4:	2211      	movs	r2, #17
 8009bc6:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:309
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009bc8:	4b1c      	ldr	r3, [pc, #112]	; (8009c3c <SetSysClock+0xd4>)
 8009bca:	4a1c      	ldr	r2, [pc, #112]	; (8009c3c <SetSysClock+0xd4>)
 8009bcc:	6852      	ldr	r2, [r2, #4]
 8009bce:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:312
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8009bd0:	4b1a      	ldr	r3, [pc, #104]	; (8009c3c <SetSysClock+0xd4>)
 8009bd2:	4a1a      	ldr	r2, [pc, #104]	; (8009c3c <SetSysClock+0xd4>)
 8009bd4:	6852      	ldr	r2, [r2, #4]
 8009bd6:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:315

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8009bd8:	4b18      	ldr	r3, [pc, #96]	; (8009c3c <SetSysClock+0xd4>)
 8009bda:	4a18      	ldr	r2, [pc, #96]	; (8009c3c <SetSysClock+0xd4>)
 8009bdc:	6851      	ldr	r1, [r2, #4]
 8009bde:	4a19      	ldr	r2, [pc, #100]	; (8009c44 <SetSysClock+0xdc>)
 8009be0:	400a      	ands	r2, r1
 8009be2:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:316
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <SetSysClock+0xd4>)
 8009be6:	4a15      	ldr	r2, [pc, #84]	; (8009c3c <SetSysClock+0xd4>)
 8009be8:	6852      	ldr	r2, [r2, #4]
 8009bea:	2188      	movs	r1, #136	; 0x88
 8009bec:	0349      	lsls	r1, r1, #13
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:319
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8009bf2:	4b12      	ldr	r3, [pc, #72]	; (8009c3c <SetSysClock+0xd4>)
 8009bf4:	4a11      	ldr	r2, [pc, #68]	; (8009c3c <SetSysClock+0xd4>)
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	2180      	movs	r1, #128	; 0x80
 8009bfa:	0449      	lsls	r1, r1, #17
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:322

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009c00:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:322 (discriminator 1)
 8009c02:	4b0e      	ldr	r3, [pc, #56]	; (8009c3c <SetSysClock+0xd4>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	2380      	movs	r3, #128	; 0x80
 8009c08:	049b      	lsls	r3, r3, #18
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	d0f9      	beq.n	8009c02 <SetSysClock+0x9a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:327
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009c0e:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <SetSysClock+0xd4>)
 8009c10:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <SetSysClock+0xd4>)
 8009c12:	6852      	ldr	r2, [r2, #4]
 8009c14:	2103      	movs	r1, #3
 8009c16:	438a      	bics	r2, r1
 8009c18:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:328
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8009c1a:	4b08      	ldr	r3, [pc, #32]	; (8009c3c <SetSysClock+0xd4>)
 8009c1c:	4a07      	ldr	r2, [pc, #28]	; (8009c3c <SetSysClock+0xd4>)
 8009c1e:	6852      	ldr	r2, [r2, #4]
 8009c20:	2102      	movs	r1, #2
 8009c22:	430a      	orrs	r2, r1
 8009c24:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:331

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8009c26:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:331 (discriminator 1)
 8009c28:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <SetSysClock+0xd4>)
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	230c      	movs	r3, #12
 8009c2e:	4013      	ands	r3, r2
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d1f9      	bne.n	8009c28 <SetSysClock+0xc0>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/CMSIS/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c:339
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 8009c34:	46bd      	mov	sp, r7
 8009c36:	b002      	add	sp, #8
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	46c0      	nop			; (mov r8, r8)
 8009c3c:	40021000 	.word	0x40021000
 8009c40:	40022000 	.word	0x40022000
 8009c44:	ffc0ffff 	.word	0xffc0ffff

08009c48 <pinConfig>:
pinConfig():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:79
/**
  * @brief  pinConfig Arduino pin configuration
  * @param  INPUT or OUTPUT and variations
  * @retval None
  */
static void pinConfig(uint16_t pin, uint16_t mode){
 8009c48:	b590      	push	{r4, r7, lr}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	1c0a      	adds	r2, r1, #0
 8009c50:	1dbb      	adds	r3, r7, #6
 8009c52:	1c01      	adds	r1, r0, #0
 8009c54:	8019      	strh	r1, [r3, #0]
 8009c56:	1d3b      	adds	r3, r7, #4
 8009c58:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:80
  uint16_t L_oldType = ArduinoPort[pin].PinMode; //Does the pin already configured
 8009c5a:	1dbb      	adds	r3, r7, #6
 8009c5c:	881a      	ldrh	r2, [r3, #0]
 8009c5e:	48b4      	ldr	r0, [pc, #720]	; (8009f30 <pinConfig+0x2e8>)
 8009c60:	2108      	movs	r1, #8
 8009c62:	1c13      	adds	r3, r2, #0
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	189b      	adds	r3, r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	18c3      	adds	r3, r0, r3
 8009c6c:	185b      	adds	r3, r3, r1
 8009c6e:	781a      	ldrb	r2, [r3, #0]
 8009c70:	1c3b      	adds	r3, r7, #0
 8009c72:	330a      	adds	r3, #10
 8009c74:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:81
  uint8_t L_setExtIt = 0;    //Do we have to set ExtIT
 8009c76:	1c3b      	adds	r3, r7, #0
 8009c78:	330f      	adds	r3, #15
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:82
  uint8_t L_resetExtIt = 0;  //Do we have to reset ExtIT
 8009c7e:	1c3b      	adds	r3, r7, #0
 8009c80:	330e      	adds	r3, #14
 8009c82:	2200      	movs	r2, #0
 8009c84:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:83
  uint8_t L_setTimer = 0;    //Do we have to set Timer for PWM mode
 8009c86:	1c3b      	adds	r3, r7, #0
 8009c88:	330d      	adds	r3, #13
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:84
  uint8_t L_resetTimer = 0;  //Do we have to reset Timer cause PWM mode no more used
 8009c8e:	1c3b      	adds	r3, r7, #0
 8009c90:	330c      	adds	r3, #12
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:86
  
  if(L_oldType == NOT_CONFIGURED) {
 8009c96:	1c3b      	adds	r3, r7, #0
 8009c98:	330a      	adds	r3, #10
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d150      	bne.n	8009d42 <pinConfig+0xfa>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:88
    //Enable GPIOx clock cause Pin has not already been configured
    if(ArduinoPort[pin].GPIOx == GPIOA ) {
 8009ca0:	1dbb      	adds	r3, r7, #6
 8009ca2:	881a      	ldrh	r2, [r3, #0]
 8009ca4:	49a2      	ldr	r1, [pc, #648]	; (8009f30 <pinConfig+0x2e8>)
 8009ca6:	1c13      	adds	r3, r2, #0
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	189b      	adds	r3, r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	18cb      	adds	r3, r1, r3
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	2390      	movs	r3, #144	; 0x90
 8009cb6:	05db      	lsls	r3, r3, #23
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d106      	bne.n	8009cca <pinConfig+0x82>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:89
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);      
 8009cbc:	2380      	movs	r3, #128	; 0x80
 8009cbe:	029b      	lsls	r3, r3, #10
 8009cc0:	1c18      	adds	r0, r3, #0
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	f7fa fd44 	bl	8004750 <RCC_AHBPeriphClockCmd>
 8009cc8:	e03b      	b.n	8009d42 <pinConfig+0xfa>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:90
    } else if(ArduinoPort[pin].GPIOx == GPIOB) {
 8009cca:	1dbb      	adds	r3, r7, #6
 8009ccc:	881a      	ldrh	r2, [r3, #0]
 8009cce:	4998      	ldr	r1, [pc, #608]	; (8009f30 <pinConfig+0x2e8>)
 8009cd0:	1c13      	adds	r3, r2, #0
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	189b      	adds	r3, r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	18cb      	adds	r3, r1, r3
 8009cda:	3304      	adds	r3, #4
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b95      	ldr	r3, [pc, #596]	; (8009f34 <pinConfig+0x2ec>)
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d106      	bne.n	8009cf2 <pinConfig+0xaa>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:91
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8009ce4:	2380      	movs	r3, #128	; 0x80
 8009ce6:	02db      	lsls	r3, r3, #11
 8009ce8:	1c18      	adds	r0, r3, #0
 8009cea:	2101      	movs	r1, #1
 8009cec:	f7fa fd30 	bl	8004750 <RCC_AHBPeriphClockCmd>
 8009cf0:	e027      	b.n	8009d42 <pinConfig+0xfa>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:92
    } else if(ArduinoPort[pin].GPIOx == GPIOC) {
 8009cf2:	1dbb      	adds	r3, r7, #6
 8009cf4:	881a      	ldrh	r2, [r3, #0]
 8009cf6:	498e      	ldr	r1, [pc, #568]	; (8009f30 <pinConfig+0x2e8>)
 8009cf8:	1c13      	adds	r3, r2, #0
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	189b      	adds	r3, r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	18cb      	adds	r3, r1, r3
 8009d02:	3304      	adds	r3, #4
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	4b8c      	ldr	r3, [pc, #560]	; (8009f38 <pinConfig+0x2f0>)
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d106      	bne.n	8009d1a <pinConfig+0xd2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:93
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8009d0c:	2380      	movs	r3, #128	; 0x80
 8009d0e:	031b      	lsls	r3, r3, #12
 8009d10:	1c18      	adds	r0, r3, #0
 8009d12:	2101      	movs	r1, #1
 8009d14:	f7fa fd1c 	bl	8004750 <RCC_AHBPeriphClockCmd>
 8009d18:	e013      	b.n	8009d42 <pinConfig+0xfa>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:94
    } else if(ArduinoPort[pin].GPIOx == GPIOF) {
 8009d1a:	1dbb      	adds	r3, r7, #6
 8009d1c:	881a      	ldrh	r2, [r3, #0]
 8009d1e:	4984      	ldr	r1, [pc, #528]	; (8009f30 <pinConfig+0x2e8>)
 8009d20:	1c13      	adds	r3, r2, #0
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	189b      	adds	r3, r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	18cb      	adds	r3, r1, r3
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4b83      	ldr	r3, [pc, #524]	; (8009f3c <pinConfig+0x2f4>)
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d000      	beq.n	8009d36 <pinConfig+0xee>
 8009d34:	e34b      	b.n	800a3ce <pinConfig+0x786>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:95
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8009d36:	2380      	movs	r3, #128	; 0x80
 8009d38:	03db      	lsls	r3, r3, #15
 8009d3a:	1c18      	adds	r0, r3, #0
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	f7fa fd07 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:101
    } else {
      //Error pin is not connected to STM32
      return;
    }
  }
  if((L_oldType & 0x0001) && !(mode & 0x0001) ) { 
 8009d42:	1c3b      	adds	r3, r7, #0
 8009d44:	330a      	adds	r3, #10
 8009d46:	881a      	ldrh	r2, [r3, #0]
 8009d48:	2301      	movs	r3, #1
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	d010      	beq.n	8009d70 <pinConfig+0x128>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:101 (discriminator 1)
 8009d4e:	1d3b      	adds	r3, r7, #4
 8009d50:	881a      	ldrh	r2, [r3, #0]
 8009d52:	2301      	movs	r3, #1
 8009d54:	4013      	ands	r3, r2
 8009d56:	d10b      	bne.n	8009d70 <pinConfig+0x128>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:103
    //Pin has already been configured as INPUT and OUTPUT config is requested
    if((pin == 2)||(pin == 3)) {
 8009d58:	1dbb      	adds	r3, r7, #6
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d003      	beq.n	8009d68 <pinConfig+0x120>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:103 (discriminator 1)
 8009d60:	1dbb      	adds	r3, r7, #6
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d103      	bne.n	8009d70 <pinConfig+0x128>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:104
      L_resetExtIt = 1; //Reset External Interrupt settings. Cause when pin2/3 are input, ExtIT is automatically configured. 
 8009d68:	1c3b      	adds	r3, r7, #0
 8009d6a:	330e      	adds	r3, #14
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:107
    }
  }
  if(!(L_oldType & 0x0001) && (mode & 0x0001) && (L_oldType != NOT_CONFIGURED)) { 
 8009d70:	1c3b      	adds	r3, r7, #0
 8009d72:	330a      	adds	r3, #10
 8009d74:	881a      	ldrh	r2, [r3, #0]
 8009d76:	2301      	movs	r3, #1
 8009d78:	4013      	ands	r3, r2
 8009d7a:	d125      	bne.n	8009dc8 <pinConfig+0x180>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:107 (discriminator 1)
 8009d7c:	1d3b      	adds	r3, r7, #4
 8009d7e:	881a      	ldrh	r2, [r3, #0]
 8009d80:	2301      	movs	r3, #1
 8009d82:	4013      	ands	r3, r2
 8009d84:	d020      	beq.n	8009dc8 <pinConfig+0x180>
 8009d86:	1c3b      	adds	r3, r7, #0
 8009d88:	330a      	adds	r3, #10
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01b      	beq.n	8009dc8 <pinConfig+0x180>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:109
    //Pin has already been configured as OUTPUT and INPUT config is requested
    if((pin == 3)||(pin == 5)||(pin == 6)||(pin == 9)||(pin == 10)||(pin == 11)) {
 8009d90:	1dbb      	adds	r3, r7, #6
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d013      	beq.n	8009dc0 <pinConfig+0x178>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:109 (discriminator 1)
 8009d98:	1dbb      	adds	r3, r7, #6
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	2b05      	cmp	r3, #5
 8009d9e:	d00f      	beq.n	8009dc0 <pinConfig+0x178>
 8009da0:	1dbb      	adds	r3, r7, #6
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	2b06      	cmp	r3, #6
 8009da6:	d00b      	beq.n	8009dc0 <pinConfig+0x178>
 8009da8:	1dbb      	adds	r3, r7, #6
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	2b09      	cmp	r3, #9
 8009dae:	d007      	beq.n	8009dc0 <pinConfig+0x178>
 8009db0:	1dbb      	adds	r3, r7, #6
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	2b0a      	cmp	r3, #10
 8009db6:	d003      	beq.n	8009dc0 <pinConfig+0x178>
 8009db8:	1dbb      	adds	r3, r7, #6
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	2b0b      	cmp	r3, #11
 8009dbe:	d103      	bne.n	8009dc8 <pinConfig+0x180>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:110
      L_resetTimer = 1; //Reset PWM timer settings.  This pins are dedicated to PWM when output. There are changed to INPUT.
 8009dc0:	1c3b      	adds	r3, r7, #0
 8009dc2:	330c      	adds	r3, #12
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:115
    }    
  }

  //What is the STM32 pin to configure regarding Arduino pin num. Get it from mapping from Arduino toSTM32
  GPIO_InitStructure.GPIO_Pin = ArduinoPort[pin].PinNum;
 8009dc8:	1dbb      	adds	r3, r7, #6
 8009dca:	881a      	ldrh	r2, [r3, #0]
 8009dcc:	4958      	ldr	r1, [pc, #352]	; (8009f30 <pinConfig+0x2e8>)
 8009dce:	1c13      	adds	r3, r2, #0
 8009dd0:	005b      	lsls	r3, r3, #1
 8009dd2:	189b      	adds	r3, r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	5a5b      	ldrh	r3, [r3, r1]
 8009dd8:	1c1a      	adds	r2, r3, #0
 8009dda:	4b59      	ldr	r3, [pc, #356]	; (8009f40 <pinConfig+0x2f8>)
 8009ddc:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:117
  //Default GPIO speed clock
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009dde:	4b58      	ldr	r3, [pc, #352]	; (8009f40 <pinConfig+0x2f8>)
 8009de0:	2203      	movs	r2, #3
 8009de2:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:119
  
  if(mode & 0x0001) { //Requested mode is : INPUT
 8009de4:	1d3b      	adds	r3, r7, #4
 8009de6:	881a      	ldrh	r2, [r3, #0]
 8009de8:	2301      	movs	r3, #1
 8009dea:	4013      	ands	r3, r2
 8009dec:	d036      	beq.n	8009e5c <pinConfig+0x214>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:121
    //If mode bit 0 = 1 (odd). Request INPUT mode for Pin
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8009dee:	4b54      	ldr	r3, [pc, #336]	; (8009f40 <pinConfig+0x2f8>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:122
    switch(mode) {
 8009df4:	1d3b      	adds	r3, r7, #4
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	2b0b      	cmp	r3, #11
 8009dfa:	d855      	bhi.n	8009ea8 <pinConfig+0x260>
 8009dfc:	009a      	lsls	r2, r3, #2
 8009dfe:	4b51      	ldr	r3, [pc, #324]	; (8009f44 <pinConfig+0x2fc>)
 8009e00:	18d3      	adds	r3, r2, r3
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	469f      	mov	pc, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:126
      case INPUT: 
      case INPUT_NOPULL: 
        //Default GPIO configured as No pull
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009e06:	4b4e      	ldr	r3, [pc, #312]	; (8009f40 <pinConfig+0x2f8>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:127
        L_setExtIt = 1; //ExtIT can be configured
 8009e0c:	1c3b      	adds	r3, r7, #0
 8009e0e:	330f      	adds	r3, #15
 8009e10:	2201      	movs	r2, #1
 8009e12:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:128
        break;
 8009e14:	e04f      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:131
      case INPUT_AF: 
        //Alternate function
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8009e16:	4b4a      	ldr	r3, [pc, #296]	; (8009f40 <pinConfig+0x2f8>)
 8009e18:	2202      	movs	r2, #2
 8009e1a:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:132
        break;
 8009e1c:	e04b      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:135
      case INPUT_AN: 
        //Analog function
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8009e1e:	4b48      	ldr	r3, [pc, #288]	; (8009f40 <pinConfig+0x2f8>)
 8009e20:	2203      	movs	r2, #3
 8009e22:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:136
        break;
 8009e24:	e047      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:139
      case INPUT_PU: 
        //GPIO configured as pull_up
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8009e26:	4b46      	ldr	r3, [pc, #280]	; (8009f40 <pinConfig+0x2f8>)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:140
        if(L_oldType == NOT_CONFIGURED)
 8009e2c:	1c3b      	adds	r3, r7, #0
 8009e2e:	330a      	adds	r3, #10
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d13a      	bne.n	8009eac <pinConfig+0x264>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:141
          L_setExtIt = 1; //ExtIT can be configured if not already done
 8009e36:	1c3b      	adds	r3, r7, #0
 8009e38:	330f      	adds	r3, #15
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:142
        break;
 8009e3e:	e035      	b.n	8009eac <pinConfig+0x264>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:145
      case INPUT_PD: 
        //GPIO configured as pull_down
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8009e40:	4b3f      	ldr	r3, [pc, #252]	; (8009f40 <pinConfig+0x2f8>)
 8009e42:	2202      	movs	r2, #2
 8009e44:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:146
        if(L_oldType == NOT_CONFIGURED)
 8009e46:	1c3b      	adds	r3, r7, #0
 8009e48:	330a      	adds	r3, #10
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d12f      	bne.n	8009eb0 <pinConfig+0x268>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:147
          L_setExtIt = 1; //ExtIT can be configured if not already done
 8009e50:	1c3b      	adds	r3, r7, #0
 8009e52:	330f      	adds	r3, #15
 8009e54:	2201      	movs	r2, #1
 8009e56:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:148
        break;
 8009e58:	46c0      	nop			; (mov r8, r8)
 8009e5a:	e029      	b.n	8009eb0 <pinConfig+0x268>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:154
      default:
        break;
    }
  } else { //Requested mode is : OUTPUT
    //Request OUTPUT mode for Pin
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8009e5c:	4b38      	ldr	r3, [pc, #224]	; (8009f40 <pinConfig+0x2f8>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:155
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009e62:	4b37      	ldr	r3, [pc, #220]	; (8009f40 <pinConfig+0x2f8>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:156
    switch(mode) {
 8009e68:	1d3b      	adds	r3, r7, #4
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	2b0a      	cmp	r3, #10
 8009e6e:	d821      	bhi.n	8009eb4 <pinConfig+0x26c>
 8009e70:	009a      	lsls	r2, r3, #2
 8009e72:	4b35      	ldr	r3, [pc, #212]	; (8009f48 <pinConfig+0x300>)
 8009e74:	18d3      	adds	r3, r2, r3
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	469f      	mov	pc, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:160
      case OUTPUT: 
      case OUTPUT_OD: 
        //Default GPIO configured as Open Drain
        GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;     
 8009e7a:	4b31      	ldr	r3, [pc, #196]	; (8009f40 <pinConfig+0x2f8>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:161
        break;
 8009e80:	e019      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:164
      case OUTPUT_AF: 
        //Alternate function
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8009e82:	4b2f      	ldr	r3, [pc, #188]	; (8009f40 <pinConfig+0x2f8>)
 8009e84:	2202      	movs	r2, #2
 8009e86:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:165
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009e88:	4b2d      	ldr	r3, [pc, #180]	; (8009f40 <pinConfig+0x2f8>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:166
        L_setTimer = 1; //Timer for PWM can be configured
 8009e8e:	1c3b      	adds	r3, r7, #0
 8009e90:	330d      	adds	r3, #13
 8009e92:	2201      	movs	r2, #1
 8009e94:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:167
        break;
 8009e96:	e00e      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:170
      case OUTPUT_AN: 
        //Analog function
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;          
 8009e98:	4b29      	ldr	r3, [pc, #164]	; (8009f40 <pinConfig+0x2f8>)
 8009e9a:	2203      	movs	r2, #3
 8009e9c:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:171
        break;
 8009e9e:	e00a      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:174
      case OUTPUT_PP: 
        //GPIO configured as Output PushPull
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;             
 8009ea0:	4b27      	ldr	r3, [pc, #156]	; (8009f40 <pinConfig+0x2f8>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:175
        break;
 8009ea6:	e006      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:150
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
        if(L_oldType == NOT_CONFIGURED)
          L_setExtIt = 1; //ExtIT can be configured if not already done
        break;
      default:
        break;
 8009ea8:	46c0      	nop			; (mov r8, r8)
 8009eaa:	e004      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:142
      case INPUT_PU: 
        //GPIO configured as pull_up
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
        if(L_oldType == NOT_CONFIGURED)
          L_setExtIt = 1; //ExtIT can be configured if not already done
        break;
 8009eac:	46c0      	nop			; (mov r8, r8)
 8009eae:	e002      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:148
      case INPUT_PD: 
        //GPIO configured as pull_down
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
        if(L_oldType == NOT_CONFIGURED)
          L_setExtIt = 1; //ExtIT can be configured if not already done
        break;
 8009eb0:	46c0      	nop			; (mov r8, r8)
 8009eb2:	e000      	b.n	8009eb6 <pinConfig+0x26e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:177
      case OUTPUT_PP: 
        //GPIO configured as Output PushPull
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;             
        break;
      default:
        break;
 8009eb4:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:181
    }
  }
  //GPIO Pin Configuration
  GPIO_Init(ArduinoPort[pin].GPIOx, &GPIO_InitStructure);    
 8009eb6:	1dbb      	adds	r3, r7, #6
 8009eb8:	881a      	ldrh	r2, [r3, #0]
 8009eba:	491d      	ldr	r1, [pc, #116]	; (8009f30 <pinConfig+0x2e8>)
 8009ebc:	1c13      	adds	r3, r2, #0
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	189b      	adds	r3, r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	18cb      	adds	r3, r1, r3
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	4b1d      	ldr	r3, [pc, #116]	; (8009f40 <pinConfig+0x2f8>)
 8009ecc:	1c10      	adds	r0, r2, #0
 8009ece:	1c19      	adds	r1, r3, #0
 8009ed0:	f7f8 ff4a 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:183
  //NOW: Pin has been configured whith requested mode.
  ArduinoPort[pin].PinMode = mode;  //log it!
 8009ed4:	1dbb      	adds	r3, r7, #6
 8009ed6:	881a      	ldrh	r2, [r3, #0]
 8009ed8:	1d3b      	adds	r3, r7, #4
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	b2d9      	uxtb	r1, r3
 8009ede:	4c14      	ldr	r4, [pc, #80]	; (8009f30 <pinConfig+0x2e8>)
 8009ee0:	2008      	movs	r0, #8
 8009ee2:	1c13      	adds	r3, r2, #0
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	189b      	adds	r3, r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	18e3      	adds	r3, r4, r3
 8009eec:	181b      	adds	r3, r3, r0
 8009eee:	1c0a      	adds	r2, r1, #0
 8009ef0:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:186
  
  //Test for Configuration of External interrupt and Timers. Set/Reset if needed!
  if(L_setExtIt) {
 8009ef2:	1c3b      	adds	r3, r7, #0
 8009ef4:	330f      	adds	r3, #15
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d04b      	beq.n	8009f94 <pinConfig+0x34c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:188
   //Configure External Interrupt for Pin2 or Pin3 only
   if((pin == 2)||(pin == 3)) {
 8009efc:	1dbb      	adds	r3, r7, #6
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d003      	beq.n	8009f0c <pinConfig+0x2c4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:188 (discriminator 1)
 8009f04:	1dbb      	adds	r3, r7, #6
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d143      	bne.n	8009f94 <pinConfig+0x34c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:190
    /* Enable SYSCFG clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	2101      	movs	r1, #1
 8009f10:	f7fa fc3c 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:191
    if(pin == 2) {
 8009f14:	1dbb      	adds	r3, r7, #6
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d119      	bne.n	8009f50 <pinConfig+0x308>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:193
    /* Connect EXTI12 Line to PB12 pin */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource12);
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	210c      	movs	r1, #12
 8009f20:	f7fc fc7c 	bl	800681c <SYSCFG_EXTILineConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:195
    /* Configure EXTI12 line */
    EXTI_InitStructure.EXTI_Line = EXTI_Line12;
 8009f24:	4b09      	ldr	r3, [pc, #36]	; (8009f4c <pinConfig+0x304>)
 8009f26:	2280      	movs	r2, #128	; 0x80
 8009f28:	0152      	lsls	r2, r2, #5
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	e018      	b.n	8009f60 <pinConfig+0x318>
 8009f2e:	46c0      	nop			; (mov r8, r8)
 8009f30:	20000038 	.word	0x20000038
 8009f34:	48000400 	.word	0x48000400
 8009f38:	48000800 	.word	0x48000800
 8009f3c:	48001400 	.word	0x48001400
 8009f40:	200002a0 	.word	0x200002a0
 8009f44:	0800b708 	.word	0x0800b708
 8009f48:	0800b738 	.word	0x0800b738
 8009f4c:	200002a8 	.word	0x200002a8
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:198
    } else {
    /* Connect EXTI11 Line to PB11 pin */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource11);
 8009f50:	2001      	movs	r0, #1
 8009f52:	210b      	movs	r1, #11
 8009f54:	f7fc fc62 	bl	800681c <SYSCFG_EXTILineConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:200
    /* Configure EXTI11 line */
    EXTI_InitStructure.EXTI_Line = EXTI_Line11;
 8009f58:	4be2      	ldr	r3, [pc, #904]	; (800a2e4 <pinConfig+0x69c>)
 8009f5a:	2280      	movs	r2, #128	; 0x80
 8009f5c:	0112      	lsls	r2, r2, #4
 8009f5e:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:202
    }  
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8009f60:	4be0      	ldr	r3, [pc, #896]	; (800a2e4 <pinConfig+0x69c>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:203
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
 8009f66:	4bdf      	ldr	r3, [pc, #892]	; (800a2e4 <pinConfig+0x69c>)
 8009f68:	220c      	movs	r2, #12
 8009f6a:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:204
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009f6c:	4bdd      	ldr	r3, [pc, #884]	; (800a2e4 <pinConfig+0x69c>)
 8009f6e:	2201      	movs	r2, #1
 8009f70:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:205
    EXTI_Init(&EXTI_InitStructure);
 8009f72:	4bdc      	ldr	r3, [pc, #880]	; (800a2e4 <pinConfig+0x69c>)
 8009f74:	1c18      	adds	r0, r3, #0
 8009f76:	f7f8 f823 	bl	8001fc0 <EXTI_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:207
    /* Enable and set EXTI11/EXTI12 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI4_15_IRQn;
 8009f7a:	4bdb      	ldr	r3, [pc, #876]	; (800a2e8 <pinConfig+0x6a0>)
 8009f7c:	2207      	movs	r2, #7
 8009f7e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:208
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0x00;
 8009f80:	4bd9      	ldr	r3, [pc, #868]	; (800a2e8 <pinConfig+0x6a0>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:209
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8009f86:	4bd8      	ldr	r3, [pc, #864]	; (800a2e8 <pinConfig+0x6a0>)
 8009f88:	2201      	movs	r2, #1
 8009f8a:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:210
    NVIC_Init(&NVIC_InitStructure);     
 8009f8c:	4bd6      	ldr	r3, [pc, #856]	; (800a2e8 <pinConfig+0x6a0>)
 8009f8e:	1c18      	adds	r0, r3, #0
 8009f90:	f7f9 fe4c 	bl	8003c2c <NVIC_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:213
   }
  }
  if(L_resetExtIt) {
 8009f94:	1c3b      	adds	r3, r7, #0
 8009f96:	330e      	adds	r3, #14
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d01d      	beq.n	8009fda <pinConfig+0x392>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:215
   //Reset ExtIt for Pin2 or pin3 only
   if(pin == 2) {
 8009f9e:	1dbb      	adds	r3, r7, #6
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d10a      	bne.n	8009fbc <pinConfig+0x374>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:216
    EXTI_InitStructure.EXTI_Line = EXTI_Line12;
 8009fa6:	4bcf      	ldr	r3, [pc, #828]	; (800a2e4 <pinConfig+0x69c>)
 8009fa8:	2280      	movs	r2, #128	; 0x80
 8009faa:	0152      	lsls	r2, r2, #5
 8009fac:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:217
    EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 8009fae:	4bcd      	ldr	r3, [pc, #820]	; (800a2e4 <pinConfig+0x69c>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:218
    EXTI_Init(&EXTI_InitStructure);      
 8009fb4:	4bcb      	ldr	r3, [pc, #812]	; (800a2e4 <pinConfig+0x69c>)
 8009fb6:	1c18      	adds	r0, r3, #0
 8009fb8:	f7f8 f802 	bl	8001fc0 <EXTI_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:220
   }    
   if(pin == 3) {
 8009fbc:	1dbb      	adds	r3, r7, #6
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d10a      	bne.n	8009fda <pinConfig+0x392>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:221
    EXTI_InitStructure.EXTI_Line = EXTI_Line11;
 8009fc4:	4bc7      	ldr	r3, [pc, #796]	; (800a2e4 <pinConfig+0x69c>)
 8009fc6:	2280      	movs	r2, #128	; 0x80
 8009fc8:	0112      	lsls	r2, r2, #4
 8009fca:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:222
    EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 8009fcc:	4bc5      	ldr	r3, [pc, #788]	; (800a2e4 <pinConfig+0x69c>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:223
    EXTI_Init(&EXTI_InitStructure);            
 8009fd2:	4bc4      	ldr	r3, [pc, #784]	; (800a2e4 <pinConfig+0x69c>)
 8009fd4:	1c18      	adds	r0, r3, #0
 8009fd6:	f7f7 fff3 	bl	8001fc0 <EXTI_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:226
   }    
  }
  if(L_resetTimer) {
 8009fda:	1c3b      	adds	r3, r7, #0
 8009fdc:	330c      	adds	r3, #12
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d06e      	beq.n	800a0c2 <pinConfig+0x47a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:228
    //Reset Timer request
    switch(pin){
 8009fe4:	1dbb      	adds	r3, r7, #6
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	3b03      	subs	r3, #3
 8009fea:	2b08      	cmp	r3, #8
 8009fec:	d868      	bhi.n	800a0c0 <pinConfig+0x478>
 8009fee:	009a      	lsls	r2, r3, #2
 8009ff0:	4bbe      	ldr	r3, [pc, #760]	; (800a2ec <pinConfig+0x6a4>)
 8009ff2:	18d3      	adds	r3, r2, r3
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	469f      	mov	pc, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:233
    // TIMx counter Disable 
    // TIMx Main Output Disable 
    // TIMx clock Disable
      case 3:
        TIM_Cmd(TIM2, DISABLE);
 8009ff8:	2380      	movs	r3, #128	; 0x80
 8009ffa:	05db      	lsls	r3, r3, #23
 8009ffc:	1c18      	adds	r0, r3, #0
 8009ffe:	2100      	movs	r1, #0
 800a000:	f7fc febc 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:234
        TIM_CtrlPWMOutputs(TIM2, DISABLE);     
 800a004:	2380      	movs	r3, #128	; 0x80
 800a006:	05db      	lsls	r3, r3, #23
 800a008:	1c18      	adds	r0, r3, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	f7fc ff18 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:235
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, DISABLE);   
 800a010:	2001      	movs	r0, #1
 800a012:	2100      	movs	r1, #0
 800a014:	f7fa fbd8 	bl	80047c8 <RCC_APB1PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:236
        break;
 800a018:	e053      	b.n	800a0c2 <pinConfig+0x47a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:238
      case 5:
        TIM_Cmd(TIM17, DISABLE);
 800a01a:	4bb5      	ldr	r3, [pc, #724]	; (800a2f0 <pinConfig+0x6a8>)
 800a01c:	1c18      	adds	r0, r3, #0
 800a01e:	2100      	movs	r1, #0
 800a020:	f7fc feac 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:239
        TIM_CtrlPWMOutputs(TIM17, DISABLE);     
 800a024:	4bb2      	ldr	r3, [pc, #712]	; (800a2f0 <pinConfig+0x6a8>)
 800a026:	1c18      	adds	r0, r3, #0
 800a028:	2100      	movs	r1, #0
 800a02a:	f7fc ff09 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:240
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, DISABLE);   
 800a02e:	2380      	movs	r3, #128	; 0x80
 800a030:	02db      	lsls	r3, r3, #11
 800a032:	1c18      	adds	r0, r3, #0
 800a034:	2100      	movs	r1, #0
 800a036:	f7fa fba9 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:241
        break;
 800a03a:	e042      	b.n	800a0c2 <pinConfig+0x47a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:243
      case 6:
        TIM_Cmd(TIM16, DISABLE);
 800a03c:	4bad      	ldr	r3, [pc, #692]	; (800a2f4 <pinConfig+0x6ac>)
 800a03e:	1c18      	adds	r0, r3, #0
 800a040:	2100      	movs	r1, #0
 800a042:	f7fc fe9b 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:244
        TIM_CtrlPWMOutputs(TIM16, DISABLE);     
 800a046:	4bab      	ldr	r3, [pc, #684]	; (800a2f4 <pinConfig+0x6ac>)
 800a048:	1c18      	adds	r0, r3, #0
 800a04a:	2100      	movs	r1, #0
 800a04c:	f7fc fef8 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:245
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, DISABLE);   
 800a050:	2380      	movs	r3, #128	; 0x80
 800a052:	029b      	lsls	r3, r3, #10
 800a054:	1c18      	adds	r0, r3, #0
 800a056:	2100      	movs	r1, #0
 800a058:	f7fa fb98 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:246
        break;
 800a05c:	e031      	b.n	800a0c2 <pinConfig+0x47a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:248
      case 9:
        TIM_Cmd(TIM14, DISABLE);
 800a05e:	4ba6      	ldr	r3, [pc, #664]	; (800a2f8 <pinConfig+0x6b0>)
 800a060:	1c18      	adds	r0, r3, #0
 800a062:	2100      	movs	r1, #0
 800a064:	f7fc fe8a 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:249
        TIM_CtrlPWMOutputs(TIM14, DISABLE);     
 800a068:	4ba3      	ldr	r3, [pc, #652]	; (800a2f8 <pinConfig+0x6b0>)
 800a06a:	1c18      	adds	r0, r3, #0
 800a06c:	2100      	movs	r1, #0
 800a06e:	f7fc fee7 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:250
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, DISABLE);   
 800a072:	2380      	movs	r3, #128	; 0x80
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	1c18      	adds	r0, r3, #0
 800a078:	2100      	movs	r1, #0
 800a07a:	f7fa fba5 	bl	80047c8 <RCC_APB1PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:251
        break;
 800a07e:	e020      	b.n	800a0c2 <pinConfig+0x47a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:253
      case 10:
        TIM_Cmd(TIM1, DISABLE);
 800a080:	4b9e      	ldr	r3, [pc, #632]	; (800a2fc <pinConfig+0x6b4>)
 800a082:	1c18      	adds	r0, r3, #0
 800a084:	2100      	movs	r1, #0
 800a086:	f7fc fe79 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:254
        TIM_CtrlPWMOutputs(TIM1, DISABLE);     
 800a08a:	4b9c      	ldr	r3, [pc, #624]	; (800a2fc <pinConfig+0x6b4>)
 800a08c:	1c18      	adds	r0, r3, #0
 800a08e:	2100      	movs	r1, #0
 800a090:	f7fc fed6 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:255
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, DISABLE);   
 800a094:	2380      	movs	r3, #128	; 0x80
 800a096:	011b      	lsls	r3, r3, #4
 800a098:	1c18      	adds	r0, r3, #0
 800a09a:	2100      	movs	r1, #0
 800a09c:	f7fa fb76 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:256
        break;
 800a0a0:	e00f      	b.n	800a0c2 <pinConfig+0x47a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:258
      case 11:
        TIM_Cmd(TIM3, DISABLE);
 800a0a2:	4b97      	ldr	r3, [pc, #604]	; (800a300 <pinConfig+0x6b8>)
 800a0a4:	1c18      	adds	r0, r3, #0
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	f7fc fe68 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:259
        TIM_CtrlPWMOutputs(TIM3, DISABLE);     
 800a0ac:	4b94      	ldr	r3, [pc, #592]	; (800a300 <pinConfig+0x6b8>)
 800a0ae:	1c18      	adds	r0, r3, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f7fc fec5 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:260
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, DISABLE);   
 800a0b6:	2002      	movs	r0, #2
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	f7fa fb85 	bl	80047c8 <RCC_APB1PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:261
        break;
 800a0be:	e000      	b.n	800a0c2 <pinConfig+0x47a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:263
      default:
        break;
 800a0c0:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:266
    }
  }
  if(L_setTimer) {
 800a0c2:	1c3b      	adds	r3, r7, #0
 800a0c4:	330d      	adds	r3, #13
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d100      	bne.n	800a0ce <pinConfig+0x486>
 800a0cc:	e182      	b.n	800a3d4 <pinConfig+0x78c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:268
   //Configure Timer for PWM
   TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800a0ce:	4b8d      	ldr	r3, [pc, #564]	; (800a304 <pinConfig+0x6bc>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:269
   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800a0d4:	4b8b      	ldr	r3, [pc, #556]	; (800a304 <pinConfig+0x6bc>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:270
   TIM_TimeBaseStructure.TIM_Period = (SystemCoreClock / 1000 ) - 1; //Default frequency is 1KHz
 800a0da:	4b8b      	ldr	r3, [pc, #556]	; (800a308 <pinConfig+0x6c0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	1c18      	adds	r0, r3, #0
 800a0e0:	23fa      	movs	r3, #250	; 0xfa
 800a0e2:	0099      	lsls	r1, r3, #2
 800a0e4:	f7f6 f868 	bl	80001b8 <__aeabi_uidiv>
 800a0e8:	1c03      	adds	r3, r0, #0
 800a0ea:	1e5a      	subs	r2, r3, #1
 800a0ec:	4b85      	ldr	r3, [pc, #532]	; (800a304 <pinConfig+0x6bc>)
 800a0ee:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:271
   ArduinoPort[pin].pwmPeriod = (SystemCoreClock / 1000 ) - 1;
 800a0f0:	1dbb      	adds	r3, r7, #6
 800a0f2:	881c      	ldrh	r4, [r3, #0]
 800a0f4:	4b84      	ldr	r3, [pc, #528]	; (800a308 <pinConfig+0x6c0>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	1c18      	adds	r0, r3, #0
 800a0fa:	23fa      	movs	r3, #250	; 0xfa
 800a0fc:	0099      	lsls	r1, r3, #2
 800a0fe:	f7f6 f85b 	bl	80001b8 <__aeabi_uidiv>
 800a102:	1c03      	adds	r3, r0, #0
 800a104:	b29b      	uxth	r3, r3
 800a106:	3b01      	subs	r3, #1
 800a108:	b29a      	uxth	r2, r3
 800a10a:	4880      	ldr	r0, [pc, #512]	; (800a30c <pinConfig+0x6c4>)
 800a10c:	2108      	movs	r1, #8
 800a10e:	1c23      	adds	r3, r4, #0
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	191b      	adds	r3, r3, r4
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	18c3      	adds	r3, r0, r3
 800a118:	185b      	adds	r3, r3, r1
 800a11a:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:272
   TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800a11c:	4b79      	ldr	r3, [pc, #484]	; (800a304 <pinConfig+0x6bc>)
 800a11e:	2200      	movs	r2, #0
 800a120:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:273
   TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 800a122:	4b78      	ldr	r3, [pc, #480]	; (800a304 <pinConfig+0x6bc>)
 800a124:	2200      	movs	r2, #0
 800a126:	729a      	strb	r2, [r3, #10]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:275

   TIM_OCInitStructure.TIM_Pulse = 0; //(uint16_t) (((uint32_t) 2 * (ArduinoPort[pin].pwmPeriod - 1)) / 10); //Default duty cycle at 0%
 800a128:	4b79      	ldr	r3, [pc, #484]	; (800a310 <pinConfig+0x6c8>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:276
   TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 800a12e:	4b78      	ldr	r3, [pc, #480]	; (800a310 <pinConfig+0x6c8>)
 800a130:	2270      	movs	r2, #112	; 0x70
 800a132:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:277
   TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800a134:	4b76      	ldr	r3, [pc, #472]	; (800a310 <pinConfig+0x6c8>)
 800a136:	2201      	movs	r2, #1
 800a138:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:278
   TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 800a13a:	4b75      	ldr	r3, [pc, #468]	; (800a310 <pinConfig+0x6c8>)
 800a13c:	2204      	movs	r2, #4
 800a13e:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:279
   TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 800a140:	4b73      	ldr	r3, [pc, #460]	; (800a310 <pinConfig+0x6c8>)
 800a142:	2202      	movs	r2, #2
 800a144:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:280
   TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 800a146:	4b72      	ldr	r3, [pc, #456]	; (800a310 <pinConfig+0x6c8>)
 800a148:	2200      	movs	r2, #0
 800a14a:	81da      	strh	r2, [r3, #14]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:281
   TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 800a14c:	4b70      	ldr	r3, [pc, #448]	; (800a310 <pinConfig+0x6c8>)
 800a14e:	2280      	movs	r2, #128	; 0x80
 800a150:	0052      	lsls	r2, r2, #1
 800a152:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:282
   TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 800a154:	4b6e      	ldr	r3, [pc, #440]	; (800a310 <pinConfig+0x6c8>)
 800a156:	2200      	movs	r2, #0
 800a158:	825a      	strh	r2, [r3, #18]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:284
    
    switch(pin){
 800a15a:	1dbb      	adds	r3, r7, #6
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	3b03      	subs	r3, #3
 800a160:	2b08      	cmp	r3, #8
 800a162:	d900      	bls.n	800a166 <pinConfig+0x51e>
 800a164:	e135      	b.n	800a3d2 <pinConfig+0x78a>
 800a166:	009a      	lsls	r2, r3, #2
 800a168:	4b6a      	ldr	r3, [pc, #424]	; (800a314 <pinConfig+0x6cc>)
 800a16a:	18d3      	adds	r3, r2, r3
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	469f      	mov	pc, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:289
    // TIMx clock enable
    // TIMx Main Output Enable 
    // TIMx clock Enable
      case 3:
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);  
 800a170:	2001      	movs	r0, #1
 800a172:	2101      	movs	r1, #1
 800a174:	f7fa fb28 	bl	80047c8 <RCC_APB1PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:291
        //Connect TIM Channels to Port Alternate Function 
        GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_2);        
 800a178:	4b67      	ldr	r3, [pc, #412]	; (800a318 <pinConfig+0x6d0>)
 800a17a:	1c18      	adds	r0, r3, #0
 800a17c:	210b      	movs	r1, #11
 800a17e:	2202      	movs	r2, #2
 800a180:	f7f8 ff6a 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:292
        TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800a184:	2380      	movs	r3, #128	; 0x80
 800a186:	05da      	lsls	r2, r3, #23
 800a188:	4b5e      	ldr	r3, [pc, #376]	; (800a304 <pinConfig+0x6bc>)
 800a18a:	1c10      	adds	r0, r2, #0
 800a18c:	1c19      	adds	r1, r3, #0
 800a18e:	f7fc fc5f 	bl	8006a50 <TIM_TimeBaseInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:293
        TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 800a192:	2380      	movs	r3, #128	; 0x80
 800a194:	05da      	lsls	r2, r3, #23
 800a196:	4b5e      	ldr	r3, [pc, #376]	; (800a310 <pinConfig+0x6c8>)
 800a198:	1c10      	adds	r0, r2, #0
 800a19a:	1c19      	adds	r1, r3, #0
 800a19c:	f7fd f8ee 	bl	800737c <TIM_OC4Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:295
        //enable Frequ and pulse update
        TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 800a1a0:	2380      	movs	r3, #128	; 0x80
 800a1a2:	05db      	lsls	r3, r3, #23
 800a1a4:	1c18      	adds	r0, r3, #0
 800a1a6:	2108      	movs	r1, #8
 800a1a8:	f7fd fb84 	bl	80078b4 <TIM_OC4PreloadConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:296
        TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive); 
 800a1ac:	2380      	movs	r3, #128	; 0x80
 800a1ae:	05db      	lsls	r3, r3, #23
 800a1b0:	1c18      	adds	r0, r3, #0
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	f7fc fda8 	bl	8006d08 <TIM_SelectOnePulseMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:297
        TIM_Cmd(TIM2, ENABLE);
 800a1b8:	2380      	movs	r3, #128	; 0x80
 800a1ba:	05db      	lsls	r3, r3, #23
 800a1bc:	1c18      	adds	r0, r3, #0
 800a1be:	2101      	movs	r1, #1
 800a1c0:	f7fc fddc 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:298
        TIM_CtrlPWMOutputs(TIM2, ENABLE);     
 800a1c4:	2380      	movs	r3, #128	; 0x80
 800a1c6:	05db      	lsls	r3, r3, #23
 800a1c8:	1c18      	adds	r0, r3, #0
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	f7fc fe38 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:299
        break;
 800a1d0:	e100      	b.n	800a3d4 <pinConfig+0x78c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:301
      case 5:
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);   
 800a1d2:	2380      	movs	r3, #128	; 0x80
 800a1d4:	02db      	lsls	r3, r3, #11
 800a1d6:	1c18      	adds	r0, r3, #0
 800a1d8:	2101      	movs	r1, #1
 800a1da:	f7fa fad7 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:303
        //Connect TIM Channels to Port Alternate Function 
        GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_2);        
 800a1de:	4b4e      	ldr	r3, [pc, #312]	; (800a318 <pinConfig+0x6d0>)
 800a1e0:	1c18      	adds	r0, r3, #0
 800a1e2:	2109      	movs	r1, #9
 800a1e4:	2202      	movs	r2, #2
 800a1e6:	f7f8 ff37 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:304
        TIM_TimeBaseInit(TIM17, &TIM_TimeBaseStructure);
 800a1ea:	4a41      	ldr	r2, [pc, #260]	; (800a2f0 <pinConfig+0x6a8>)
 800a1ec:	4b45      	ldr	r3, [pc, #276]	; (800a304 <pinConfig+0x6bc>)
 800a1ee:	1c10      	adds	r0, r2, #0
 800a1f0:	1c19      	adds	r1, r3, #0
 800a1f2:	f7fc fc2d 	bl	8006a50 <TIM_TimeBaseInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:305
        TIM_OC1Init(TIM17, &TIM_OCInitStructure);
 800a1f6:	4a3e      	ldr	r2, [pc, #248]	; (800a2f0 <pinConfig+0x6a8>)
 800a1f8:	4b45      	ldr	r3, [pc, #276]	; (800a310 <pinConfig+0x6c8>)
 800a1fa:	1c10      	adds	r0, r2, #0
 800a1fc:	1c19      	adds	r1, r3, #0
 800a1fe:	f7fc fe45 	bl	8006e8c <TIM_OC1Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:307
        //enable Frequ and pulse update
        TIM_OC1PreloadConfig(TIM17, TIM_OCPreload_Enable);
 800a202:	4b3b      	ldr	r3, [pc, #236]	; (800a2f0 <pinConfig+0x6a8>)
 800a204:	1c18      	adds	r0, r3, #0
 800a206:	2108      	movs	r1, #8
 800a208:	f7fd fad2 	bl	80077b0 <TIM_OC1PreloadConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:308
        TIM_SelectOnePulseMode(TIM17, TIM_OPMode_Repetitive); 
 800a20c:	4b38      	ldr	r3, [pc, #224]	; (800a2f0 <pinConfig+0x6a8>)
 800a20e:	1c18      	adds	r0, r3, #0
 800a210:	2100      	movs	r1, #0
 800a212:	f7fc fd79 	bl	8006d08 <TIM_SelectOnePulseMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:309
        TIM_Cmd(TIM17, ENABLE);
 800a216:	4b36      	ldr	r3, [pc, #216]	; (800a2f0 <pinConfig+0x6a8>)
 800a218:	1c18      	adds	r0, r3, #0
 800a21a:	2101      	movs	r1, #1
 800a21c:	f7fc fdae 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:310
        TIM_CtrlPWMOutputs(TIM17, ENABLE);     
 800a220:	4b33      	ldr	r3, [pc, #204]	; (800a2f0 <pinConfig+0x6a8>)
 800a222:	1c18      	adds	r0, r3, #0
 800a224:	2101      	movs	r1, #1
 800a226:	f7fc fe0b 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:311
        break;
 800a22a:	e0d3      	b.n	800a3d4 <pinConfig+0x78c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:313
      case 6:
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);   
 800a22c:	2380      	movs	r3, #128	; 0x80
 800a22e:	029b      	lsls	r3, r3, #10
 800a230:	1c18      	adds	r0, r3, #0
 800a232:	2101      	movs	r1, #1
 800a234:	f7fa faaa 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:315
        //Connect TIM Channels to Port Alternate Function 
        GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_2);        
 800a238:	4b37      	ldr	r3, [pc, #220]	; (800a318 <pinConfig+0x6d0>)
 800a23a:	1c18      	adds	r0, r3, #0
 800a23c:	2108      	movs	r1, #8
 800a23e:	2202      	movs	r2, #2
 800a240:	f7f8 ff0a 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:316
        TIM_TimeBaseInit(TIM16, &TIM_TimeBaseStructure);
 800a244:	4a2b      	ldr	r2, [pc, #172]	; (800a2f4 <pinConfig+0x6ac>)
 800a246:	4b2f      	ldr	r3, [pc, #188]	; (800a304 <pinConfig+0x6bc>)
 800a248:	1c10      	adds	r0, r2, #0
 800a24a:	1c19      	adds	r1, r3, #0
 800a24c:	f7fc fc00 	bl	8006a50 <TIM_TimeBaseInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:317
        TIM_OC1Init(TIM16, &TIM_OCInitStructure);
 800a250:	4a28      	ldr	r2, [pc, #160]	; (800a2f4 <pinConfig+0x6ac>)
 800a252:	4b2f      	ldr	r3, [pc, #188]	; (800a310 <pinConfig+0x6c8>)
 800a254:	1c10      	adds	r0, r2, #0
 800a256:	1c19      	adds	r1, r3, #0
 800a258:	f7fc fe18 	bl	8006e8c <TIM_OC1Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:319
        //enable Frequ and pulse update
        TIM_OC1PreloadConfig(TIM16, TIM_OCPreload_Enable);
 800a25c:	4b25      	ldr	r3, [pc, #148]	; (800a2f4 <pinConfig+0x6ac>)
 800a25e:	1c18      	adds	r0, r3, #0
 800a260:	2108      	movs	r1, #8
 800a262:	f7fd faa5 	bl	80077b0 <TIM_OC1PreloadConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:320
        TIM_SelectOnePulseMode(TIM16, TIM_OPMode_Repetitive); 
 800a266:	4b23      	ldr	r3, [pc, #140]	; (800a2f4 <pinConfig+0x6ac>)
 800a268:	1c18      	adds	r0, r3, #0
 800a26a:	2100      	movs	r1, #0
 800a26c:	f7fc fd4c 	bl	8006d08 <TIM_SelectOnePulseMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:321
        TIM_Cmd(TIM16, ENABLE);
 800a270:	4b20      	ldr	r3, [pc, #128]	; (800a2f4 <pinConfig+0x6ac>)
 800a272:	1c18      	adds	r0, r3, #0
 800a274:	2101      	movs	r1, #1
 800a276:	f7fc fd81 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:322
        TIM_CtrlPWMOutputs(TIM16, ENABLE);     
 800a27a:	4b1e      	ldr	r3, [pc, #120]	; (800a2f4 <pinConfig+0x6ac>)
 800a27c:	1c18      	adds	r0, r3, #0
 800a27e:	2101      	movs	r1, #1
 800a280:	f7fc fdde 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:323
        break;
 800a284:	e0a6      	b.n	800a3d4 <pinConfig+0x78c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:325
      case 9:
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);   
 800a286:	2380      	movs	r3, #128	; 0x80
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	1c18      	adds	r0, r3, #0
 800a28c:	2101      	movs	r1, #1
 800a28e:	f7fa fa9b 	bl	80047c8 <RCC_APB1PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:327
        //Connect TIM Channels to Port Alternate Function 
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_4);        
 800a292:	2390      	movs	r3, #144	; 0x90
 800a294:	05db      	lsls	r3, r3, #23
 800a296:	1c18      	adds	r0, r3, #0
 800a298:	2104      	movs	r1, #4
 800a29a:	2204      	movs	r2, #4
 800a29c:	f7f8 fedc 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:328
        TIM_TimeBaseInit(TIM14, &TIM_TimeBaseStructure);
 800a2a0:	4a15      	ldr	r2, [pc, #84]	; (800a2f8 <pinConfig+0x6b0>)
 800a2a2:	4b18      	ldr	r3, [pc, #96]	; (800a304 <pinConfig+0x6bc>)
 800a2a4:	1c10      	adds	r0, r2, #0
 800a2a6:	1c19      	adds	r1, r3, #0
 800a2a8:	f7fc fbd2 	bl	8006a50 <TIM_TimeBaseInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:329
        TIM_OC1Init(TIM14, &TIM_OCInitStructure);
 800a2ac:	4a12      	ldr	r2, [pc, #72]	; (800a2f8 <pinConfig+0x6b0>)
 800a2ae:	4b18      	ldr	r3, [pc, #96]	; (800a310 <pinConfig+0x6c8>)
 800a2b0:	1c10      	adds	r0, r2, #0
 800a2b2:	1c19      	adds	r1, r3, #0
 800a2b4:	f7fc fdea 	bl	8006e8c <TIM_OC1Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:331
        //enable Frequ and pulse update
        TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800a2b8:	4b10      	ldr	r3, [pc, #64]	; (800a2fc <pinConfig+0x6b4>)
 800a2ba:	1c18      	adds	r0, r3, #0
 800a2bc:	2108      	movs	r1, #8
 800a2be:	f7fd faf9 	bl	80078b4 <TIM_OC4PreloadConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:332
        TIM_SelectOnePulseMode(TIM1, TIM_OPMode_Repetitive); 
 800a2c2:	4b0e      	ldr	r3, [pc, #56]	; (800a2fc <pinConfig+0x6b4>)
 800a2c4:	1c18      	adds	r0, r3, #0
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	f7fc fd1e 	bl	8006d08 <TIM_SelectOnePulseMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:333
        TIM_Cmd(TIM14, ENABLE);
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <pinConfig+0x6b0>)
 800a2ce:	1c18      	adds	r0, r3, #0
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	f7fc fd53 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:334
        TIM_CtrlPWMOutputs(TIM14, ENABLE);     
 800a2d6:	4b08      	ldr	r3, [pc, #32]	; (800a2f8 <pinConfig+0x6b0>)
 800a2d8:	1c18      	adds	r0, r3, #0
 800a2da:	2101      	movs	r1, #1
 800a2dc:	f7fc fdb0 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:335
        break;
 800a2e0:	e078      	b.n	800a3d4 <pinConfig+0x78c>
 800a2e2:	46c0      	nop			; (mov r8, r8)
 800a2e4:	200002a8 	.word	0x200002a8
 800a2e8:	200002b0 	.word	0x200002b0
 800a2ec:	0800b764 	.word	0x0800b764
 800a2f0:	40014800 	.word	0x40014800
 800a2f4:	40014400 	.word	0x40014400
 800a2f8:	40002000 	.word	0x40002000
 800a2fc:	40012c00 	.word	0x40012c00
 800a300:	40000400 	.word	0x40000400
 800a304:	200002b4 	.word	0x200002b4
 800a308:	20000024 	.word	0x20000024
 800a30c:	20000038 	.word	0x20000038
 800a310:	200002c0 	.word	0x200002c0
 800a314:	0800b788 	.word	0x0800b788
 800a318:	48000400 	.word	0x48000400
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:337
      case 10:
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);   
 800a31c:	2380      	movs	r3, #128	; 0x80
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	1c18      	adds	r0, r3, #0
 800a322:	2101      	movs	r1, #1
 800a324:	f7fa fa32 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:339
        //Connect TIM Channels to Port Alternate Function 
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_2);        
 800a328:	2390      	movs	r3, #144	; 0x90
 800a32a:	05db      	lsls	r3, r3, #23
 800a32c:	1c18      	adds	r0, r3, #0
 800a32e:	210b      	movs	r1, #11
 800a330:	2202      	movs	r2, #2
 800a332:	f7f8 fe91 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:340
        TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 800a336:	4a29      	ldr	r2, [pc, #164]	; (800a3dc <pinConfig+0x794>)
 800a338:	4b29      	ldr	r3, [pc, #164]	; (800a3e0 <pinConfig+0x798>)
 800a33a:	1c10      	adds	r0, r2, #0
 800a33c:	1c19      	adds	r1, r3, #0
 800a33e:	f7fc fb87 	bl	8006a50 <TIM_TimeBaseInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:341
        TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 800a342:	4a26      	ldr	r2, [pc, #152]	; (800a3dc <pinConfig+0x794>)
 800a344:	4b27      	ldr	r3, [pc, #156]	; (800a3e4 <pinConfig+0x79c>)
 800a346:	1c10      	adds	r0, r2, #0
 800a348:	1c19      	adds	r1, r3, #0
 800a34a:	f7fd f817 	bl	800737c <TIM_OC4Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:343
        //enable Frequ and pulse update
        TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800a34e:	4b23      	ldr	r3, [pc, #140]	; (800a3dc <pinConfig+0x794>)
 800a350:	1c18      	adds	r0, r3, #0
 800a352:	2108      	movs	r1, #8
 800a354:	f7fd faae 	bl	80078b4 <TIM_OC4PreloadConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:344
        TIM_SelectOnePulseMode(TIM1, TIM_OPMode_Repetitive); 
 800a358:	4b20      	ldr	r3, [pc, #128]	; (800a3dc <pinConfig+0x794>)
 800a35a:	1c18      	adds	r0, r3, #0
 800a35c:	2100      	movs	r1, #0
 800a35e:	f7fc fcd3 	bl	8006d08 <TIM_SelectOnePulseMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:345
        TIM_Cmd(TIM1, ENABLE);
 800a362:	4b1e      	ldr	r3, [pc, #120]	; (800a3dc <pinConfig+0x794>)
 800a364:	1c18      	adds	r0, r3, #0
 800a366:	2101      	movs	r1, #1
 800a368:	f7fc fd08 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:346
        TIM_CtrlPWMOutputs(TIM1, ENABLE);     
 800a36c:	4b1b      	ldr	r3, [pc, #108]	; (800a3dc <pinConfig+0x794>)
 800a36e:	1c18      	adds	r0, r3, #0
 800a370:	2101      	movs	r1, #1
 800a372:	f7fc fd65 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:347
        break;
 800a376:	e02d      	b.n	800a3d4 <pinConfig+0x78c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:349
      case 11:
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);   
 800a378:	2002      	movs	r0, #2
 800a37a:	2101      	movs	r1, #1
 800a37c:	f7fa fa24 	bl	80047c8 <RCC_APB1PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:351
        //Connect TIM Channels to Port Alternate Function 
        GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_1);        
 800a380:	4b19      	ldr	r3, [pc, #100]	; (800a3e8 <pinConfig+0x7a0>)
 800a382:	1c18      	adds	r0, r3, #0
 800a384:	2105      	movs	r1, #5
 800a386:	2201      	movs	r2, #1
 800a388:	f7f8 fe66 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:352
        TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 800a38c:	4a17      	ldr	r2, [pc, #92]	; (800a3ec <pinConfig+0x7a4>)
 800a38e:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <pinConfig+0x798>)
 800a390:	1c10      	adds	r0, r2, #0
 800a392:	1c19      	adds	r1, r3, #0
 800a394:	f7fc fb5c 	bl	8006a50 <TIM_TimeBaseInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:353
        TIM_OC2Init(TIM3, &TIM_OCInitStructure);
 800a398:	4a14      	ldr	r2, [pc, #80]	; (800a3ec <pinConfig+0x7a4>)
 800a39a:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <pinConfig+0x79c>)
 800a39c:	1c10      	adds	r0, r2, #0
 800a39e:	1c19      	adds	r1, r3, #0
 800a3a0:	f7fc fe46 	bl	8007030 <TIM_OC2Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:355
        //enable Frequ and pulse update
        TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
 800a3a4:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <pinConfig+0x7a4>)
 800a3a6:	1c18      	adds	r0, r3, #0
 800a3a8:	2108      	movs	r1, #8
 800a3aa:	f7fd fa2b 	bl	8007804 <TIM_OC2PreloadConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:356
        TIM_SelectOnePulseMode(TIM3, TIM_OPMode_Repetitive); 
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <pinConfig+0x7a4>)
 800a3b0:	1c18      	adds	r0, r3, #0
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	f7fc fca8 	bl	8006d08 <TIM_SelectOnePulseMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:357
        TIM_Cmd(TIM3, ENABLE);
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	; (800a3ec <pinConfig+0x7a4>)
 800a3ba:	1c18      	adds	r0, r3, #0
 800a3bc:	2101      	movs	r1, #1
 800a3be:	f7fc fcdd 	bl	8006d7c <TIM_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:358
        TIM_CtrlPWMOutputs(TIM3, ENABLE);     
 800a3c2:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <pinConfig+0x7a4>)
 800a3c4:	1c18      	adds	r0, r3, #0
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	f7fc fd3a 	bl	8006e40 <TIM_CtrlPWMOutputs>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:359
        break;
 800a3cc:	e002      	b.n	800a3d4 <pinConfig+0x78c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:98
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    } else if(ArduinoPort[pin].GPIOx == GPIOF) {
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
    } else {
      //Error pin is not connected to STM32
      return;
 800a3ce:	46c0      	nop			; (mov r8, r8)
 800a3d0:	e000      	b.n	800a3d4 <pinConfig+0x78c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:361
        TIM_SelectOnePulseMode(TIM3, TIM_OPMode_Repetitive); 
        TIM_Cmd(TIM3, ENABLE);
        TIM_CtrlPWMOutputs(TIM3, ENABLE);     
        break;
      default:
        break;
 800a3d2:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:365
    } 
  }

}
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	b005      	add	sp, #20
 800a3d8:	bd90      	pop	{r4, r7, pc}
 800a3da:	46c0      	nop			; (mov r8, r8)
 800a3dc:	40012c00 	.word	0x40012c00
 800a3e0:	200002b4 	.word	0x200002b4
 800a3e4:	200002c0 	.word	0x200002c0
 800a3e8:	48000400 	.word	0x48000400
 800a3ec:	40000400 	.word	0x40000400

0800a3f0 <pinMode>:
pinMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:372
/**
  * @brief  pinMode Arduino pin configuration
  * @param  INPUT or OUTPUT
  * @retval None
  */
void pinMode(uint16_t pin, uint16_t mode){
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	1c0a      	adds	r2, r1, #0
 800a3f8:	1dbb      	adds	r3, r7, #6
 800a3fa:	1c01      	adds	r1, r0, #0
 800a3fc:	8019      	strh	r1, [r3, #0]
 800a3fe:	1d3b      	adds	r3, r7, #4
 800a400:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:376
  /* Check the parameters */
  assert_param(IS_ARDUINO_PIN(pin));
  assert_param(IS_ARDUINO_MODE(mode));
  pinConfig(pin, mode);
 800a402:	1dbb      	adds	r3, r7, #6
 800a404:	881a      	ldrh	r2, [r3, #0]
 800a406:	1d3b      	adds	r3, r7, #4
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	1c10      	adds	r0, r2, #0
 800a40c:	1c19      	adds	r1, r3, #0
 800a40e:	f7ff fc1b 	bl	8009c48 <pinConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:377
}
 800a412:	46bd      	mov	sp, r7
 800a414:	b002      	add	sp, #8
 800a416:	bd80      	pop	{r7, pc}

0800a418 <pinSetMode>:
pinSetMode():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:387
  * This function is called to update pin mode when pin configuration in done
  *  from foreign function. Take care on use!!
  * @param  INPUT or OUTPUT
  * @retval None
  */
void pinSetMode(uint16_t pin, uint16_t mode){
 800a418:	b590      	push	{r4, r7, lr}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	1c0a      	adds	r2, r1, #0
 800a420:	1dbb      	adds	r3, r7, #6
 800a422:	1c01      	adds	r1, r0, #0
 800a424:	8019      	strh	r1, [r3, #0]
 800a426:	1d3b      	adds	r3, r7, #4
 800a428:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:391
  /* Check the parameters */
  assert_param(IS_ARDUINO_PIN(pin));
  assert_param(IS_ARDUINO_MODE(mode));
  ArduinoPort[pin].PinMode = mode;  
 800a42a:	1dbb      	adds	r3, r7, #6
 800a42c:	881a      	ldrh	r2, [r3, #0]
 800a42e:	1d3b      	adds	r3, r7, #4
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	b2d9      	uxtb	r1, r3
 800a434:	4c06      	ldr	r4, [pc, #24]	; (800a450 <pinSetMode+0x38>)
 800a436:	2008      	movs	r0, #8
 800a438:	1c13      	adds	r3, r2, #0
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	189b      	adds	r3, r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	18e3      	adds	r3, r4, r3
 800a442:	181b      	adds	r3, r3, r0
 800a444:	1c0a      	adds	r2, r1, #0
 800a446:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:392
}
 800a448:	46bd      	mov	sp, r7
 800a44a:	b003      	add	sp, #12
 800a44c:	bd90      	pop	{r4, r7, pc}
 800a44e:	46c0      	nop			; (mov r8, r8)
 800a450:	20000038 	.word	0x20000038

0800a454 <digitalRead>:
digitalRead():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:400
/**
  * @brief  digitalRead Read GPIO Arduino pin value 
  * @param  pin number
  * @retval HIGH or LOW
  */
uint16_t digitalRead(uint16_t pin){
 800a454:	b590      	push	{r4, r7, lr}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	1c02      	adds	r2, r0, #0
 800a45c:	1dbb      	adds	r3, r7, #6
 800a45e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:401
  uint16_t L_oldType = ArduinoPort[pin].PinMode; //Does the pin already configured?
 800a460:	1dbb      	adds	r3, r7, #6
 800a462:	881a      	ldrh	r2, [r3, #0]
 800a464:	482e      	ldr	r0, [pc, #184]	; (800a520 <digitalRead+0xcc>)
 800a466:	2108      	movs	r1, #8
 800a468:	1c13      	adds	r3, r2, #0
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	189b      	adds	r3, r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	18c3      	adds	r3, r0, r3
 800a472:	185b      	adds	r3, r3, r1
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	1c3b      	adds	r3, r7, #0
 800a478:	330c      	adds	r3, #12
 800a47a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:408
  
  /* Check the parameters */
  assert_param(IS_ARDUINO_PIN(pin));
  
  //Verify Pin configuration. Is it already configured?
  if(L_oldType == NOT_CONFIGURED) {
 800a47c:	1c3b      	adds	r3, r7, #0
 800a47e:	330c      	adds	r3, #12
 800a480:	881b      	ldrh	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d105      	bne.n	800a492 <digitalRead+0x3e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:410
    //Pin is not configured : Config pin as INPUT
    pinMode(pin, INPUT);
 800a486:	1dbb      	adds	r3, r7, #6
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	1c18      	adds	r0, r3, #0
 800a48c:	2101      	movs	r1, #1
 800a48e:	f7ff ffaf 	bl	800a3f0 <pinMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:413
  }
  //If PinMode bit 0 =1 (odd) Pin is already configured as INPUT
  if(L_oldType & 0x01) {
 800a492:	1c3b      	adds	r3, r7, #0
 800a494:	330c      	adds	r3, #12
 800a496:	881a      	ldrh	r2, [r3, #0]
 800a498:	2301      	movs	r3, #1
 800a49a:	4013      	ands	r3, r2
 800a49c:	d01a      	beq.n	800a4d4 <digitalRead+0x80>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:414
    L_pinVal = GPIO_ReadInputDataBit(ArduinoPort[pin].GPIOx, ArduinoPort[pin].PinNum);
 800a49e:	1dbb      	adds	r3, r7, #6
 800a4a0:	881a      	ldrh	r2, [r3, #0]
 800a4a2:	491f      	ldr	r1, [pc, #124]	; (800a520 <digitalRead+0xcc>)
 800a4a4:	1c13      	adds	r3, r2, #0
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	189b      	adds	r3, r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	18cb      	adds	r3, r1, r3
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	6819      	ldr	r1, [r3, #0]
 800a4b2:	1dbb      	adds	r3, r7, #6
 800a4b4:	881a      	ldrh	r2, [r3, #0]
 800a4b6:	481a      	ldr	r0, [pc, #104]	; (800a520 <digitalRead+0xcc>)
 800a4b8:	1c13      	adds	r3, r2, #0
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	189b      	adds	r3, r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	5a1b      	ldrh	r3, [r3, r0]
 800a4c2:	1c3c      	adds	r4, r7, #0
 800a4c4:	340f      	adds	r4, #15
 800a4c6:	1c08      	adds	r0, r1, #0
 800a4c8:	1c19      	adds	r1, r3, #0
 800a4ca:	f7f8 fd23 	bl	8002f14 <GPIO_ReadInputDataBit>
 800a4ce:	1c03      	adds	r3, r0, #0
 800a4d0:	7023      	strb	r3, [r4, #0]
 800a4d2:	e019      	b.n	800a508 <digitalRead+0xb4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:416
  } else {
    L_pinVal = GPIO_ReadOutputDataBit(ArduinoPort[pin].GPIOx, ArduinoPort[pin].PinNum);
 800a4d4:	1dbb      	adds	r3, r7, #6
 800a4d6:	881a      	ldrh	r2, [r3, #0]
 800a4d8:	4911      	ldr	r1, [pc, #68]	; (800a520 <digitalRead+0xcc>)
 800a4da:	1c13      	adds	r3, r2, #0
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	189b      	adds	r3, r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	18cb      	adds	r3, r1, r3
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	6819      	ldr	r1, [r3, #0]
 800a4e8:	1dbb      	adds	r3, r7, #6
 800a4ea:	881a      	ldrh	r2, [r3, #0]
 800a4ec:	480c      	ldr	r0, [pc, #48]	; (800a520 <digitalRead+0xcc>)
 800a4ee:	1c13      	adds	r3, r2, #0
 800a4f0:	005b      	lsls	r3, r3, #1
 800a4f2:	189b      	adds	r3, r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	5a1b      	ldrh	r3, [r3, r0]
 800a4f8:	1c3c      	adds	r4, r7, #0
 800a4fa:	340f      	adds	r4, #15
 800a4fc:	1c08      	adds	r0, r1, #0
 800a4fe:	1c19      	adds	r1, r3, #0
 800a500:	f7f8 fd38 	bl	8002f74 <GPIO_ReadOutputDataBit>
 800a504:	1c03      	adds	r3, r0, #0
 800a506:	7023      	strb	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:419
  }
  //Ok, Pin is configured. then return its value!
  if(L_pinVal == (uint8_t)Bit_SET) {
 800a508:	1c3b      	adds	r3, r7, #0
 800a50a:	330f      	adds	r3, #15
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d101      	bne.n	800a516 <digitalRead+0xc2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:420
    return(HIGH);
 800a512:	2301      	movs	r3, #1
 800a514:	e000      	b.n	800a518 <digitalRead+0xc4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:422
  } else {
    return(LOW);
 800a516:	2300      	movs	r3, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:424
  }
}
 800a518:	1c18      	adds	r0, r3, #0
 800a51a:	46bd      	mov	sp, r7
 800a51c:	b005      	add	sp, #20
 800a51e:	bd90      	pop	{r4, r7, pc}
 800a520:	20000038 	.word	0x20000038

0800a524 <digitalWrite>:
digitalWrite():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:431
/**
  * @brief  digitalWrite Write value to GPIO Arduino pin 
  * @param  pin number, value to write HIGH or LOW
  * @retval None
  */
void digitalWrite(uint16_t pin, uint16_t value) {
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	1c0a      	adds	r2, r1, #0
 800a52c:	1dbb      	adds	r3, r7, #6
 800a52e:	1c01      	adds	r1, r0, #0
 800a530:	8019      	strh	r1, [r3, #0]
 800a532:	1d3b      	adds	r3, r7, #4
 800a534:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:432
  uint16_t L_oldType = ArduinoPort[pin].PinMode; //Does the pin already configured
 800a536:	1dbb      	adds	r3, r7, #6
 800a538:	881a      	ldrh	r2, [r3, #0]
 800a53a:	4838      	ldr	r0, [pc, #224]	; (800a61c <digitalWrite+0xf8>)
 800a53c:	2108      	movs	r1, #8
 800a53e:	1c13      	adds	r3, r2, #0
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	189b      	adds	r3, r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	18c3      	adds	r3, r0, r3
 800a548:	185b      	adds	r3, r3, r1
 800a54a:	781a      	ldrb	r2, [r3, #0]
 800a54c:	1c3b      	adds	r3, r7, #0
 800a54e:	330e      	adds	r3, #14
 800a550:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:438
  /* Check the parameters */
  assert_param(IS_ARDUINO_PIN(pin));

  
  //If pin has not been configured or configured as INPUT only
  if(L_oldType == INPUT || L_oldType == NOT_CONFIGURED) { 
 800a552:	1c3b      	adds	r3, r7, #0
 800a554:	330e      	adds	r3, #14
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d004      	beq.n	800a566 <digitalWrite+0x42>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:438 (discriminator 1)
 800a55c:	1c3b      	adds	r3, r7, #0
 800a55e:	330e      	adds	r3, #14
 800a560:	881b      	ldrh	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d113      	bne.n	800a58e <digitalWrite+0x6a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:440
    //Set the pull_up/down regarding value to write
    if(value == HIGH) {
 800a566:	1d3b      	adds	r3, r7, #4
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d105      	bne.n	800a57a <digitalWrite+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:441
      pinConfig(pin,INPUT_PU);
 800a56e:	1dbb      	adds	r3, r7, #6
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	1c18      	adds	r0, r3, #0
 800a574:	2109      	movs	r1, #9
 800a576:	f7ff fb67 	bl	8009c48 <pinConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:443
    }
    if(value == LOW) {
 800a57a:	1d3b      	adds	r3, r7, #4
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d105      	bne.n	800a58e <digitalWrite+0x6a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:444
      pinConfig(pin,INPUT_PD);
 800a582:	1dbb      	adds	r3, r7, #6
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	1c18      	adds	r0, r3, #0
 800a588:	210b      	movs	r1, #11
 800a58a:	f7ff fb5d 	bl	8009c48 <pinConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:447
    }    
  }
  if(!(L_oldType & 0x0001)) {
 800a58e:	1c3b      	adds	r3, r7, #0
 800a590:	330e      	adds	r3, #14
 800a592:	881a      	ldrh	r2, [r3, #0]
 800a594:	2301      	movs	r3, #1
 800a596:	4013      	ands	r3, r2
 800a598:	d13d      	bne.n	800a616 <digitalWrite+0xf2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:449
    //If pin is configured as OUTPUT mode but not AF or AN
    if(L_oldType != OUTPUT_AF && L_oldType != OUTPUT_AN) {
 800a59a:	1c3b      	adds	r3, r7, #0
 800a59c:	330e      	adds	r3, #14
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	2b04      	cmp	r3, #4
 800a5a2:	d038      	beq.n	800a616 <digitalWrite+0xf2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:449 (discriminator 1)
 800a5a4:	1c3b      	adds	r3, r7, #0
 800a5a6:	330e      	adds	r3, #14
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	2b06      	cmp	r3, #6
 800a5ac:	d033      	beq.n	800a616 <digitalWrite+0xf2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:450
      if(value == HIGH) {
 800a5ae:	1d3b      	adds	r3, r7, #4
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d115      	bne.n	800a5e2 <digitalWrite+0xbe>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:451
        GPIO_SetBits(ArduinoPort[pin].GPIOx, ArduinoPort[pin].PinNum);
 800a5b6:	1dbb      	adds	r3, r7, #6
 800a5b8:	881a      	ldrh	r2, [r3, #0]
 800a5ba:	4918      	ldr	r1, [pc, #96]	; (800a61c <digitalWrite+0xf8>)
 800a5bc:	1c13      	adds	r3, r2, #0
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	189b      	adds	r3, r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	18cb      	adds	r3, r1, r3
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	6819      	ldr	r1, [r3, #0]
 800a5ca:	1dbb      	adds	r3, r7, #6
 800a5cc:	881a      	ldrh	r2, [r3, #0]
 800a5ce:	4813      	ldr	r0, [pc, #76]	; (800a61c <digitalWrite+0xf8>)
 800a5d0:	1c13      	adds	r3, r2, #0
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	189b      	adds	r3, r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	5a1b      	ldrh	r3, [r3, r0]
 800a5da:	1c08      	adds	r0, r1, #0
 800a5dc:	1c19      	adds	r1, r3, #0
 800a5de:	f7f8 fcf9 	bl	8002fd4 <GPIO_SetBits>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:453
      }
      if(value == LOW) {
 800a5e2:	1d3b      	adds	r3, r7, #4
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d115      	bne.n	800a616 <digitalWrite+0xf2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:454
        GPIO_ResetBits(ArduinoPort[pin].GPIOx, ArduinoPort[pin].PinNum);
 800a5ea:	1dbb      	adds	r3, r7, #6
 800a5ec:	881a      	ldrh	r2, [r3, #0]
 800a5ee:	490b      	ldr	r1, [pc, #44]	; (800a61c <digitalWrite+0xf8>)
 800a5f0:	1c13      	adds	r3, r2, #0
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	189b      	adds	r3, r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	18cb      	adds	r3, r1, r3
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	6819      	ldr	r1, [r3, #0]
 800a5fe:	1dbb      	adds	r3, r7, #6
 800a600:	881a      	ldrh	r2, [r3, #0]
 800a602:	4806      	ldr	r0, [pc, #24]	; (800a61c <digitalWrite+0xf8>)
 800a604:	1c13      	adds	r3, r2, #0
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	189b      	adds	r3, r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	5a1b      	ldrh	r3, [r3, r0]
 800a60e:	1c08      	adds	r0, r1, #0
 800a610:	1c19      	adds	r1, r3, #0
 800a612:	f7f8 fced 	bl	8002ff0 <GPIO_ResetBits>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:459
      }     
    }
  }
    
}
 800a616:	46bd      	mov	sp, r7
 800a618:	b004      	add	sp, #16
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	20000038 	.word	0x20000038

0800a620 <analogRead>:
analogRead():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:467
/**
  * @brief  analogRead Read GPIO Arduino pin value 
  * @param  pin number
  * @retval 0 to max STM32 ADC value
  */
uint16_t analogRead(uint16_t pin){
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	1c02      	adds	r2, r0, #0
 800a628:	1dbb      	adds	r3, r7, #6
 800a62a:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:468
  uint16_t L_oldType = ArduinoPort[pin].PinMode; //Does the pin already configured?
 800a62c:	1dbb      	adds	r3, r7, #6
 800a62e:	881a      	ldrh	r2, [r3, #0]
 800a630:	485f      	ldr	r0, [pc, #380]	; (800a7b0 <analogRead+0x190>)
 800a632:	2108      	movs	r1, #8
 800a634:	1c13      	adds	r3, r2, #0
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	189b      	adds	r3, r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	18c3      	adds	r3, r0, r3
 800a63e:	185b      	adds	r3, r3, r1
 800a640:	781a      	ldrb	r2, [r3, #0]
 800a642:	1c3b      	adds	r3, r7, #0
 800a644:	330a      	adds	r3, #10
 800a646:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:470
  uint32_t L_adcChannel;
  uint16_t L_ADCConvertedValue=0;
 800a648:	1c3b      	adds	r3, r7, #0
 800a64a:	3308      	adds	r3, #8
 800a64c:	2200      	movs	r2, #0
 800a64e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:473
  /* Check the parameters */
  assert_param(IS_ADC_PIN(pin));
  switch(pin){
 800a650:	1dbb      	adds	r3, r7, #6
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	3b0e      	subs	r3, #14
 800a656:	2b05      	cmp	r3, #5
 800a658:	d82e      	bhi.n	800a6b8 <analogRead+0x98>
 800a65a:	009a      	lsls	r2, r3, #2
 800a65c:	4b55      	ldr	r3, [pc, #340]	; (800a7b4 <analogRead+0x194>)
 800a65e:	18d3      	adds	r3, r2, r3
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	469f      	mov	pc, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:476
      //pin to configure or to get value from
      case A0:
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800a664:	4b54      	ldr	r3, [pc, #336]	; (800a7b8 <analogRead+0x198>)
 800a666:	2201      	movs	r2, #1
 800a668:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:477
        L_adcChannel = ADC_Channel_10;
 800a66a:	2380      	movs	r3, #128	; 0x80
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:478
        break;
 800a670:	e029      	b.n	800a6c6 <analogRead+0xa6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:480
      case A1:
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 800a672:	4b51      	ldr	r3, [pc, #324]	; (800a7b8 <analogRead+0x198>)
 800a674:	2202      	movs	r2, #2
 800a676:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:481
        L_adcChannel = ADC_Channel_11;
 800a678:	2380      	movs	r3, #128	; 0x80
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:482
        break;
 800a67e:	e022      	b.n	800a6c6 <analogRead+0xa6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:484
      case A2:
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800a680:	4b4d      	ldr	r3, [pc, #308]	; (800a7b8 <analogRead+0x198>)
 800a682:	2204      	movs	r2, #4
 800a684:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:485
        L_adcChannel = ADC_Channel_12;
 800a686:	2380      	movs	r3, #128	; 0x80
 800a688:	015b      	lsls	r3, r3, #5
 800a68a:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:486
       break;
 800a68c:	e01b      	b.n	800a6c6 <analogRead+0xa6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:488
      case A3:
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 800a68e:	4b4a      	ldr	r3, [pc, #296]	; (800a7b8 <analogRead+0x198>)
 800a690:	2208      	movs	r2, #8
 800a692:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:489
        L_adcChannel = ADC_Channel_13;
 800a694:	2380      	movs	r3, #128	; 0x80
 800a696:	019b      	lsls	r3, r3, #6
 800a698:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:490
        break;
 800a69a:	e014      	b.n	800a6c6 <analogRead+0xa6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:492
      case A4:
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 800a69c:	4b46      	ldr	r3, [pc, #280]	; (800a7b8 <analogRead+0x198>)
 800a69e:	2210      	movs	r2, #16
 800a6a0:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:493
        L_adcChannel = ADC_Channel_14;
 800a6a2:	2380      	movs	r3, #128	; 0x80
 800a6a4:	01db      	lsls	r3, r3, #7
 800a6a6:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:494
        break;
 800a6a8:	e00d      	b.n	800a6c6 <analogRead+0xa6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:496
      case A5:
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 800a6aa:	4b43      	ldr	r3, [pc, #268]	; (800a7b8 <analogRead+0x198>)
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:497
        L_adcChannel = ADC_Channel_15;
 800a6b0:	2380      	movs	r3, #128	; 0x80
 800a6b2:	021b      	lsls	r3, r3, #8
 800a6b4:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:498
        break;
 800a6b6:	e006      	b.n	800a6c6 <analogRead+0xa6>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:500
      default:
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800a6b8:	4b3f      	ldr	r3, [pc, #252]	; (800a7b8 <analogRead+0x198>)
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:501
        L_adcChannel = ADC_Channel_10;
 800a6be:	2380      	movs	r3, #128	; 0x80
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:502
        break;
 800a6c4:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:504
  }
  if(L_oldType != INPUT_AN) {
 800a6c6:	1c3b      	adds	r3, r7, #0
 800a6c8:	330a      	adds	r3, #10
 800a6ca:	881b      	ldrh	r3, [r3, #0]
 800a6cc:	2b05      	cmp	r3, #5
 800a6ce:	d047      	beq.n	800a760 <analogRead+0x140>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:507
  //Pin was not correctly configured! Do it first!
    //ADC Config
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800a6d0:	2380      	movs	r3, #128	; 0x80
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	1c18      	adds	r0, r3, #0
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	f7fa f858 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:508
    ADC_DeInit(ADC1);
 800a6dc:	4b37      	ldr	r3, [pc, #220]	; (800a7bc <analogRead+0x19c>)
 800a6de:	1c18      	adds	r0, r3, #0
 800a6e0:	f7f6 fa9e 	bl	8000c20 <ADC_DeInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:509
    ADC_StructInit(&ADC_InitStructure);
 800a6e4:	4b36      	ldr	r3, [pc, #216]	; (800a7c0 <analogRead+0x1a0>)
 800a6e6:	1c18      	adds	r0, r3, #0
 800a6e8:	f7f6 fae0 	bl	8000cac <ADC_StructInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:510
    ADC_InitStructure.ADC_ContinuousConvMode = ENABLE; 
 800a6ec:	4b34      	ldr	r3, [pc, #208]	; (800a7c0 <analogRead+0x1a0>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:513

    /* GPIOC config for ADC */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800a6f2:	2380      	movs	r3, #128	; 0x80
 800a6f4:	031b      	lsls	r3, r3, #12
 800a6f6:	1c18      	adds	r0, r3, #0
 800a6f8:	2101      	movs	r1, #1
 800a6fa:	f7fa f829 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:514
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800a6fe:	4b2e      	ldr	r3, [pc, #184]	; (800a7b8 <analogRead+0x198>)
 800a700:	2203      	movs	r2, #3
 800a702:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:515
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800a704:	4b2c      	ldr	r3, [pc, #176]	; (800a7b8 <analogRead+0x198>)
 800a706:	2200      	movs	r2, #0
 800a708:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:517
    //Config pin as AN    
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 800a70a:	4a2e      	ldr	r2, [pc, #184]	; (800a7c4 <analogRead+0x1a4>)
 800a70c:	4b2a      	ldr	r3, [pc, #168]	; (800a7b8 <analogRead+0x198>)
 800a70e:	1c10      	adds	r0, r2, #0
 800a710:	1c19      	adds	r1, r3, #0
 800a712:	f7f8 fb29 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:519
    //Config ADC
    ADC_Init(ADC1, &ADC_InitStructure); 
 800a716:	4a29      	ldr	r2, [pc, #164]	; (800a7bc <analogRead+0x19c>)
 800a718:	4b29      	ldr	r3, [pc, #164]	; (800a7c0 <analogRead+0x1a0>)
 800a71a:	1c10      	adds	r0, r2, #0
 800a71c:	1c19      	adds	r1, r3, #0
 800a71e:	f7f6 fa99 	bl	8000c54 <ADC_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:521
    /* ADC Calibration */
    ADC_GetCalibrationFactor(ADC1);
 800a722:	4b26      	ldr	r3, [pc, #152]	; (800a7bc <analogRead+0x19c>)
 800a724:	1c18      	adds	r0, r3, #0
 800a726:	f7f6 fc8f 	bl	8001048 <ADC_GetCalibrationFactor>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:522
    ADC_Cmd(ADC1, ENABLE);      
 800a72a:	4b24      	ldr	r3, [pc, #144]	; (800a7bc <analogRead+0x19c>)
 800a72c:	1c18      	adds	r0, r3, #0
 800a72e:	2101      	movs	r1, #1
 800a730:	f7f6 fad6 	bl	8000ce0 <ADC_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:524
    /* Wait the ADCEN falg */
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_ADEN)); 
 800a734:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:524 (discriminator 1)
 800a736:	4a21      	ldr	r2, [pc, #132]	; (800a7bc <analogRead+0x19c>)
 800a738:	4b23      	ldr	r3, [pc, #140]	; (800a7c8 <analogRead+0x1a8>)
 800a73a:	1c10      	adds	r0, r2, #0
 800a73c:	1c19      	adds	r1, r3, #0
 800a73e:	f7f6 fd2b 	bl	8001198 <ADC_GetFlagStatus>
 800a742:	1c03      	adds	r3, r0, #0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0f6      	beq.n	800a736 <analogRead+0x116>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:526
     //Pin is configured as ADC INPUT now.
    ArduinoPort[pin].PinMode = INPUT_AN;
 800a748:	1dbb      	adds	r3, r7, #6
 800a74a:	881a      	ldrh	r2, [r3, #0]
 800a74c:	4818      	ldr	r0, [pc, #96]	; (800a7b0 <analogRead+0x190>)
 800a74e:	2108      	movs	r1, #8
 800a750:	1c13      	adds	r3, r2, #0
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	189b      	adds	r3, r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	18c3      	adds	r3, r0, r3
 800a75a:	185b      	adds	r3, r3, r1
 800a75c:	2205      	movs	r2, #5
 800a75e:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:529
  }
  //Select channel to scan
  ADC_ChannelConfig(ADC1, L_adcChannel , ADC_SampleTime_239_5Cycles);  
 800a760:	4a16      	ldr	r2, [pc, #88]	; (800a7bc <analogRead+0x19c>)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	1c10      	adds	r0, r2, #0
 800a766:	1c19      	adds	r1, r3, #0
 800a768:	2207      	movs	r2, #7
 800a76a:	f7f6 fbf7 	bl	8000f5c <ADC_ChannelConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:531
  // ADC1 regular Software Start Conv 
  ADC_StartOfConversion(ADC1);
 800a76e:	4b13      	ldr	r3, [pc, #76]	; (800a7bc <analogRead+0x19c>)
 800a770:	1c18      	adds	r0, r3, #0
 800a772:	f7f6 fca7 	bl	80010c4 <ADC_StartOfConversion>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:533
  // Wait for end of conversion 
  while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 800a776:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:533 (discriminator 1)
 800a778:	4b10      	ldr	r3, [pc, #64]	; (800a7bc <analogRead+0x19c>)
 800a77a:	1c18      	adds	r0, r3, #0
 800a77c:	2104      	movs	r1, #4
 800a77e:	f7f6 fd0b 	bl	8001198 <ADC_GetFlagStatus>
 800a782:	1c03      	adds	r3, r0, #0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0f7      	beq.n	800a778 <analogRead+0x158>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:535
  //Get value
  L_ADCConvertedValue = ADC_GetConversionValue(ADC1);
 800a788:	1c3c      	adds	r4, r7, #0
 800a78a:	3408      	adds	r4, #8
 800a78c:	4b0b      	ldr	r3, [pc, #44]	; (800a7bc <analogRead+0x19c>)
 800a78e:	1c18      	adds	r0, r3, #0
 800a790:	f7f6 fca6 	bl	80010e0 <ADC_GetConversionValue>
 800a794:	1c03      	adds	r3, r0, #0
 800a796:	8023      	strh	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:537
  //Stop conversion and return ADC value.
  ADC_StopOfConversion(ADC1);
 800a798:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <analogRead+0x19c>)
 800a79a:	1c18      	adds	r0, r3, #0
 800a79c:	f7f6 fc84 	bl	80010a8 <ADC_StopOfConversion>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:538
  return(L_ADCConvertedValue);  
 800a7a0:	1c3b      	adds	r3, r7, #0
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	881b      	ldrh	r3, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:539
}
 800a7a6:	1c18      	adds	r0, r3, #0
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	b005      	add	sp, #20
 800a7ac:	bd90      	pop	{r4, r7, pc}
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	20000038 	.word	0x20000038
 800a7b4:	0800b7ac 	.word	0x0800b7ac
 800a7b8:	200002a0 	.word	0x200002a0
 800a7bc:	40012400 	.word	0x40012400
 800a7c0:	200002d4 	.word	0x200002d4
 800a7c4:	48000800 	.word	0x48000800
 800a7c8:	01000001 	.word	0x01000001

0800a7cc <analogWrite>:
analogWrite():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:547
/**
  * @brief  analogWrite generate pwm output based on value  
  * @param  pin number, value = % of max possible output 
  * @retval None
  */
void analogWrite(uint16_t pin, uint16_t value){
 800a7cc:	b590      	push	{r4, r7, lr}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	1c0a      	adds	r2, r1, #0
 800a7d4:	1dbb      	adds	r3, r7, #6
 800a7d6:	1c01      	adds	r1, r0, #0
 800a7d8:	8019      	strh	r1, [r3, #0]
 800a7da:	1d3b      	adds	r3, r7, #4
 800a7dc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:548
  uint16_t L_oldType = ArduinoPort[pin].PinMode; //Does the pin already configured?
 800a7de:	1dbb      	adds	r3, r7, #6
 800a7e0:	881a      	ldrh	r2, [r3, #0]
 800a7e2:	4831      	ldr	r0, [pc, #196]	; (800a8a8 <analogWrite+0xdc>)
 800a7e4:	2108      	movs	r1, #8
 800a7e6:	1c13      	adds	r3, r2, #0
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	189b      	adds	r3, r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	18c3      	adds	r3, r0, r3
 800a7f0:	185b      	adds	r3, r3, r1
 800a7f2:	781a      	ldrb	r2, [r3, #0]
 800a7f4:	1c3b      	adds	r3, r7, #0
 800a7f6:	330e      	adds	r3, #14
 800a7f8:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:553
  uint16_t ChannelPulse;
  /* Check the parameters */
  assert_param(IS_PWM_PIN(pin));

  if(L_oldType != OUTPUT_AF){
 800a7fa:	1c3b      	adds	r3, r7, #0
 800a7fc:	330e      	adds	r3, #14
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	2b04      	cmp	r3, #4
 800a802:	d005      	beq.n	800a810 <analogWrite+0x44>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:555
  //Pin was not correctly configured! Do it first!
    pinConfig(pin, OUTPUT_AF);
 800a804:	1dbb      	adds	r3, r7, #6
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	1c18      	adds	r0, r3, #0
 800a80a:	2104      	movs	r1, #4
 800a80c:	f7ff fa1c 	bl	8009c48 <pinConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:558
  }
  
  ChannelPulse = (uint16_t) (((uint32_t)value * (ArduinoPort[pin].pwmPeriod - 1)) / 100);
 800a810:	1d3b      	adds	r3, r7, #4
 800a812:	8819      	ldrh	r1, [r3, #0]
 800a814:	1dbb      	adds	r3, r7, #6
 800a816:	881a      	ldrh	r2, [r3, #0]
 800a818:	4c23      	ldr	r4, [pc, #140]	; (800a8a8 <analogWrite+0xdc>)
 800a81a:	2008      	movs	r0, #8
 800a81c:	1c13      	adds	r3, r2, #0
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	189b      	adds	r3, r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	18e3      	adds	r3, r4, r3
 800a826:	181b      	adds	r3, r3, r0
 800a828:	885b      	ldrh	r3, [r3, #2]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	434b      	muls	r3, r1
 800a82e:	1c18      	adds	r0, r3, #0
 800a830:	2164      	movs	r1, #100	; 0x64
 800a832:	f7f5 fcc1 	bl	80001b8 <__aeabi_uidiv>
 800a836:	1c03      	adds	r3, r0, #0
 800a838:	1c1a      	adds	r2, r3, #0
 800a83a:	1c3b      	adds	r3, r7, #0
 800a83c:	330c      	adds	r3, #12
 800a83e:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:559
   switch(pin){
 800a840:	1dbb      	adds	r3, r7, #6
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	3b03      	subs	r3, #3
 800a846:	2b08      	cmp	r3, #8
 800a848:	d829      	bhi.n	800a89e <analogWrite+0xd2>
 800a84a:	009a      	lsls	r2, r3, #2
 800a84c:	4b17      	ldr	r3, [pc, #92]	; (800a8ac <analogWrite+0xe0>)
 800a84e:	18d3      	adds	r3, r2, r3
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	469f      	mov	pc, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:561
      case 3:
        TIM2->CCR4 = ChannelPulse;
 800a854:	2380      	movs	r3, #128	; 0x80
 800a856:	05db      	lsls	r3, r3, #23
 800a858:	1c3a      	adds	r2, r7, #0
 800a85a:	320c      	adds	r2, #12
 800a85c:	8812      	ldrh	r2, [r2, #0]
 800a85e:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:562
        break;
 800a860:	e01e      	b.n	800a8a0 <analogWrite+0xd4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:564
      case 5:
        TIM17->CCR1 = ChannelPulse;
 800a862:	4b13      	ldr	r3, [pc, #76]	; (800a8b0 <analogWrite+0xe4>)
 800a864:	1c3a      	adds	r2, r7, #0
 800a866:	320c      	adds	r2, #12
 800a868:	8812      	ldrh	r2, [r2, #0]
 800a86a:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:565
        break;
 800a86c:	e018      	b.n	800a8a0 <analogWrite+0xd4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:567
      case 6:
        TIM16->CCR1 = ChannelPulse;
 800a86e:	4b11      	ldr	r3, [pc, #68]	; (800a8b4 <analogWrite+0xe8>)
 800a870:	1c3a      	adds	r2, r7, #0
 800a872:	320c      	adds	r2, #12
 800a874:	8812      	ldrh	r2, [r2, #0]
 800a876:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:568
        break;
 800a878:	e012      	b.n	800a8a0 <analogWrite+0xd4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:570
      case 9:
        TIM14->CCR1 = ChannelPulse;
 800a87a:	4b0f      	ldr	r3, [pc, #60]	; (800a8b8 <analogWrite+0xec>)
 800a87c:	1c3a      	adds	r2, r7, #0
 800a87e:	320c      	adds	r2, #12
 800a880:	8812      	ldrh	r2, [r2, #0]
 800a882:	635a      	str	r2, [r3, #52]	; 0x34
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:571
        break;
 800a884:	e00c      	b.n	800a8a0 <analogWrite+0xd4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:573
      case 10:
        TIM1->CCR4 = ChannelPulse;
 800a886:	4b0d      	ldr	r3, [pc, #52]	; (800a8bc <analogWrite+0xf0>)
 800a888:	1c3a      	adds	r2, r7, #0
 800a88a:	320c      	adds	r2, #12
 800a88c:	8812      	ldrh	r2, [r2, #0]
 800a88e:	641a      	str	r2, [r3, #64]	; 0x40
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:574
        break;
 800a890:	e006      	b.n	800a8a0 <analogWrite+0xd4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:576
      case 11:
        TIM3->CCR2 = ChannelPulse;
 800a892:	4b0b      	ldr	r3, [pc, #44]	; (800a8c0 <analogWrite+0xf4>)
 800a894:	1c3a      	adds	r2, r7, #0
 800a896:	320c      	adds	r2, #12
 800a898:	8812      	ldrh	r2, [r2, #0]
 800a89a:	639a      	str	r2, [r3, #56]	; 0x38
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:577
        break;
 800a89c:	e000      	b.n	800a8a0 <analogWrite+0xd4>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:579
      default:
        break;
 800a89e:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:582
    } 
   
}
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	b005      	add	sp, #20
 800a8a4:	bd90      	pop	{r4, r7, pc}
 800a8a6:	46c0      	nop			; (mov r8, r8)
 800a8a8:	20000038 	.word	0x20000038
 800a8ac:	0800b7c4 	.word	0x0800b7c4
 800a8b0:	40014800 	.word	0x40014800
 800a8b4:	40014400 	.word	0x40014400
 800a8b8:	40002000 	.word	0x40002000
 800a8bc:	40012c00 	.word	0x40012c00
 800a8c0:	40000400 	.word	0x40000400

0800a8c4 <pwmFrequency>:
pwmFrequency():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:590
/**
  * @brief  pwmFrequency set pwm output frequency  
  * @param  pin number,  frequency in Hz
  * @retval None
  */
void pwmFrequency(uint16_t pin, uint16_t frequency){
 800a8c4:	b590      	push	{r4, r7, lr}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	1c0a      	adds	r2, r1, #0
 800a8cc:	1dbb      	adds	r3, r7, #6
 800a8ce:	1c01      	adds	r1, r0, #0
 800a8d0:	8019      	strh	r1, [r3, #0]
 800a8d2:	1d3b      	adds	r3, r7, #4
 800a8d4:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:591
  uint16_t L_oldType = ArduinoPort[pin].PinMode; //Does the pin already configured?
 800a8d6:	1dbb      	adds	r3, r7, #6
 800a8d8:	881a      	ldrh	r2, [r3, #0]
 800a8da:	4848      	ldr	r0, [pc, #288]	; (800a9fc <pwmFrequency+0x138>)
 800a8dc:	2108      	movs	r1, #8
 800a8de:	1c13      	adds	r3, r2, #0
 800a8e0:	005b      	lsls	r3, r3, #1
 800a8e2:	189b      	adds	r3, r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	18c3      	adds	r3, r0, r3
 800a8e8:	185b      	adds	r3, r3, r1
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	1c3b      	adds	r3, r7, #0
 800a8ee:	330e      	adds	r3, #14
 800a8f0:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:595
  /* Check the parameters */
  assert_param(IS_PWM_PIN(pin));

  if(L_oldType != OUTPUT_AF){
 800a8f2:	1c3b      	adds	r3, r7, #0
 800a8f4:	330e      	adds	r3, #14
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d005      	beq.n	800a908 <pwmFrequency+0x44>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:597
  //Pin was not correctly configured! Do it first!
    pinConfig(pin, OUTPUT_AF);
 800a8fc:	1dbb      	adds	r3, r7, #6
 800a8fe:	881b      	ldrh	r3, [r3, #0]
 800a900:	1c18      	adds	r0, r3, #0
 800a902:	2104      	movs	r1, #4
 800a904:	f7ff f9a0 	bl	8009c48 <pinConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:601
  }
  
  //Set pwm frequency 
   ArduinoPort[pin].pwmPeriod = (SystemCoreClock / frequency ) - 1;
 800a908:	1dbb      	adds	r3, r7, #6
 800a90a:	881c      	ldrh	r4, [r3, #0]
 800a90c:	4b3c      	ldr	r3, [pc, #240]	; (800aa00 <pwmFrequency+0x13c>)
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	1d3b      	adds	r3, r7, #4
 800a912:	881b      	ldrh	r3, [r3, #0]
 800a914:	1c10      	adds	r0, r2, #0
 800a916:	1c19      	adds	r1, r3, #0
 800a918:	f7f5 fc4e 	bl	80001b8 <__aeabi_uidiv>
 800a91c:	1c03      	adds	r3, r0, #0
 800a91e:	b29b      	uxth	r3, r3
 800a920:	3b01      	subs	r3, #1
 800a922:	b29a      	uxth	r2, r3
 800a924:	4835      	ldr	r0, [pc, #212]	; (800a9fc <pwmFrequency+0x138>)
 800a926:	2108      	movs	r1, #8
 800a928:	1c23      	adds	r3, r4, #0
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	191b      	adds	r3, r3, r4
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	18c3      	adds	r3, r0, r3
 800a932:	185b      	adds	r3, r3, r1
 800a934:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:602
   switch(pin){
 800a936:	1dbb      	adds	r3, r7, #6
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	3b03      	subs	r3, #3
 800a93c:	2b08      	cmp	r3, #8
 800a93e:	d859      	bhi.n	800a9f4 <pwmFrequency+0x130>
 800a940:	009a      	lsls	r2, r3, #2
 800a942:	4b30      	ldr	r3, [pc, #192]	; (800aa04 <pwmFrequency+0x140>)
 800a944:	18d3      	adds	r3, r2, r3
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	469f      	mov	pc, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:604
      case 3:
        TIM2->ARR = ArduinoPort[pin].pwmPeriod;
 800a94a:	2380      	movs	r3, #128	; 0x80
 800a94c:	05da      	lsls	r2, r3, #23
 800a94e:	1dbb      	adds	r3, r7, #6
 800a950:	8819      	ldrh	r1, [r3, #0]
 800a952:	4c2a      	ldr	r4, [pc, #168]	; (800a9fc <pwmFrequency+0x138>)
 800a954:	2008      	movs	r0, #8
 800a956:	1c0b      	adds	r3, r1, #0
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	185b      	adds	r3, r3, r1
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	18e3      	adds	r3, r4, r3
 800a960:	181b      	adds	r3, r3, r0
 800a962:	885b      	ldrh	r3, [r3, #2]
 800a964:	62d3      	str	r3, [r2, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:605
        break;
 800a966:	e046      	b.n	800a9f6 <pwmFrequency+0x132>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:607
      case 5:
        TIM17->ARR = ArduinoPort[pin].pwmPeriod;
 800a968:	4a27      	ldr	r2, [pc, #156]	; (800aa08 <pwmFrequency+0x144>)
 800a96a:	1dbb      	adds	r3, r7, #6
 800a96c:	8819      	ldrh	r1, [r3, #0]
 800a96e:	4c23      	ldr	r4, [pc, #140]	; (800a9fc <pwmFrequency+0x138>)
 800a970:	2008      	movs	r0, #8
 800a972:	1c0b      	adds	r3, r1, #0
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	185b      	adds	r3, r3, r1
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	18e3      	adds	r3, r4, r3
 800a97c:	181b      	adds	r3, r3, r0
 800a97e:	885b      	ldrh	r3, [r3, #2]
 800a980:	62d3      	str	r3, [r2, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:608
        break;
 800a982:	e038      	b.n	800a9f6 <pwmFrequency+0x132>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:610
      case 6:
        TIM16->ARR = ArduinoPort[pin].pwmPeriod;
 800a984:	4a21      	ldr	r2, [pc, #132]	; (800aa0c <pwmFrequency+0x148>)
 800a986:	1dbb      	adds	r3, r7, #6
 800a988:	8819      	ldrh	r1, [r3, #0]
 800a98a:	4c1c      	ldr	r4, [pc, #112]	; (800a9fc <pwmFrequency+0x138>)
 800a98c:	2008      	movs	r0, #8
 800a98e:	1c0b      	adds	r3, r1, #0
 800a990:	005b      	lsls	r3, r3, #1
 800a992:	185b      	adds	r3, r3, r1
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	18e3      	adds	r3, r4, r3
 800a998:	181b      	adds	r3, r3, r0
 800a99a:	885b      	ldrh	r3, [r3, #2]
 800a99c:	62d3      	str	r3, [r2, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:611
        break;
 800a99e:	e02a      	b.n	800a9f6 <pwmFrequency+0x132>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:613
      case 9:
        TIM14->ARR = ArduinoPort[pin].pwmPeriod;
 800a9a0:	4a1b      	ldr	r2, [pc, #108]	; (800aa10 <pwmFrequency+0x14c>)
 800a9a2:	1dbb      	adds	r3, r7, #6
 800a9a4:	8819      	ldrh	r1, [r3, #0]
 800a9a6:	4c15      	ldr	r4, [pc, #84]	; (800a9fc <pwmFrequency+0x138>)
 800a9a8:	2008      	movs	r0, #8
 800a9aa:	1c0b      	adds	r3, r1, #0
 800a9ac:	005b      	lsls	r3, r3, #1
 800a9ae:	185b      	adds	r3, r3, r1
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	18e3      	adds	r3, r4, r3
 800a9b4:	181b      	adds	r3, r3, r0
 800a9b6:	885b      	ldrh	r3, [r3, #2]
 800a9b8:	62d3      	str	r3, [r2, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:614
        break;
 800a9ba:	e01c      	b.n	800a9f6 <pwmFrequency+0x132>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:616
      case 10:
        TIM1->ARR = ArduinoPort[pin].pwmPeriod;
 800a9bc:	4a15      	ldr	r2, [pc, #84]	; (800aa14 <pwmFrequency+0x150>)
 800a9be:	1dbb      	adds	r3, r7, #6
 800a9c0:	8819      	ldrh	r1, [r3, #0]
 800a9c2:	4c0e      	ldr	r4, [pc, #56]	; (800a9fc <pwmFrequency+0x138>)
 800a9c4:	2008      	movs	r0, #8
 800a9c6:	1c0b      	adds	r3, r1, #0
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	185b      	adds	r3, r3, r1
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	18e3      	adds	r3, r4, r3
 800a9d0:	181b      	adds	r3, r3, r0
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	62d3      	str	r3, [r2, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:617
        break;
 800a9d6:	e00e      	b.n	800a9f6 <pwmFrequency+0x132>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:619
      case 11:
        TIM3->ARR = ArduinoPort[pin].pwmPeriod;
 800a9d8:	4a0f      	ldr	r2, [pc, #60]	; (800aa18 <pwmFrequency+0x154>)
 800a9da:	1dbb      	adds	r3, r7, #6
 800a9dc:	8819      	ldrh	r1, [r3, #0]
 800a9de:	4c07      	ldr	r4, [pc, #28]	; (800a9fc <pwmFrequency+0x138>)
 800a9e0:	2008      	movs	r0, #8
 800a9e2:	1c0b      	adds	r3, r1, #0
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	185b      	adds	r3, r3, r1
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	18e3      	adds	r3, r4, r3
 800a9ec:	181b      	adds	r3, r3, r0
 800a9ee:	885b      	ldrh	r3, [r3, #2]
 800a9f0:	62d3      	str	r3, [r2, #44]	; 0x2c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:620
        break;
 800a9f2:	e000      	b.n	800a9f6 <pwmFrequency+0x132>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:622
      default:
        break;
 800a9f4:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:624
    }       
}
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	b005      	add	sp, #20
 800a9fa:	bd90      	pop	{r4, r7, pc}
 800a9fc:	20000038 	.word	0x20000038
 800aa00:	20000024 	.word	0x20000024
 800aa04:	0800b7e8 	.word	0x0800b7e8
 800aa08:	40014800 	.word	0x40014800
 800aa0c:	40014400 	.word	0x40014400
 800aa10:	40002000 	.word	0x40002000
 800aa14:	40012c00 	.word	0x40012c00
 800aa18:	40000400 	.word	0x40000400

0800aa1c <getPinDef>:
getPinDef():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:632
/**
  * @brief  getPinDef return Arduino pin definition for given pin number
  * @param  pin Number 
  * @retval Pin definition
  */
GPIO_PinTypeDef getPinDef(uint16_t pin) {
 800aa1c:	b590      	push	{r4, r7, lr}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	1c0a      	adds	r2, r1, #0
 800aa26:	1cbb      	adds	r3, r7, #2
 800aa28:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:634
  //Return Arduino pin config
  return(ArduinoPort[pin]);
 800aa2a:	1cbb      	adds	r3, r7, #2
 800aa2c:	881a      	ldrh	r2, [r3, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	4906      	ldr	r1, [pc, #24]	; (800aa4c <getPinDef+0x30>)
 800aa32:	1c13      	adds	r3, r2, #0
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	189b      	adds	r3, r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	1c02      	adds	r2, r0, #0
 800aa3c:	18cb      	adds	r3, r1, r3
 800aa3e:	cb13      	ldmia	r3!, {r0, r1, r4}
 800aa40:	c213      	stmia	r2!, {r0, r1, r4}
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/gpio.c:635
}
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	46bd      	mov	sp, r7
 800aa46:	b003      	add	sp, #12
 800aa48:	bd90      	pop	{r4, r7, pc}
 800aa4a:	46c0      	nop			; (mov r8, r8)
 800aa4c:	20000038 	.word	0x20000038

0800aa50 <UART2_Init>:
UART2_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:74
/**
  * @brief  UART2_Init  Configures and initializes the UART module.
  * @param  Serial baud rate communication speed
  * @retval None
  */
static void UART2_Init(uint32_t baud_rate){
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b088      	sub	sp, #32
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:83
	8-bit data, no parity. 
	1 STOP bit. 
      */
  USART_InitTypeDef USART_InitStructure;

  GPIO_Configuration_USART2();
 800aa58:	f000 f920 	bl	800ac9c <GPIO_Configuration_USART2>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:85
     
  USART_InitStructure.USART_BaudRate = baud_rate;
 800aa5c:	1c3b      	adds	r3, r7, #0
 800aa5e:	3308      	adds	r3, #8
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:86
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800aa64:	1c3b      	adds	r3, r7, #0
 800aa66:	3308      	adds	r3, #8
 800aa68:	2200      	movs	r2, #0
 800aa6a:	605a      	str	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:87
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800aa6c:	1c3b      	adds	r3, r7, #0
 800aa6e:	3308      	adds	r3, #8
 800aa70:	2200      	movs	r2, #0
 800aa72:	609a      	str	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:88
  USART_InitStructure.USART_Parity = USART_Parity_No;
 800aa74:	1c3b      	adds	r3, r7, #0
 800aa76:	3308      	adds	r3, #8
 800aa78:	2200      	movs	r2, #0
 800aa7a:	60da      	str	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:89
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800aa7c:	1c3b      	adds	r3, r7, #0
 800aa7e:	3308      	adds	r3, #8
 800aa80:	2200      	movs	r2, #0
 800aa82:	615a      	str	r2, [r3, #20]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:90
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800aa84:	1c3b      	adds	r3, r7, #0
 800aa86:	3308      	adds	r3, #8
 800aa88:	220c      	movs	r2, #12
 800aa8a:	611a      	str	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:91
  USART_Init(USART2, &USART_InitStructure);  
 800aa8c:	4a0b      	ldr	r2, [pc, #44]	; (800aabc <UART2_Init+0x6c>)
 800aa8e:	1c3b      	adds	r3, r7, #0
 800aa90:	3308      	adds	r3, #8
 800aa92:	1c10      	adds	r0, r2, #0
 800aa94:	1c19      	adds	r1, r3, #0
 800aa96:	f7fe f935 	bl	8008d04 <USART_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:93
  
  NVIC_Configuration();
 800aa9a:	f000 f935 	bl	800ad08 <NVIC_Configuration>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:95
  
  USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800aa9e:	4a07      	ldr	r2, [pc, #28]	; (800aabc <UART2_Init+0x6c>)
 800aaa0:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <UART2_Init+0x70>)
 800aaa2:	1c10      	adds	r0, r2, #0
 800aaa4:	1c19      	adds	r1, r3, #0
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f7fe fdfa 	bl	80096a0 <USART_ITConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:97

  USART_Cmd(USART2, ENABLE);  
 800aaac:	4b03      	ldr	r3, [pc, #12]	; (800aabc <UART2_Init+0x6c>)
 800aaae:	1c18      	adds	r0, r3, #0
 800aab0:	2101      	movs	r1, #1
 800aab2:	f7fe fa29 	bl	8008f08 <USART_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:98
}
 800aab6:	46bd      	mov	sp, r7
 800aab8:	b008      	add	sp, #32
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	40004400 	.word	0x40004400
 800aac0:	00050105 	.word	0x00050105

0800aac4 <putchar>:
putchar():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:107
  * @brief  putchar Output a character to the usart
  * @param  int character to output
  * @retval None
  */
int putchar(int chr)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:109
   /* mask out any high bits */
   while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET)
 800aacc:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:109 (discriminator 1)
 800aace:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <putchar+0x40>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	1c18      	adds	r0, r3, #0
 800aad4:	2180      	movs	r1, #128	; 0x80
 800aad6:	f7fe fe5f 	bl	8009798 <USART_GetFlagStatus>
 800aada:	1c03      	adds	r3, r0, #0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0f6      	beq.n	800aace <putchar+0xa>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:111
      /* null */ ;
   USART_SendData(USARTx, (char)(chr & 0x7f));
 800aae0:	4b08      	ldr	r3, [pc, #32]	; (800ab04 <putchar+0x40>)
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	1c19      	adds	r1, r3, #0
 800aaea:	237f      	movs	r3, #127	; 0x7f
 800aaec:	400b      	ands	r3, r1
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	1c10      	adds	r0, r2, #0
 800aaf2:	1c19      	adds	r1, r3, #0
 800aaf4:	f7fe fbaa 	bl	800924c <USART_SendData>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:113
 
   return chr;  
 800aaf8:	687b      	ldr	r3, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:114
}
 800aafa:	1c18      	adds	r0, r3, #0
 800aafc:	46bd      	mov	sp, r7
 800aafe:	b002      	add	sp, #8
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	46c0      	nop			; (mov r8, r8)
 800ab04:	2000016c 	.word	0x2000016c

0800ab08 <begin_fcn>:
begin_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:122
/**
  * @brief  begin_fcn Configure Arduino communication port
  * @param  baudRate = usart speed
  * @retval None
  */
void begin_fcn(uint32_t baudRate) {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:123
  UART2_Init(baudRate);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	1c18      	adds	r0, r3, #0
 800ab14:	f7ff ff9c 	bl	800aa50 <UART2_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:124
  Serial.baudRate = baudRate;
 800ab18:	4b06      	ldr	r3, [pc, #24]	; (800ab34 <begin_fcn+0x2c>)
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:125
  pinSetMode(0, INPUT_AF); //pin 0 is Rx
 800ab1e:	2000      	movs	r0, #0
 800ab20:	2103      	movs	r1, #3
 800ab22:	f7ff fc79 	bl	800a418 <pinSetMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:126
  pinSetMode(1, OUTPUT_AF); //pin 1 is Tx
 800ab26:	2001      	movs	r0, #1
 800ab28:	2104      	movs	r1, #4
 800ab2a:	f7ff fc75 	bl	800a418 <pinSetMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:127
}
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	b002      	add	sp, #8
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	20000140 	.word	0x20000140

0800ab38 <available_fcn>:
available_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:134
/**
  * @brief  available_fcn Return the nb of received char
  * @param  None
  * @retval Nb of char to process from rcv_buffer 
  */
uint16_t available_fcn(void){
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:135
  return(nb_rcv_buff_char);
 800ab3c:	4b02      	ldr	r3, [pc, #8]	; (800ab48 <available_fcn+0x10>)
 800ab3e:	881b      	ldrh	r3, [r3, #0]
 800ab40:	b29b      	uxth	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:136
}
 800ab42:	1c18      	adds	r0, r3, #0
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	200003ec 	.word	0x200003ec

0800ab4c <flush_fcn>:
flush_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:144
/**
  * @brief  flush_fcn Reset all rcv_buff parameters
  * @param  None
  * @retval None
  */
void flush_fcn(void){
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:145
  pt_rcv_read = rcv_buff;   //reset circular read ptr
 800ab50:	4b08      	ldr	r3, [pc, #32]	; (800ab74 <flush_fcn+0x28>)
 800ab52:	4a09      	ldr	r2, [pc, #36]	; (800ab78 <flush_fcn+0x2c>)
 800ab54:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:146
  pt_rcv_write = rcv_buff;  //reset circular write ptr
 800ab56:	4b09      	ldr	r3, [pc, #36]	; (800ab7c <flush_fcn+0x30>)
 800ab58:	4a07      	ldr	r2, [pc, #28]	; (800ab78 <flush_fcn+0x2c>)
 800ab5a:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:147
  nb_rcv_buff_char = 0; //reset Nb of char to read in rcv_buff
 800ab5c:	4b08      	ldr	r3, [pc, #32]	; (800ab80 <flush_fcn+0x34>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:148
  rcv_buff_overload=0;  //reset Nb of char refused cause rcv_buff is full (overload)
 800ab62:	4b08      	ldr	r3, [pc, #32]	; (800ab84 <flush_fcn+0x38>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:149
  rcv_buff_full=0;         //reset rcv_buff is full.   
 800ab68:	4b07      	ldr	r3, [pc, #28]	; (800ab88 <flush_fcn+0x3c>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:150
}
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	46c0      	nop			; (mov r8, r8)
 800ab74:	20000164 	.word	0x20000164
 800ab78:	200002ec 	.word	0x200002ec
 800ab7c:	20000168 	.word	0x20000168
 800ab80:	200003ec 	.word	0x200003ec
 800ab84:	200003ee 	.word	0x200003ee
 800ab88:	200003f0 	.word	0x200003f0

0800ab8c <read_fcn>:
read_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:158
/**
  * @brief  read_fcn Return the first not read received char 
  * @param  None
  * @retval rcv char
  */
char read_fcn(void){
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:159
  char l_readChar = (char)-1; //Init with no char to read result
 800ab92:	1dfb      	adds	r3, r7, #7
 800ab94:	22ff      	movs	r2, #255	; 0xff
 800ab96:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:160
  if(nb_rcv_buff_char){
 800ab98:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <read_fcn+0x58>)
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d019      	beq.n	800abd6 <read_fcn+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:162
    //If there is char to read
    l_readChar = *pt_rcv_read++;
 800aba2:	4b11      	ldr	r3, [pc, #68]	; (800abe8 <read_fcn+0x5c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	1dfa      	adds	r2, r7, #7
 800aba8:	7819      	ldrb	r1, [r3, #0]
 800abaa:	7011      	strb	r1, [r2, #0]
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <read_fcn+0x5c>)
 800abb0:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:163
    nb_rcv_buff_char--;
 800abb2:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <read_fcn+0x58>)
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	3b01      	subs	r3, #1
 800abba:	b29a      	uxth	r2, r3
 800abbc:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <read_fcn+0x58>)
 800abbe:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:164
    rcv_buff_full = 0; //At least 1 char space free in rcv_buff
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <read_fcn+0x60>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:165
    if(pt_rcv_read > &rcv_buff[BUFFER_RCV_SIZE]) {
 800abc6:	4b08      	ldr	r3, [pc, #32]	; (800abe8 <read_fcn+0x5c>)
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	4b09      	ldr	r3, [pc, #36]	; (800abf0 <read_fcn+0x64>)
 800abcc:	429a      	cmp	r2, r3
 800abce:	d902      	bls.n	800abd6 <read_fcn+0x4a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:167
      //pointer rollover rcv_buffer
      pt_rcv_read = rcv_buff;
 800abd0:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <read_fcn+0x5c>)
 800abd2:	4a08      	ldr	r2, [pc, #32]	; (800abf4 <read_fcn+0x68>)
 800abd4:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:170
    }    
  }
  return(l_readChar);
 800abd6:	1dfb      	adds	r3, r7, #7
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	b25b      	sxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:171
}
 800abdc:	1c18      	adds	r0, r3, #0
 800abde:	46bd      	mov	sp, r7
 800abe0:	b002      	add	sp, #8
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	200003ec 	.word	0x200003ec
 800abe8:	20000164 	.word	0x20000164
 800abec:	200003f0 	.word	0x200003f0
 800abf0:	200003ec 	.word	0x200003ec
 800abf4:	200002ec 	.word	0x200002ec

0800abf8 <peek_fcn>:
peek_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:179
/**
  * @brief  peek_fcn Return the first char from buff but doesn't move read ptr
  * @param  None
  * @retval 1st rcv char
  */
char peek_fcn(void){
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:180
  char l_readChar = (char)-1; //Init with no char in rcv buff
 800abfe:	1dfb      	adds	r3, r7, #7
 800ac00:	22ff      	movs	r2, #255	; 0xff
 800ac02:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:181
  if(nb_rcv_buff_char){
 800ac04:	4b08      	ldr	r3, [pc, #32]	; (800ac28 <peek_fcn+0x30>)
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d004      	beq.n	800ac18 <peek_fcn+0x20>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:183
    //If there is char to peek
    l_readChar = *pt_rcv_read;
 800ac0e:	4b07      	ldr	r3, [pc, #28]	; (800ac2c <peek_fcn+0x34>)
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	1dfb      	adds	r3, r7, #7
 800ac14:	7812      	ldrb	r2, [r2, #0]
 800ac16:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:185
  }
  return(l_readChar);
 800ac18:	1dfb      	adds	r3, r7, #7
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	b25b      	sxtb	r3, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:186
}
 800ac1e:	1c18      	adds	r0, r3, #0
 800ac20:	46bd      	mov	sp, r7
 800ac22:	b002      	add	sp, #8
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	46c0      	nop			; (mov r8, r8)
 800ac28:	200003ec 	.word	0x200003ec
 800ac2c:	20000164 	.word	0x20000164

0800ac30 <write_fcn>:
write_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:194
/**
  * @brief  write_fcn Send a char on usart
  * @param  char to send
  * @retval None
  */
void write_fcn(unsigned char byte){
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	1c02      	adds	r2, r0, #0
 800ac38:	1dfb      	adds	r3, r7, #7
 800ac3a:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:195
  putchar(byte);
 800ac3c:	1dfb      	adds	r3, r7, #7
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	1c18      	adds	r0, r3, #0
 800ac42:	f7ff ff3f 	bl	800aac4 <putchar>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:196
}
 800ac46:	46bd      	mov	sp, r7
 800ac48:	b002      	add	sp, #8
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <print_fcn>:
print_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:203
/**
  * @brief  print_fcn Send a string on usart
  * @param  string to send
  * @retval None
  */
void print_fcn(char *string){
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:204
  char *l_i = string;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:206 (discriminator 1)
  do{
    putchar(*l_i++);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	b25b      	sxtb	r3, r3
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	3201      	adds	r2, #1
 800ac62:	60fa      	str	r2, [r7, #12]
 800ac64:	1c18      	adds	r0, r3, #0
 800ac66:	f7ff ff2d 	bl	800aac4 <putchar>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:207 (discriminator 1)
  } while(*l_i != 0);  
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1f2      	bne.n	800ac58 <print_fcn+0xc>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:208
}
 800ac72:	46bd      	mov	sp, r7
 800ac74:	b004      	add	sp, #16
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <println_fcn>:
println_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:215
/**
  * @brief  println_fcn Send a string on usart with carriage return
  * @param  string to send
  * @retval None
  */
void println_fcn(char *string){
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:216
  print_fcn(string);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	1c18      	adds	r0, r3, #0
 800ac84:	f7ff ffe2 	bl	800ac4c <print_fcn>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:217
  write_fcn('\r');
 800ac88:	200d      	movs	r0, #13
 800ac8a:	f7ff ffd1 	bl	800ac30 <write_fcn>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:218
  write_fcn('\n');  
 800ac8e:	200a      	movs	r0, #10
 800ac90:	f7ff ffce 	bl	800ac30 <write_fcn>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:219
}
 800ac94:	46bd      	mov	sp, r7
 800ac96:	b002      	add	sp, #8
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)

0800ac9c <GPIO_Configuration_USART2>:
GPIO_Configuration_USART2():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:228
  * @brief  GPIO_Configuration_USART2 Configures the different GPIO ports for UART.
  * @param  None
  * @retval None
  */
static void GPIO_Configuration_USART2(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:231
  GPIO_InitTypeDef GPIO_InitStructure;
  
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);  
 800aca2:	2380      	movs	r3, #128	; 0x80
 800aca4:	029b      	lsls	r3, r3, #10
 800aca6:	1c18      	adds	r0, r3, #0
 800aca8:	2101      	movs	r1, #1
 800acaa:	f7f9 fd51 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:233

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 800acae:	2380      	movs	r3, #128	; 0x80
 800acb0:	029b      	lsls	r3, r3, #10
 800acb2:	1c18      	adds	r0, r3, #0
 800acb4:	2101      	movs	r1, #1
 800acb6:	f7f9 fd87 	bl	80047c8 <RCC_APB1PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:235
 
  GPIO_PinAFConfig(UART_PORT, RX_PIN_SOURCE, GPIO_AF_1);
 800acba:	2390      	movs	r3, #144	; 0x90
 800acbc:	05db      	lsls	r3, r3, #23
 800acbe:	1c18      	adds	r0, r3, #0
 800acc0:	2103      	movs	r1, #3
 800acc2:	2201      	movs	r2, #1
 800acc4:	f7f8 f9c8 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:236
  GPIO_PinAFConfig(UART_PORT, TX_PIN_SOURCE, GPIO_AF_1);
 800acc8:	2390      	movs	r3, #144	; 0x90
 800acca:	05db      	lsls	r3, r3, #23
 800accc:	1c18      	adds	r0, r3, #0
 800acce:	2102      	movs	r1, #2
 800acd0:	2201      	movs	r2, #1
 800acd2:	f7f8 f9c1 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:239
   
  /* Configure UART1 pins:  Rx and Tx ----------------------------*/
  GPIO_InitStructure.GPIO_Pin =  TX_PIN | RX_PIN;
 800acd6:	1c3b      	adds	r3, r7, #0
 800acd8:	220c      	movs	r2, #12
 800acda:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:240
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800acdc:	1c3b      	adds	r3, r7, #0
 800acde:	2203      	movs	r2, #3
 800ace0:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:241
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800ace2:	1c3b      	adds	r3, r7, #0
 800ace4:	2202      	movs	r2, #2
 800ace6:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:242
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ace8:	1c3b      	adds	r3, r7, #0
 800acea:	2200      	movs	r2, #0
 800acec:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:243
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800acee:	1c3b      	adds	r3, r7, #0
 800acf0:	2201      	movs	r2, #1
 800acf2:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:245
  
  GPIO_Init(UART_PORT, &GPIO_InitStructure); 
 800acf4:	2390      	movs	r3, #144	; 0x90
 800acf6:	05da      	lsls	r2, r3, #23
 800acf8:	1c3b      	adds	r3, r7, #0
 800acfa:	1c10      	adds	r0, r2, #0
 800acfc:	1c19      	adds	r1, r3, #0
 800acfe:	f7f8 f833 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:247
  
}
 800ad02:	46bd      	mov	sp, r7
 800ad04:	b002      	add	sp, #8
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <NVIC_Configuration>:
NVIC_Configuration():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:256
  * @brief  Configures the nested vectored interrupt controller.
  * @param  None
  * @retval None
  */
static void NVIC_Configuration(void)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:261
  NVIC_InitTypeDef NVIC_InitStructure;

  
  /* Enable the USART2 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 800ad0e:	1d3b      	adds	r3, r7, #4
 800ad10:	221c      	movs	r2, #28
 800ad12:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:262
  NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 800ad14:	1d3b      	adds	r3, r7, #4
 800ad16:	2200      	movs	r2, #0
 800ad18:	705a      	strb	r2, [r3, #1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:263
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800ad1a:	1d3b      	adds	r3, r7, #4
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	709a      	strb	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:264
  NVIC_Init(&NVIC_InitStructure);
 800ad20:	1d3b      	adds	r3, r7, #4
 800ad22:	1c18      	adds	r0, r3, #0
 800ad24:	f7f8 ff82 	bl	8003c2c <NVIC_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:265
}
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b002      	add	sp, #8
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	46c0      	nop			; (mov r8, r8)

0800ad30 <USART2_IRQHandler>:
USART2_IRQHandler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:275
  * @brief  This function handles USART2 global interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 800ad30:	b590      	push	{r4, r7, lr}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:278
  uint16_t l_tmp; //Received char from USART2
  
  if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 800ad36:	4a25      	ldr	r2, [pc, #148]	; (800adcc <USART2_IRQHandler+0x9c>)
 800ad38:	4b25      	ldr	r3, [pc, #148]	; (800add0 <USART2_IRQHandler+0xa0>)
 800ad3a:	1c10      	adds	r0, r2, #0
 800ad3c:	1c19      	adds	r1, r3, #0
 800ad3e:	f7fe fd55 	bl	80097ec <USART_GetITStatus>
 800ad42:	1c03      	adds	r3, r0, #0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d038      	beq.n	800adba <USART2_IRQHandler+0x8a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:280
  {
    USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800ad48:	4a20      	ldr	r2, [pc, #128]	; (800adcc <USART2_IRQHandler+0x9c>)
 800ad4a:	4b21      	ldr	r3, [pc, #132]	; (800add0 <USART2_IRQHandler+0xa0>)
 800ad4c:	1c10      	adds	r0, r2, #0
 800ad4e:	1c19      	adds	r1, r3, #0
 800ad50:	f7fe fda6 	bl	80098a0 <USART_ClearITPendingBit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:282
    //Read one byte from the receive data register
    l_tmp  = USART_ReceiveData(USART2);
 800ad54:	1dbc      	adds	r4, r7, #6
 800ad56:	4b1d      	ldr	r3, [pc, #116]	; (800adcc <USART2_IRQHandler+0x9c>)
 800ad58:	1c18      	adds	r0, r3, #0
 800ad5a:	f7fe fa89 	bl	8009270 <USART_ReceiveData>
 800ad5e:	1c03      	adds	r3, r0, #0
 800ad60:	8023      	strh	r3, [r4, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:283
    if(rcv_buff_full){
 800ad62:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <USART2_IRQHandler+0xa4>)
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d006      	beq.n	800ad78 <USART2_IRQHandler+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:285
      //rcv buffer is full ==> trash rcv char
      rcv_buff_overload++;
 800ad6a:	4b1b      	ldr	r3, [pc, #108]	; (800add8 <USART2_IRQHandler+0xa8>)
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	4b19      	ldr	r3, [pc, #100]	; (800add8 <USART2_IRQHandler+0xa8>)
 800ad74:	801a      	strh	r2, [r3, #0]
 800ad76:	e020      	b.n	800adba <USART2_IRQHandler+0x8a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:287
    } else {
      *pt_rcv_write++ = (char)l_tmp; //put rcv char in buffer
 800ad78:	4b18      	ldr	r3, [pc, #96]	; (800addc <USART2_IRQHandler+0xac>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	1dba      	adds	r2, r7, #6
 800ad7e:	8812      	ldrh	r2, [r2, #0]
 800ad80:	b2d2      	uxtb	r2, r2
 800ad82:	701a      	strb	r2, [r3, #0]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	4b15      	ldr	r3, [pc, #84]	; (800addc <USART2_IRQHandler+0xac>)
 800ad88:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:288
      nb_rcv_buff_char++; //One char more to be read in buffer
 800ad8a:	4b15      	ldr	r3, [pc, #84]	; (800ade0 <USART2_IRQHandler+0xb0>)
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	3301      	adds	r3, #1
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	4b12      	ldr	r3, [pc, #72]	; (800ade0 <USART2_IRQHandler+0xb0>)
 800ad96:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:289
      if(pt_rcv_write > &rcv_buff[BUFFER_RCV_SIZE]) {
 800ad98:	4b10      	ldr	r3, [pc, #64]	; (800addc <USART2_IRQHandler+0xac>)
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	4b11      	ldr	r3, [pc, #68]	; (800ade4 <USART2_IRQHandler+0xb4>)
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d902      	bls.n	800ada8 <USART2_IRQHandler+0x78>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:291
        //pointer rollover rcv_buffer
        pt_rcv_write = rcv_buff;
 800ada2:	4b0e      	ldr	r3, [pc, #56]	; (800addc <USART2_IRQHandler+0xac>)
 800ada4:	4a10      	ldr	r2, [pc, #64]	; (800ade8 <USART2_IRQHandler+0xb8>)
 800ada6:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:293
      }
      if(pt_rcv_write == pt_rcv_read) {
 800ada8:	4b0c      	ldr	r3, [pc, #48]	; (800addc <USART2_IRQHandler+0xac>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	4b0f      	ldr	r3, [pc, #60]	; (800adec <USART2_IRQHandler+0xbc>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d102      	bne.n	800adba <USART2_IRQHandler+0x8a>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:295
        //Test if rcv buffer is full
        rcv_buff_full = 1;
 800adb4:	4b07      	ldr	r3, [pc, #28]	; (800add4 <USART2_IRQHandler+0xa4>)
 800adb6:	2201      	movs	r2, #1
 800adb8:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:299
      }      
    }
  }
  USART_ClearITPendingBit(USART2, USART_IT_ORE);
 800adba:	4a04      	ldr	r2, [pc, #16]	; (800adcc <USART2_IRQHandler+0x9c>)
 800adbc:	4b0c      	ldr	r3, [pc, #48]	; (800adf0 <USART2_IRQHandler+0xc0>)
 800adbe:	1c10      	adds	r0, r2, #0
 800adc0:	1c19      	adds	r1, r3, #0
 800adc2:	f7fe fd6d 	bl	80098a0 <USART_ClearITPendingBit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/serial.c:300
}
 800adc6:	46bd      	mov	sp, r7
 800adc8:	b003      	add	sp, #12
 800adca:	bd90      	pop	{r4, r7, pc}
 800adcc:	40004400 	.word	0x40004400
 800add0:	00050105 	.word	0x00050105
 800add4:	200003f0 	.word	0x200003f0
 800add8:	200003ee 	.word	0x200003ee
 800addc:	20000168 	.word	0x20000168
 800ade0:	200003ec 	.word	0x200003ec
 800ade4:	200003ec 	.word	0x200003ec
 800ade8:	200002ec 	.word	0x200002ec
 800adec:	20000164 	.word	0x20000164
 800adf0:	00030300 	.word	0x00030300

0800adf4 <SPI_Arduino_Init>:
SPI_Arduino_Init():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:59
/**
  * @brief  SPI_Arduino_Init
  * @param  None
  * @retval None
  */
static void SPI_Arduino_Init(void){
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:70
	MSB bit first
	Serial output data changes on the first clock edge transition. 
	*/
	SPI_InitTypeDef  SPI_InitStructure;
  
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
 800adfa:	2380      	movs	r3, #128	; 0x80
 800adfc:	015b      	lsls	r3, r3, #5
 800adfe:	1c18      	adds	r0, r3, #0
 800ae00:	2101      	movs	r1, #1
 800ae02:	f7f9 fcc3 	bl	800478c <RCC_APB2PeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:71
    GPIO_Configuration_SPI();
 800ae06:	f000 f921 	bl	800b04c <GPIO_Configuration_SPI>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:72
    digitalWrite(CS, HIGH); //Unselect componant
 800ae0a:	200a      	movs	r0, #10
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	f7ff fb89 	bl	800a524 <digitalWrite>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:74
    
    if(SPI.SpiOneLine == 0){
 800ae12:	4b36      	ldr	r3, [pc, #216]	; (800aeec <SPI_Arduino_Init+0xf8>)
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d103      	bne.n	800ae22 <SPI_Arduino_Init+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:75
      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800ae1a:	1d3b      	adds	r3, r7, #4
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	801a      	strh	r2, [r3, #0]
 800ae20:	e01b      	b.n	800ae5a <SPI_Arduino_Init+0x66>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:76
    } else if(SPI.SpiOneLine == 1) {
 800ae22:	4b32      	ldr	r3, [pc, #200]	; (800aeec <SPI_Arduino_Init+0xf8>)
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d104      	bne.n	800ae34 <SPI_Arduino_Init+0x40>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:77
      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_RxOnly;
 800ae2a:	1d3b      	adds	r3, r7, #4
 800ae2c:	2280      	movs	r2, #128	; 0x80
 800ae2e:	00d2      	lsls	r2, r2, #3
 800ae30:	801a      	strh	r2, [r3, #0]
 800ae32:	e012      	b.n	800ae5a <SPI_Arduino_Init+0x66>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:78
    } else if(SPI.SpiOneLine == 2) {
 800ae34:	4b2d      	ldr	r3, [pc, #180]	; (800aeec <SPI_Arduino_Init+0xf8>)
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d103      	bne.n	800ae44 <SPI_Arduino_Init+0x50>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:79
      SPI_InitStructure.SPI_Direction = SPI_Direction_1Line_Rx;
 800ae3c:	1d3b      	adds	r3, r7, #4
 800ae3e:	4a2c      	ldr	r2, [pc, #176]	; (800aef0 <SPI_Arduino_Init+0xfc>)
 800ae40:	801a      	strh	r2, [r3, #0]
 800ae42:	e00a      	b.n	800ae5a <SPI_Arduino_Init+0x66>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:80
    } else if(SPI.SpiOneLine == 3) {
 800ae44:	4b29      	ldr	r3, [pc, #164]	; (800aeec <SPI_Arduino_Init+0xf8>)
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d103      	bne.n	800ae54 <SPI_Arduino_Init+0x60>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:81
      SPI_InitStructure.SPI_Direction = SPI_Direction_1Line_Tx;
 800ae4c:	1d3b      	adds	r3, r7, #4
 800ae4e:	4a29      	ldr	r2, [pc, #164]	; (800aef4 <SPI_Arduino_Init+0x100>)
 800ae50:	801a      	strh	r2, [r3, #0]
 800ae52:	e002      	b.n	800ae5a <SPI_Arduino_Init+0x66>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:83
    } else {
      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800ae54:	1d3b      	adds	r3, r7, #4
 800ae56:	2200      	movs	r2, #0
 800ae58:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:86
    }
    
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800ae5a:	1d3b      	adds	r3, r7, #4
 800ae5c:	2282      	movs	r2, #130	; 0x82
 800ae5e:	0052      	lsls	r2, r2, #1
 800ae60:	805a      	strh	r2, [r3, #2]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:87
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
 800ae62:	1d3b      	adds	r3, r7, #4
 800ae64:	2228      	movs	r2, #40	; 0x28
 800ae66:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:88
    if(SPI.Spi16Bit) {
 800ae68:	4b20      	ldr	r3, [pc, #128]	; (800aeec <SPI_Arduino_Init+0xf8>)
 800ae6a:	885b      	ldrh	r3, [r3, #2]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d004      	beq.n	800ae7a <SPI_Arduino_Init+0x86>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:89
      SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 800ae70:	1d3b      	adds	r3, r7, #4
 800ae72:	22f0      	movs	r2, #240	; 0xf0
 800ae74:	0112      	lsls	r2, r2, #4
 800ae76:	809a      	strh	r2, [r3, #4]
 800ae78:	e003      	b.n	800ae82 <SPI_Arduino_Init+0x8e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:91
    } else {
      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800ae7a:	1d3b      	adds	r3, r7, #4
 800ae7c:	22e0      	movs	r2, #224	; 0xe0
 800ae7e:	00d2      	lsls	r2, r2, #3
 800ae80:	809a      	strh	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:93
    }
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800ae82:	1d3b      	adds	r3, r7, #4
 800ae84:	2200      	movs	r2, #0
 800ae86:	80da      	strh	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:94
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800ae88:	1d3b      	adds	r3, r7, #4
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	811a      	strh	r2, [r3, #8]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:95
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800ae8e:	1d3b      	adds	r3, r7, #4
 800ae90:	2280      	movs	r2, #128	; 0x80
 800ae92:	0092      	lsls	r2, r2, #2
 800ae94:	815a      	strh	r2, [r3, #10]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:96
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB; 
 800ae96:	1d3b      	adds	r3, r7, #4
 800ae98:	2280      	movs	r2, #128	; 0x80
 800ae9a:	81da      	strh	r2, [r3, #14]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:97
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 800ae9c:	1d3b      	adds	r3, r7, #4
 800ae9e:	2207      	movs	r2, #7
 800aea0:	821a      	strh	r2, [r3, #16]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:98
    SPI_Init(SPI1, &SPI_InitStructure);
 800aea2:	4a15      	ldr	r2, [pc, #84]	; (800aef8 <SPI_Arduino_Init+0x104>)
 800aea4:	1d3b      	adds	r3, r7, #4
 800aea6:	1c10      	adds	r0, r2, #0
 800aea8:	1c19      	adds	r1, r3, #0
 800aeaa:	f7fa ffa3 	bl	8005df4 <SPI_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:100
	
    if(SPI.Spi16Bit)
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <SPI_Arduino_Init+0xf8>)
 800aeb0:	885b      	ldrh	r3, [r3, #2]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d005      	beq.n	800aec2 <SPI_Arduino_Init+0xce>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:101
     SPI_RxFIFOThresholdConfig(SPI1, SPI_RxFIFOThreshold_HF);
 800aeb6:	4b10      	ldr	r3, [pc, #64]	; (800aef8 <SPI_Arduino_Init+0x104>)
 800aeb8:	1c18      	adds	r0, r3, #0
 800aeba:	2100      	movs	r1, #0
 800aebc:	f7fb f9a4 	bl	8006208 <SPI_RxFIFOThresholdConfig>
 800aec0:	e006      	b.n	800aed0 <SPI_Arduino_Init+0xdc>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:103
    else
     SPI_RxFIFOThresholdConfig(SPI1, SPI_RxFIFOThreshold_QF);          
 800aec2:	4a0d      	ldr	r2, [pc, #52]	; (800aef8 <SPI_Arduino_Init+0x104>)
 800aec4:	2380      	movs	r3, #128	; 0x80
 800aec6:	015b      	lsls	r3, r3, #5
 800aec8:	1c10      	adds	r0, r2, #0
 800aeca:	1c19      	adds	r1, r3, #0
 800aecc:	f7fb f99c 	bl	8006208 <SPI_RxFIFOThresholdConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:106
	
    /* Disable SPI1 NSS output for master mode */
    SPI_SSOutputCmd(SPI1, DISABLE);
 800aed0:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <SPI_Arduino_Init+0x104>)
 800aed2:	1c18      	adds	r0, r3, #0
 800aed4:	2100      	movs	r1, #0
 800aed6:	f7fb f9ff 	bl	80062d8 <SPI_SSOutputCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:108
    /* Enable SPI1 */
    SPI_Cmd(SPI1, ENABLE);
 800aeda:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <SPI_Arduino_Init+0x104>)
 800aedc:	1c18      	adds	r0, r3, #0
 800aede:	2101      	movs	r1, #1
 800aee0:	f7fb f904 	bl	80060ec <SPI_Cmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:109
}
 800aee4:	46bd      	mov	sp, r7
 800aee6:	b006      	add	sp, #24
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	46c0      	nop			; (mov r8, r8)
 800aeec:	20000170 	.word	0x20000170
 800aef0:	ffff8000 	.word	0xffff8000
 800aef4:	ffffc000 	.word	0xffffc000
 800aef8:	40013000 	.word	0x40013000

0800aefc <begin_spi_fcn>:
begin_spi_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:117
/**
  * @brief  begin_spi_fcn default spi config
  * @param  None
  * @retval None
  */
void begin_spi_fcn() {
 800aefc:	b580      	push	{r7, lr}
 800aefe:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:118
  pinSetMode(CS, OUTPUT_PP); //Config CS 
 800af00:	200a      	movs	r0, #10
 800af02:	210a      	movs	r1, #10
 800af04:	f7ff fa88 	bl	800a418 <pinSetMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:119
  SPI_Arduino_Init();
 800af08:	f7ff ff74 	bl	800adf4 <SPI_Arduino_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:120
  pinSetMode(0, INPUT_AF); //pin 0 is Rx
 800af0c:	2000      	movs	r0, #0
 800af0e:	2103      	movs	r1, #3
 800af10:	f7ff fa82 	bl	800a418 <pinSetMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:121
  pinSetMode(1, OUTPUT_AF); //pin 1 is Tx
 800af14:	2001      	movs	r0, #1
 800af16:	2104      	movs	r1, #4
 800af18:	f7ff fa7e 	bl	800a418 <pinSetMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:122
  pinSetMode(SCK, OUTPUT_AF); //SPI pins config as alternate functions
 800af1c:	200d      	movs	r0, #13
 800af1e:	2104      	movs	r1, #4
 800af20:	f7ff fa7a 	bl	800a418 <pinSetMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:123
  pinSetMode(MOSI, OUTPUT_AF);
 800af24:	200b      	movs	r0, #11
 800af26:	2104      	movs	r1, #4
 800af28:	f7ff fa76 	bl	800a418 <pinSetMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:124
  pinSetMode(MISO, INPUT_AF); 
 800af2c:	200c      	movs	r0, #12
 800af2e:	2103      	movs	r1, #3
 800af30:	f7ff fa72 	bl	800a418 <pinSetMode>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:125
}
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <read_spi_fcn>:
read_spi_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:132
/**
  * @brief  read_spi_fcn
  * @param  buffer : Cmd to send
  * @retval rcv char/word
  */
unsigned int read_spi_fcn(uint16_t buffer){
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	1c02      	adds	r2, r0, #0
 800af40:	1dbb      	adds	r3, r7, #6
 800af42:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:133
  unsigned int L_result =0;
 800af44:	2300      	movs	r3, #0
 800af46:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:134
    if(SPI.Spi16Bit)
 800af48:	4b23      	ldr	r3, [pc, #140]	; (800afd8 <read_spi_fcn+0xa0>)
 800af4a:	885b      	ldrh	r3, [r3, #2]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d004      	beq.n	800af5a <read_spi_fcn+0x22>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:135
     SPI1->DR = buffer;
 800af50:	4b22      	ldr	r3, [pc, #136]	; (800afdc <read_spi_fcn+0xa4>)
 800af52:	1dba      	adds	r2, r7, #6
 800af54:	8812      	ldrh	r2, [r2, #0]
 800af56:	819a      	strh	r2, [r3, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:138
    else
      *(__IO uint8_t *) ((uint32_t)SPI1 + 0x0C) = (unsigned char)buffer; 
    while((SPI1->SR & 0x02) == 0);
 800af58:	e004      	b.n	800af64 <read_spi_fcn+0x2c>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:137
unsigned int read_spi_fcn(uint16_t buffer){
  unsigned int L_result =0;
    if(SPI.Spi16Bit)
     SPI1->DR = buffer;
    else
      *(__IO uint8_t *) ((uint32_t)SPI1 + 0x0C) = (unsigned char)buffer; 
 800af5a:	4b21      	ldr	r3, [pc, #132]	; (800afe0 <read_spi_fcn+0xa8>)
 800af5c:	1dba      	adds	r2, r7, #6
 800af5e:	8812      	ldrh	r2, [r2, #0]
 800af60:	b2d2      	uxtb	r2, r2
 800af62:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:138
    while((SPI1->SR & 0x02) == 0);
 800af64:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:138 (discriminator 1)
 800af66:	4b1d      	ldr	r3, [pc, #116]	; (800afdc <read_spi_fcn+0xa4>)
 800af68:	891b      	ldrh	r3, [r3, #8]
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	1c1a      	adds	r2, r3, #0
 800af6e:	2302      	movs	r3, #2
 800af70:	4013      	ands	r3, r2
 800af72:	d0f8      	beq.n	800af66 <read_spi_fcn+0x2e>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:139
    if(SPI.SpiOneLine) // If one line only for SPI
 800af74:	4b18      	ldr	r3, [pc, #96]	; (800afd8 <read_spi_fcn+0xa0>)
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d008      	beq.n	800af8e <read_spi_fcn+0x56>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:140
      SPI1->CR1 &= SPI_Direction_Rx;  // Configure line for receive
 800af7c:	4b17      	ldr	r3, [pc, #92]	; (800afdc <read_spi_fcn+0xa4>)
 800af7e:	4a17      	ldr	r2, [pc, #92]	; (800afdc <read_spi_fcn+0xa4>)
 800af80:	8812      	ldrh	r2, [r2, #0]
 800af82:	b291      	uxth	r1, r2
 800af84:	4a17      	ldr	r2, [pc, #92]	; (800afe4 <read_spi_fcn+0xac>)
 800af86:	400a      	ands	r2, r1
 800af88:	b292      	uxth	r2, r2
 800af8a:	801a      	strh	r2, [r3, #0]
 800af8c:	e00e      	b.n	800afac <read_spi_fcn+0x74>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:142
    else
      while((SPI1->SR & 0x01) == 0 || (SPI1->SR & 0x80) );
 800af8e:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:142 (discriminator 1)
 800af90:	4b12      	ldr	r3, [pc, #72]	; (800afdc <read_spi_fcn+0xa4>)
 800af92:	891b      	ldrh	r3, [r3, #8]
 800af94:	b29b      	uxth	r3, r3
 800af96:	1c1a      	adds	r2, r3, #0
 800af98:	2301      	movs	r3, #1
 800af9a:	4013      	ands	r3, r2
 800af9c:	d0f8      	beq.n	800af90 <read_spi_fcn+0x58>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:142 (discriminator 2)
 800af9e:	4b0f      	ldr	r3, [pc, #60]	; (800afdc <read_spi_fcn+0xa4>)
 800afa0:	891b      	ldrh	r3, [r3, #8]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	1c1a      	adds	r2, r3, #0
 800afa6:	2380      	movs	r3, #128	; 0x80
 800afa8:	4013      	ands	r3, r2
 800afaa:	d1f1      	bne.n	800af90 <read_spi_fcn+0x58>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:143
    L_result = SPI1->DR;
 800afac:	4b0b      	ldr	r3, [pc, #44]	; (800afdc <read_spi_fcn+0xa4>)
 800afae:	899b      	ldrh	r3, [r3, #12]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	60fb      	str	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:144
    if(SPI.SpiOneLine) // If one line only for SPI
 800afb4:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <read_spi_fcn+0xa0>)
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d008      	beq.n	800afce <read_spi_fcn+0x96>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:145
      SPI1->CR1 |= SPI_Direction_Tx; // Configure line for transmit
 800afbc:	4b07      	ldr	r3, [pc, #28]	; (800afdc <read_spi_fcn+0xa4>)
 800afbe:	4a07      	ldr	r2, [pc, #28]	; (800afdc <read_spi_fcn+0xa4>)
 800afc0:	8812      	ldrh	r2, [r2, #0]
 800afc2:	b292      	uxth	r2, r2
 800afc4:	2180      	movs	r1, #128	; 0x80
 800afc6:	01c9      	lsls	r1, r1, #7
 800afc8:	430a      	orrs	r2, r1
 800afca:	b292      	uxth	r2, r2
 800afcc:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:146
    return(L_result);
 800afce:	68fb      	ldr	r3, [r7, #12]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:147
}
 800afd0:	1c18      	adds	r0, r3, #0
 800afd2:	46bd      	mov	sp, r7
 800afd4:	b004      	add	sp, #16
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	20000170 	.word	0x20000170
 800afdc:	40013000 	.word	0x40013000
 800afe0:	4001300c 	.word	0x4001300c
 800afe4:	ffffbfff 	.word	0xffffbfff

0800afe8 <write_spi_fcn>:
write_spi_fcn():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:155
/**
  * @brief  write_spi_fcn Send a char or word on SPI
  * @param char/word to send
  * @retval none
  */
void write_spi_fcn(uint16_t data_out){
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	1c02      	adds	r2, r0, #0
 800aff0:	1dbb      	adds	r3, r7, #6
 800aff2:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:156
    while((SPI1->SR & 0x02) == 0);
 800aff4:	46c0      	nop			; (mov r8, r8)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:156 (discriminator 1)
 800aff6:	4b12      	ldr	r3, [pc, #72]	; (800b040 <write_spi_fcn+0x58>)
 800aff8:	891b      	ldrh	r3, [r3, #8]
 800affa:	b29b      	uxth	r3, r3
 800affc:	1c1a      	adds	r2, r3, #0
 800affe:	2302      	movs	r3, #2
 800b000:	4013      	ands	r3, r2
 800b002:	d0f8      	beq.n	800aff6 <write_spi_fcn+0xe>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:157
    if(SPI.SpiOneLine) // If one line only for SPI
 800b004:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <write_spi_fcn+0x5c>)
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d008      	beq.n	800b01e <write_spi_fcn+0x36>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:158
      SPI1->CR1 |= SPI_Direction_Tx; // Configure line for transmit
 800b00c:	4b0c      	ldr	r3, [pc, #48]	; (800b040 <write_spi_fcn+0x58>)
 800b00e:	4a0c      	ldr	r2, [pc, #48]	; (800b040 <write_spi_fcn+0x58>)
 800b010:	8812      	ldrh	r2, [r2, #0]
 800b012:	b292      	uxth	r2, r2
 800b014:	2180      	movs	r1, #128	; 0x80
 800b016:	01c9      	lsls	r1, r1, #7
 800b018:	430a      	orrs	r2, r1
 800b01a:	b292      	uxth	r2, r2
 800b01c:	801a      	strh	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:159
    if(SPI.Spi16Bit)
 800b01e:	4b09      	ldr	r3, [pc, #36]	; (800b044 <write_spi_fcn+0x5c>)
 800b020:	885b      	ldrh	r3, [r3, #2]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d004      	beq.n	800b030 <write_spi_fcn+0x48>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:160
     SPI1->DR = data_out;
 800b026:	4b06      	ldr	r3, [pc, #24]	; (800b040 <write_spi_fcn+0x58>)
 800b028:	1dba      	adds	r2, r7, #6
 800b02a:	8812      	ldrh	r2, [r2, #0]
 800b02c:	819a      	strh	r2, [r3, #12]
 800b02e:	e004      	b.n	800b03a <write_spi_fcn+0x52>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:162
    else
     *(__IO uint8_t *) ((uint32_t)SPI1 + 0x0C) = (unsigned char)data_out; 
 800b030:	4b05      	ldr	r3, [pc, #20]	; (800b048 <write_spi_fcn+0x60>)
 800b032:	1dba      	adds	r2, r7, #6
 800b034:	8812      	ldrh	r2, [r2, #0]
 800b036:	b2d2      	uxtb	r2, r2
 800b038:	701a      	strb	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:163
}
 800b03a:	46bd      	mov	sp, r7
 800b03c:	b002      	add	sp, #8
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	40013000 	.word	0x40013000
 800b044:	20000170 	.word	0x20000170
 800b048:	4001300c 	.word	0x4001300c

0800b04c <GPIO_Configuration_SPI>:
GPIO_Configuration_SPI():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:172
  * @brief  GPIO_Configuration_SPI spi GPIO pins configuration
  * @param none
  * @retval none
  */
static void GPIO_Configuration_SPI(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08c      	sub	sp, #48	; 0x30
 800b050:	af00      	add	r7, sp, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:176
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_PinTypeDef  L_PinSCKInfo,L_PinMOSIInfo,L_PinMISOInfo;
     
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);  
 800b052:	2380      	movs	r3, #128	; 0x80
 800b054:	02db      	lsls	r3, r3, #11
 800b056:	1c18      	adds	r0, r3, #0
 800b058:	2101      	movs	r1, #1
 800b05a:	f7f9 fb79 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:177
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);  
 800b05e:	2380      	movs	r3, #128	; 0x80
 800b060:	029b      	lsls	r3, r3, #10
 800b062:	1c18      	adds	r0, r3, #0
 800b064:	2101      	movs	r1, #1
 800b066:	f7f9 fb73 	bl	8004750 <RCC_AHBPeriphClockCmd>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:179

  L_PinSCKInfo = getPinDef(SCK);
 800b06a:	1c3b      	adds	r3, r7, #0
 800b06c:	331c      	adds	r3, #28
 800b06e:	1c18      	adds	r0, r3, #0
 800b070:	210d      	movs	r1, #13
 800b072:	f7ff fcd3 	bl	800aa1c <getPinDef>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:180
  GPIO_PinAFConfig(L_PinSCKInfo.GPIOx, L_PinSCKInfo.PinNum, GPIO_AF_0);
 800b076:	1c3b      	adds	r3, r7, #0
 800b078:	331c      	adds	r3, #28
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	1c3b      	adds	r3, r7, #0
 800b07e:	331c      	adds	r3, #28
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	1c10      	adds	r0, r2, #0
 800b084:	1c19      	adds	r1, r3, #0
 800b086:	2200      	movs	r2, #0
 800b088:	f7f7 ffe6 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:181
  L_PinMISOInfo = getPinDef(MISO);
 800b08c:	1d3b      	adds	r3, r7, #4
 800b08e:	1c18      	adds	r0, r3, #0
 800b090:	210c      	movs	r1, #12
 800b092:	f7ff fcc3 	bl	800aa1c <getPinDef>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:182
  GPIO_PinAFConfig(L_PinMISOInfo.GPIOx, L_PinMISOInfo.PinNum, GPIO_AF_0);
 800b096:	1d3b      	adds	r3, r7, #4
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	1d3b      	adds	r3, r7, #4
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	1c10      	adds	r0, r2, #0
 800b0a0:	1c19      	adds	r1, r3, #0
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f7f7 ffd8 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:183
  L_PinMOSIInfo = getPinDef(MOSI);
 800b0a8:	1c3b      	adds	r3, r7, #0
 800b0aa:	3310      	adds	r3, #16
 800b0ac:	1c18      	adds	r0, r3, #0
 800b0ae:	210b      	movs	r1, #11
 800b0b0:	f7ff fcb4 	bl	800aa1c <getPinDef>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:184
  GPIO_PinAFConfig(L_PinMOSIInfo.GPIOx, L_PinMOSIInfo.PinNum, GPIO_AF_0);
 800b0b4:	1c3b      	adds	r3, r7, #0
 800b0b6:	3310      	adds	r3, #16
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	1c3b      	adds	r3, r7, #0
 800b0bc:	3310      	adds	r3, #16
 800b0be:	881b      	ldrh	r3, [r3, #0]
 800b0c0:	1c10      	adds	r0, r2, #0
 800b0c2:	1c19      	adds	r1, r3, #0
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f7f7 ffc7 	bl	8003058 <GPIO_PinAFConfig>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:187
    
  /* Configure SPI pins:  SCK, MISO and MOSI ----------------------------*/
  GPIO_InitStructure.GPIO_Pin =  L_PinSCKInfo.PinNum | L_PinMISOInfo.PinNum | L_PinMOSIInfo.PinNum;
 800b0ca:	1c3b      	adds	r3, r7, #0
 800b0cc:	331c      	adds	r3, #28
 800b0ce:	881a      	ldrh	r2, [r3, #0]
 800b0d0:	1d3b      	adds	r3, r7, #4
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	1c3b      	adds	r3, r7, #0
 800b0da:	3310      	adds	r3, #16
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	1c1a      	adds	r2, r3, #0
 800b0e4:	1c3b      	adds	r3, r7, #0
 800b0e6:	3328      	adds	r3, #40	; 0x28
 800b0e8:	601a      	str	r2, [r3, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:188
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800b0ea:	1c3b      	adds	r3, r7, #0
 800b0ec:	3328      	adds	r3, #40	; 0x28
 800b0ee:	2203      	movs	r2, #3
 800b0f0:	715a      	strb	r2, [r3, #5]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:189
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800b0f2:	1c3b      	adds	r3, r7, #0
 800b0f4:	3328      	adds	r3, #40	; 0x28
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	711a      	strb	r2, [r3, #4]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:190
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800b0fa:	1c3b      	adds	r3, r7, #0
 800b0fc:	3328      	adds	r3, #40	; 0x28
 800b0fe:	2200      	movs	r2, #0
 800b100:	719a      	strb	r2, [r3, #6]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:191
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800b102:	1c3b      	adds	r3, r7, #0
 800b104:	3328      	adds	r3, #40	; 0x28
 800b106:	2202      	movs	r2, #2
 800b108:	71da      	strb	r2, [r3, #7]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:192
  GPIO_Init(L_PinMOSIInfo.GPIOx, &GPIO_InitStructure);  
 800b10a:	1c3b      	adds	r3, r7, #0
 800b10c:	3310      	adds	r3, #16
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	1c3b      	adds	r3, r7, #0
 800b112:	3328      	adds	r3, #40	; 0x28
 800b114:	1c10      	adds	r0, r2, #0
 800b116:	1c19      	adds	r1, r3, #0
 800b118:	f7f7 fe26 	bl	8002d68 <GPIO_Init>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Libraries/Arduino/src/spi.c:193
}
 800b11c:	46bd      	mov	sp, r7
 800b11e:	b00c      	add	sp, #48	; 0x30
 800b120:	bd80      	pop	{r7, pc}
 800b122:	46c0      	nop			; (mov r8, r8)

0800b124 <Reset_Handler>:
Reset_Handler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:71

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b124:	480d      	ldr	r0, [pc, #52]	; (800b15c <_exit+0x2>)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:72
  mov   sp, r0          /* set stack pointer */
 800b126:	4685      	mov	sp, r0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:75

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800b128:	2100      	movs	r1, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:76
  b LoopCopyDataInit
 800b12a:	e003      	b.n	800b134 <LoopCopyDataInit>

0800b12c <CopyDataInit>:
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:79

CopyDataInit:
  ldr r3, =_sidata
 800b12c:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <_exit+0x6>)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:80
  ldr r3, [r3, r1]
 800b12e:	585b      	ldr	r3, [r3, r1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:81
  str r3, [r0, r1]
 800b130:	5043      	str	r3, [r0, r1]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:82
  adds r1, r1, #4
 800b132:	3104      	adds	r1, #4

0800b134 <LoopCopyDataInit>:
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:85

LoopCopyDataInit:
  ldr r0, =_sdata
 800b134:	480b      	ldr	r0, [pc, #44]	; (800b164 <_exit+0xa>)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:86
  ldr r3, =_edata
 800b136:	4b0c      	ldr	r3, [pc, #48]	; (800b168 <_exit+0xe>)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:87
  adds r2, r0, r1
 800b138:	1842      	adds	r2, r0, r1
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:88
  cmp r2, r3
 800b13a:	429a      	cmp	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:89
  bcc CopyDataInit
 800b13c:	d3f6      	bcc.n	800b12c <CopyDataInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:90
  ldr r2, =_sbss
 800b13e:	4a0b      	ldr	r2, [pc, #44]	; (800b16c <_exit+0x12>)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:91
  b LoopFillZerobss
 800b140:	e002      	b.n	800b148 <LoopFillZerobss>

0800b142 <FillZerobss>:
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:94
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800b142:	2300      	movs	r3, #0
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:95
  str  r3, [r2]
 800b144:	6013      	str	r3, [r2, #0]
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:96
  adds r2, r2, #4
 800b146:	3204      	adds	r2, #4

0800b148 <LoopFillZerobss>:
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:100


LoopFillZerobss:
  ldr r3, = _ebss
 800b148:	4b09      	ldr	r3, [pc, #36]	; (800b170 <_exit+0x16>)
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:101
  cmp r2, r3
 800b14a:	429a      	cmp	r2, r3
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:102
  bcc FillZerobss
 800b14c:	d3f9      	bcc.n	800b142 <FillZerobss>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:105

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b14e:	f7fe fc5d 	bl	8009a0c <SystemInit>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:107
/* Call static constructors */
    bl __libc_init_array
 800b152:	f000 f8ad 	bl	800b2b0 <__libc_init_array>
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:109
/* Call the application's entry point.*/
  bl main
 800b156:	f7f5 f8a3 	bl	80002a0 <main>

0800b15a <_exit>:
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:115
  
.globl _exit
_exit:

LoopForever:
    b LoopForever
 800b15a:	e7fe      	b.n	800b15a <_exit>
$d():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:71

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b15c:	20002000 	.word	0x20002000
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:79
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 800b160:	0800b82c 	.word	0x0800b82c
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:85
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800b164:	20000000 	.word	0x20000000
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:86
  ldr r3, =_edata
 800b168:	20000274 	.word	0x20000274
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:90
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800b16c:	20000280 	.word	0x20000280
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:100
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 800b170:	200003f4 	.word	0x200003f4

0800b174 <ADC1_COMP_IRQHandler>:
TIM1_CC_IRQHandler():
C:\stm32f0-Discovery_Tools\Projects\Arduino_Template\Debug/../Device/startup_stm32f0xx.S:131
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b174:	e7fe      	b.n	800b174 <ADC1_COMP_IRQHandler>
	...

0800b178 <__register_exitproc>:
__register_exitproc():
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:72
 800b178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b17a:	4656      	mov	r6, sl
 800b17c:	465f      	mov	r7, fp
 800b17e:	4645      	mov	r5, r8
 800b180:	b4e0      	push	{r5, r6, r7}
 800b182:	1c1e      	adds	r6, r3, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:80
 800b184:	4b28      	ldr	r3, [pc, #160]	; (800b228 <__register_exitproc+0xb0>)
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:72
 800b186:	1c07      	adds	r7, r0, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:80
 800b188:	6818      	ldr	r0, [r3, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:72
 800b18a:	4688      	mov	r8, r1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:80
 800b18c:	6c84      	ldr	r4, [r0, #72]	; 0x48
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:72
 800b18e:	4692      	mov	sl, r2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:81
 800b190:	2c00      	cmp	r4, #0
 800b192:	d02d      	beq.n	800b1f0 <__register_exitproc+0x78>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:83
 800b194:	6865      	ldr	r5, [r4, #4]
 800b196:	2d1f      	cmp	r5, #31
 800b198:	dc43      	bgt.n	800b222 <__register_exitproc+0xaa>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:113
 800b19a:	2f00      	cmp	r7, #0
 800b19c:	d016      	beq.n	800b1cc <__register_exitproc+0x54>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:116
 800b19e:	2188      	movs	r1, #136	; 0x88
 800b1a0:	5860      	ldr	r0, [r4, r1]
 800b1a2:	468b      	mov	fp, r1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:117
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d027      	beq.n	800b1f8 <__register_exitproc+0x80>
 800b1a8:	2380      	movs	r3, #128	; 0x80
 800b1aa:	0059      	lsls	r1, r3, #1
 800b1ac:	5841      	ldr	r1, [r0, r1]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:136
 800b1ae:	00ab      	lsls	r3, r5, #2
 800b1b0:	4652      	mov	r2, sl
 800b1b2:	501a      	str	r2, [r3, r0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:137
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	40ab      	lsls	r3, r5
 800b1b8:	2280      	movs	r2, #128	; 0x80
 800b1ba:	4319      	orrs	r1, r3
 800b1bc:	0052      	lsls	r2, r2, #1
 800b1be:	5081      	str	r1, [r0, r2]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:138
 800b1c0:	1c29      	adds	r1, r5, #0
 800b1c2:	3120      	adds	r1, #32
 800b1c4:	008a      	lsls	r2, r1, #2
 800b1c6:	5016      	str	r6, [r2, r0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:139
 800b1c8:	2f02      	cmp	r7, #2
 800b1ca:	d00b      	beq.n	800b1e4 <__register_exitproc+0x6c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:142
 800b1cc:	1ca8      	adds	r0, r5, #2
 800b1ce:	0083      	lsls	r3, r0, #2
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	3501      	adds	r5, #1
 800b1d4:	511a      	str	r2, [r3, r4]
 800b1d6:	6065      	str	r5, [r4, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:146
 800b1d8:	2000      	movs	r0, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:147
 800b1da:	bc1c      	pop	{r2, r3, r4}
 800b1dc:	4690      	mov	r8, r2
 800b1de:	469a      	mov	sl, r3
 800b1e0:	46a3      	mov	fp, r4
 800b1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:140
 800b1e4:	2782      	movs	r7, #130	; 0x82
 800b1e6:	007e      	lsls	r6, r7, #1
 800b1e8:	5981      	ldr	r1, [r0, r6]
 800b1ea:	430b      	orrs	r3, r1
 800b1ec:	5183      	str	r3, [r0, r6]
 800b1ee:	e7ed      	b.n	800b1cc <__register_exitproc+0x54>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:82
 800b1f0:	1c04      	adds	r4, r0, #0
 800b1f2:	344c      	adds	r4, #76	; 0x4c
 800b1f4:	6484      	str	r4, [r0, #72]	; 0x48
 800b1f6:	e7cd      	b.n	800b194 <__register_exitproc+0x1c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:119
 800b1f8:	4d0c      	ldr	r5, [pc, #48]	; (800b22c <__register_exitproc+0xb4>)
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	d011      	beq.n	800b222 <__register_exitproc+0xaa>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:120
 800b1fe:	2084      	movs	r0, #132	; 0x84
 800b200:	0040      	lsls	r0, r0, #1
 800b202:	e000      	b.n	800b206 <__register_exitproc+0x8e>
 800b204:	bf00      	nop
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:122
 800b206:	2800      	cmp	r0, #0
 800b208:	d00b      	beq.n	800b222 <__register_exitproc+0xaa>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:129
 800b20a:	2280      	movs	r2, #128	; 0x80
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:130
 800b20c:	2582      	movs	r5, #130	; 0x82
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:129
 800b20e:	2300      	movs	r3, #0
 800b210:	0051      	lsls	r1, r2, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:130
 800b212:	006a      	lsls	r2, r5, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:129
 800b214:	5043      	str	r3, [r0, r1]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:130
 800b216:	5083      	str	r3, [r0, r2]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:131
 800b218:	465b      	mov	r3, fp
 800b21a:	50e0      	str	r0, [r4, r3]
 800b21c:	6865      	ldr	r5, [r4, #4]
 800b21e:	2100      	movs	r1, #0
 800b220:	e7c5      	b.n	800b1ae <__register_exitproc+0x36>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__atexit.c:86
 800b222:	2401      	movs	r4, #1
 800b224:	4260      	negs	r0, r4
 800b226:	e7d8      	b.n	800b1da <__register_exitproc+0x62>
 800b228:	0800b810 	.word	0x0800b810
 800b22c:	00000000 	.word	0x00000000

0800b230 <exit>:
exit():
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/exit.c:60
 800b230:	b510      	push	{r4, lr}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/exit.c:66
 800b232:	2100      	movs	r1, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/exit.c:60
 800b234:	1c04      	adds	r4, r0, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/exit.c:66
 800b236:	f000 f90f 	bl	800b458 <__call_exitprocs>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/exit.c:68
 800b23a:	4b04      	ldr	r3, [pc, #16]	; (800b24c <exit+0x1c>)
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b240:	2900      	cmp	r1, #0
 800b242:	d000      	beq.n	800b246 <exit+0x16>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/exit.c:69
 800b244:	4788      	blx	r1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/exit.c:70
 800b246:	1c20      	adds	r0, r4, #0
 800b248:	f7ff ff87 	bl	800b15a <_exit>
 800b24c:	0800b810 	.word	0x0800b810

0800b250 <__libc_fini_array>:
__libc_fini_array():
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:25
 800b250:	b5f0      	push	{r4, r5, r6, r7, lr}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:29
 800b252:	4b15      	ldr	r3, [pc, #84]	; (800b2a8 <__libc_fini_array+0x58>)
 800b254:	4e15      	ldr	r6, [pc, #84]	; (800b2ac <__libc_fini_array+0x5c>)
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:25
 800b256:	4647      	mov	r7, r8
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:29
 800b258:	1af0      	subs	r0, r6, r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:25
 800b25a:	b480      	push	{r7}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:29
 800b25c:	1086      	asrs	r6, r0, #2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:30
 800b25e:	d01d      	beq.n	800b29c <__libc_fini_array+0x4c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:31
 800b260:	1e75      	subs	r5, r6, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:24
 800b262:	00af      	lsls	r7, r5, #2
 800b264:	18ff      	adds	r7, r7, r3
 800b266:	2101      	movs	r1, #1
 800b268:	4029      	ands	r1, r5
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:31
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	4688      	mov	r8, r1
 800b26e:	1f3c      	subs	r4, r7, #4
 800b270:	4790      	blx	r2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:30
 800b272:	2d00      	cmp	r5, #0
 800b274:	d012      	beq.n	800b29c <__libc_fini_array+0x4c>
 800b276:	4643      	mov	r3, r8
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d006      	beq.n	800b28a <__libc_fini_array+0x3a>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:31
 800b27c:	6824      	ldr	r4, [r4, #0]
 800b27e:	47a0      	blx	r4
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:30
 800b280:	1eb5      	subs	r5, r6, #2
 800b282:	1c3c      	adds	r4, r7, #0
 800b284:	3c08      	subs	r4, #8
 800b286:	2d00      	cmp	r5, #0
 800b288:	d008      	beq.n	800b29c <__libc_fini_array+0x4c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:31 (discriminator 2)
 800b28a:	6820      	ldr	r0, [r4, #0]
 800b28c:	1f26      	subs	r6, r4, #4
 800b28e:	4780      	blx	r0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:30 (discriminator 2)
 800b290:	3d02      	subs	r5, #2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:31 (discriminator 2)
 800b292:	6837      	ldr	r7, [r6, #0]
 800b294:	47b8      	blx	r7
 800b296:	3c08      	subs	r4, #8
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:30 (discriminator 2)
 800b298:	2d00      	cmp	r5, #0
 800b29a:	d1f6      	bne.n	800b28a <__libc_fini_array+0x3a>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:33
 800b29c:	f000 fac0 	bl	800b820 <_fini>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/fini.c:34
 800b2a0:	bc04      	pop	{r2}
 800b2a2:	4690      	mov	r8, r2
 800b2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2a6:	46c0      	nop			; (mov r8, r8)
	...

0800b2b0 <__libc_init_array>:
__libc_init_array():
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:29
 800b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:33
 800b2b2:	4f1f      	ldr	r7, [pc, #124]	; (800b330 <__libc_init_array+0x80>)
 800b2b4:	4c1f      	ldr	r4, [pc, #124]	; (800b334 <__libc_init_array+0x84>)
 800b2b6:	1b38      	subs	r0, r7, r4
 800b2b8:	1087      	asrs	r7, r0, #2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:34
 800b2ba:	d018      	beq.n	800b2ee <__libc_init_array+0x3e>
 800b2bc:	2201      	movs	r2, #1
 800b2be:	1e7b      	subs	r3, r7, #1
 800b2c0:	1c15      	adds	r5, r2, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:35
 800b2c2:	cc02      	ldmia	r4!, {r1}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:34
 800b2c4:	2601      	movs	r6, #1
 800b2c6:	401d      	ands	r5, r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:35
 800b2c8:	4788      	blx	r1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:34
 800b2ca:	42b7      	cmp	r7, r6
 800b2cc:	d00f      	beq.n	800b2ee <__libc_init_array+0x3e>
 800b2ce:	2d00      	cmp	r5, #0
 800b2d0:	d004      	beq.n	800b2dc <__libc_init_array+0x2c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:35
 800b2d2:	cc40      	ldmia	r4!, {r6}
 800b2d4:	47b0      	blx	r6
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:34
 800b2d6:	2602      	movs	r6, #2
 800b2d8:	42b7      	cmp	r7, r6
 800b2da:	d008      	beq.n	800b2ee <__libc_init_array+0x3e>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:35 (discriminator 2)
 800b2dc:	1c25      	adds	r5, r4, #0
 800b2de:	cd01      	ldmia	r5!, {r0}
 800b2e0:	4780      	blx	r0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:34 (discriminator 2)
 800b2e2:	3602      	adds	r6, #2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:35 (discriminator 2)
 800b2e4:	6863      	ldr	r3, [r4, #4]
 800b2e6:	4798      	blx	r3
 800b2e8:	1d2c      	adds	r4, r5, #4
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:34 (discriminator 2)
 800b2ea:	42b7      	cmp	r7, r6
 800b2ec:	d1f6      	bne.n	800b2dc <__libc_init_array+0x2c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:37
 800b2ee:	f000 fa91 	bl	800b814 <_init>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:39
 800b2f2:	4f11      	ldr	r7, [pc, #68]	; (800b338 <__libc_init_array+0x88>)
 800b2f4:	4c11      	ldr	r4, [pc, #68]	; (800b33c <__libc_init_array+0x8c>)
 800b2f6:	1b3a      	subs	r2, r7, r4
 800b2f8:	1097      	asrs	r7, r2, #2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:40
 800b2fa:	d018      	beq.n	800b32e <__libc_init_array+0x7e>
 800b2fc:	2601      	movs	r6, #1
 800b2fe:	1e79      	subs	r1, r7, #1
 800b300:	1c35      	adds	r5, r6, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:41
 800b302:	cc01      	ldmia	r4!, {r0}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:40
 800b304:	2601      	movs	r6, #1
 800b306:	400d      	ands	r5, r1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:41
 800b308:	4780      	blx	r0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:40
 800b30a:	42b7      	cmp	r7, r6
 800b30c:	d00f      	beq.n	800b32e <__libc_init_array+0x7e>
 800b30e:	2d00      	cmp	r5, #0
 800b310:	d004      	beq.n	800b31c <__libc_init_array+0x6c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:41
 800b312:	cc08      	ldmia	r4!, {r3}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:40
 800b314:	2602      	movs	r6, #2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:41
 800b316:	4798      	blx	r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:40
 800b318:	42b7      	cmp	r7, r6
 800b31a:	d008      	beq.n	800b32e <__libc_init_array+0x7e>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:41 (discriminator 2)
 800b31c:	1c25      	adds	r5, r4, #0
 800b31e:	cd04      	ldmia	r5!, {r2}
 800b320:	4790      	blx	r2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:40 (discriminator 2)
 800b322:	3602      	adds	r6, #2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:41 (discriminator 2)
 800b324:	6861      	ldr	r1, [r4, #4]
 800b326:	4788      	blx	r1
 800b328:	1d2c      	adds	r4, r5, #4
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:40 (discriminator 2)
 800b32a:	42b7      	cmp	r7, r6
 800b32c:	d1f6      	bne.n	800b31c <__libc_init_array+0x6c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/misc/init.c:42
 800b32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b340 <memset>:
memset():
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:47
 800b340:	b5f0      	push	{r4, r5, r6, r7, lr}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:57
 800b342:	0783      	lsls	r3, r0, #30
 800b344:	d100      	bne.n	800b348 <memset+0x8>
 800b346:	e081      	b.n	800b44c <memset+0x10c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:59
 800b348:	1e54      	subs	r4, r2, #1
 800b34a:	2a00      	cmp	r2, #0
 800b34c:	d07d      	beq.n	800b44a <memset+0x10a>
 800b34e:	b2cd      	uxtb	r5, r1
 800b350:	1c03      	adds	r3, r0, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:57
 800b352:	2603      	movs	r6, #3
 800b354:	07e7      	lsls	r7, r4, #31
 800b356:	d511      	bpl.n	800b37c <memset+0x3c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:60
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	7005      	strb	r5, [r0, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:57
 800b35c:	4233      	tst	r3, r6
 800b35e:	d011      	beq.n	800b384 <memset+0x44>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:60
 800b360:	701d      	strb	r5, [r3, #0]
 800b362:	3301      	adds	r3, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:59
 800b364:	1e94      	subs	r4, r2, #2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:57
 800b366:	4233      	tst	r3, r6
 800b368:	d00c      	beq.n	800b384 <memset+0x44>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:59
 800b36a:	1e62      	subs	r2, r4, #1
 800b36c:	2c00      	cmp	r4, #0
 800b36e:	d06c      	beq.n	800b44a <memset+0x10a>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:60
 800b370:	701d      	strb	r5, [r3, #0]
 800b372:	3301      	adds	r3, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:59
 800b374:	1c14      	adds	r4, r2, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:57
 800b376:	4233      	tst	r3, r6
 800b378:	d004      	beq.n	800b384 <memset+0x44>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:59
 800b37a:	3c01      	subs	r4, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:60
 800b37c:	701d      	strb	r5, [r3, #0]
 800b37e:	3301      	adds	r3, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:57
 800b380:	4233      	tst	r3, r6
 800b382:	d1f2      	bne.n	800b36a <memset+0x2a>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:65
 800b384:	2c03      	cmp	r4, #3
 800b386:	d949      	bls.n	800b41c <memset+0xdc>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:54
 800b388:	22ff      	movs	r2, #255	; 0xff
 800b38a:	400a      	ands	r2, r1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:72
 800b38c:	0217      	lsls	r7, r2, #8
 800b38e:	433a      	orrs	r2, r7
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:73
 800b390:	0415      	lsls	r5, r2, #16
 800b392:	432a      	orrs	r2, r5
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:78
 800b394:	2c0f      	cmp	r4, #15
 800b396:	d95c      	bls.n	800b452 <memset+0x112>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/include/string.h:25
 800b398:	1c26      	adds	r6, r4, #0
 800b39a:	3e10      	subs	r6, #16
 800b39c:	0937      	lsrs	r7, r6, #4
 800b39e:	3701      	adds	r7, #1
 800b3a0:	013d      	lsls	r5, r7, #4
 800b3a2:	195e      	adds	r6, r3, r5
 800b3a4:	3d10      	subs	r5, #16
 800b3a6:	06ef      	lsls	r7, r5, #27
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:80
 800b3a8:	601a      	str	r2, [r3, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:81
 800b3aa:	605a      	str	r2, [r3, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:82
 800b3ac:	609a      	str	r2, [r3, #8]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:83
 800b3ae:	60da      	str	r2, [r3, #12]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/include/string.h:25
 800b3b0:	3310      	adds	r3, #16
 800b3b2:	0ffd      	lsrs	r5, r7, #31
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:78
 800b3b4:	429e      	cmp	r6, r3
 800b3b6:	d013      	beq.n	800b3e0 <memset+0xa0>
 800b3b8:	2d00      	cmp	r5, #0
 800b3ba:	d006      	beq.n	800b3ca <memset+0x8a>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:80
 800b3bc:	601a      	str	r2, [r3, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:81
 800b3be:	605a      	str	r2, [r3, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:82
 800b3c0:	609a      	str	r2, [r3, #8]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:83
 800b3c2:	60da      	str	r2, [r3, #12]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/include/string.h:25
 800b3c4:	3310      	adds	r3, #16
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:78
 800b3c6:	429e      	cmp	r6, r3
 800b3c8:	d00a      	beq.n	800b3e0 <memset+0xa0>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:80
 800b3ca:	601a      	str	r2, [r3, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:81
 800b3cc:	605a      	str	r2, [r3, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:82
 800b3ce:	609a      	str	r2, [r3, #8]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:83
 800b3d0:	60da      	str	r2, [r3, #12]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:80
 800b3d2:	611a      	str	r2, [r3, #16]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:81
 800b3d4:	615a      	str	r2, [r3, #20]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:82
 800b3d6:	619a      	str	r2, [r3, #24]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:83
 800b3d8:	61da      	str	r2, [r3, #28]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/include/string.h:25
 800b3da:	3320      	adds	r3, #32
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:78
 800b3dc:	429e      	cmp	r6, r3
 800b3de:	d1f4      	bne.n	800b3ca <memset+0x8a>
 800b3e0:	230f      	movs	r3, #15
 800b3e2:	401c      	ands	r4, r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:83 (discriminator 1)
 800b3e4:	1c35      	adds	r5, r6, #0
 800b3e6:	1c33      	adds	r3, r6, #0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:87 (discriminator 1)
 800b3e8:	2c03      	cmp	r4, #3
 800b3ea:	d917      	bls.n	800b41c <memset+0xdc>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/include/string.h:25
 800b3ec:	1f26      	subs	r6, r4, #4
 800b3ee:	08b7      	lsrs	r7, r6, #2
 800b3f0:	3701      	adds	r7, #1
 800b3f2:	00be      	lsls	r6, r7, #2
 800b3f4:	19ab      	adds	r3, r5, r6
 800b3f6:	3e04      	subs	r6, #4
 800b3f8:	0777      	lsls	r7, r6, #29
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:89
 800b3fa:	c504      	stmia	r5!, {r2}
 800b3fc:	0ffe      	lsrs	r6, r7, #31
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:87
 800b3fe:	429d      	cmp	r5, r3
 800b400:	d00a      	beq.n	800b418 <memset+0xd8>
 800b402:	2e00      	cmp	r6, #0
 800b404:	d002      	beq.n	800b40c <memset+0xcc>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:89
 800b406:	c504      	stmia	r5!, {r2}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:87
 800b408:	429d      	cmp	r5, r3
 800b40a:	d005      	beq.n	800b418 <memset+0xd8>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:89
 800b40c:	1c2f      	adds	r7, r5, #0
 800b40e:	c704      	stmia	r7!, {r2}
 800b410:	606a      	str	r2, [r5, #4]
 800b412:	1d3d      	adds	r5, r7, #4
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:87
 800b414:	429d      	cmp	r5, r3
 800b416:	d1f9      	bne.n	800b40c <memset+0xcc>
 800b418:	2203      	movs	r2, #3
 800b41a:	4014      	ands	r4, r2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:98 (discriminator 1)
 800b41c:	2c00      	cmp	r4, #0
 800b41e:	d014      	beq.n	800b44a <memset+0x10a>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/include/string.h:25
 800b420:	191c      	adds	r4, r3, r4
 800b422:	43dd      	mvns	r5, r3
 800b424:	b2c9      	uxtb	r1, r1
 800b426:	1966      	adds	r6, r4, r5
 800b428:	2701      	movs	r7, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:99
 800b42a:	7019      	strb	r1, [r3, #0]
 800b42c:	3301      	adds	r3, #1
 800b42e:	403e      	ands	r6, r7
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:98
 800b430:	42a3      	cmp	r3, r4
 800b432:	d00a      	beq.n	800b44a <memset+0x10a>
 800b434:	2e00      	cmp	r6, #0
 800b436:	d003      	beq.n	800b440 <memset+0x100>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:99
 800b438:	7019      	strb	r1, [r3, #0]
 800b43a:	3301      	adds	r3, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:98
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d004      	beq.n	800b44a <memset+0x10a>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:99
 800b440:	7019      	strb	r1, [r3, #0]
 800b442:	7059      	strb	r1, [r3, #1]
 800b444:	3302      	adds	r3, #2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:98
 800b446:	42a3      	cmp	r3, r4
 800b448:	d1fa      	bne.n	800b440 <memset+0x100>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:102
 800b44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:57
 800b44c:	1c03      	adds	r3, r0, #0
 800b44e:	1c14      	adds	r4, r2, #0
 800b450:	e798      	b.n	800b384 <memset+0x44>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/string/memset.c:78
 800b452:	1c1d      	adds	r5, r3, #0
 800b454:	e7ca      	b.n	800b3ec <memset+0xac>
 800b456:	46c0      	nop			; (mov r8, r8)

0800b458 <__call_exitprocs>:
__call_exitprocs():
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:68
 800b458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b45a:	465f      	mov	r7, fp
 800b45c:	4656      	mov	r6, sl
 800b45e:	464d      	mov	r5, r9
 800b460:	4644      	mov	r4, r8
 800b462:	b4f0      	push	{r4, r5, r6, r7}
 800b464:	4b9e      	ldr	r3, [pc, #632]	; (800b6e0 <__call_exitprocs+0x288>)
 800b466:	468b      	mov	fp, r1
 800b468:	6819      	ldr	r1, [r3, #0]
 800b46a:	b08b      	sub	sp, #44	; 0x2c
 800b46c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800b46e:	9009      	str	r0, [sp, #36]	; 0x24
 800b470:	468a      	mov	sl, r1
 800b472:	4690      	mov	r8, r2
 800b474:	465d      	mov	r5, fp
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:85
 800b476:	4644      	mov	r4, r8
 800b478:	2c00      	cmp	r4, #0
 800b47a:	d100      	bne.n	800b47e <__call_exitprocs+0x26>
 800b47c:	e0ac      	b.n	800b5d8 <__call_exitprocs+0x180>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:92
 800b47e:	6863      	ldr	r3, [r4, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:88
 800b480:	2788      	movs	r7, #136	; 0x88
 800b482:	59e7      	ldr	r7, [r4, r7]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:92
 800b484:	1e5e      	subs	r6, r3, #1
 800b486:	d500      	bpl.n	800b48a <__call_exitprocs+0x32>
 800b488:	e0a6      	b.n	800b5d8 <__call_exitprocs+0x180>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:66
 800b48a:	3301      	adds	r3, #1
 800b48c:	00b1      	lsls	r1, r6, #2
 800b48e:	009a      	lsls	r2, r3, #2
 800b490:	2401      	movs	r4, #1
 800b492:	19c8      	adds	r0, r1, r7
 800b494:	4691      	mov	r9, r2
 800b496:	4034      	ands	r4, r6
 800b498:	4683      	mov	fp, r0
 800b49a:	44c1      	add	r9, r8
 800b49c:	9408      	str	r4, [sp, #32]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:99
 800b49e:	2d00      	cmp	r5, #0
 800b4a0:	d100      	bne.n	800b4a4 <__call_exitprocs+0x4c>
 800b4a2:	e0b1      	b.n	800b608 <__call_exitprocs+0x1b0>
 800b4a4:	2f00      	cmp	r7, #0
 800b4a6:	d005      	beq.n	800b4b4 <__call_exitprocs+0x5c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:66
 800b4a8:	1c03      	adds	r3, r0, #0
 800b4aa:	3380      	adds	r3, #128	; 0x80
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:99
 800b4ac:	6819      	ldr	r1, [r3, #0]
 800b4ae:	42a9      	cmp	r1, r5
 800b4b0:	d100      	bne.n	800b4b4 <__call_exitprocs+0x5c>
 800b4b2:	e0a9      	b.n	800b608 <__call_exitprocs+0x1b0>
 800b4b4:	2004      	movs	r0, #4
 800b4b6:	465c      	mov	r4, fp
 800b4b8:	4241      	negs	r1, r0
 800b4ba:	3c04      	subs	r4, #4
 800b4bc:	4489      	add	r9, r1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:92
 800b4be:	3e01      	subs	r6, #1
 800b4c0:	d200      	bcs.n	800b4c4 <__call_exitprocs+0x6c>
 800b4c2:	e089      	b.n	800b5d8 <__call_exitprocs+0x180>
 800b4c4:	9b08      	ldr	r3, [sp, #32]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d02b      	beq.n	800b522 <__call_exitprocs+0xca>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:99
 800b4ca:	2d00      	cmp	r5, #0
 800b4cc:	d100      	bne.n	800b4d0 <__call_exitprocs+0x78>
 800b4ce:	e0bf      	b.n	800b650 <__call_exitprocs+0x1f8>
 800b4d0:	2f00      	cmp	r7, #0
 800b4d2:	d004      	beq.n	800b4de <__call_exitprocs+0x86>
 800b4d4:	465a      	mov	r2, fp
 800b4d6:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 800b4d8:	42a8      	cmp	r0, r5
 800b4da:	d100      	bne.n	800b4de <__call_exitprocs+0x86>
 800b4dc:	e0b8      	b.n	800b650 <__call_exitprocs+0x1f8>
 800b4de:	2104      	movs	r1, #4
 800b4e0:	424b      	negs	r3, r1
 800b4e2:	3c04      	subs	r4, #4
 800b4e4:	4499      	add	r9, r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:92
 800b4e6:	3e01      	subs	r6, #1
 800b4e8:	d21b      	bcs.n	800b522 <__call_exitprocs+0xca>
 800b4ea:	e075      	b.n	800b5d8 <__call_exitprocs+0x180>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:99 (discriminator 1)
 800b4ec:	2f00      	cmp	r7, #0
 800b4ee:	d004      	beq.n	800b4fa <__call_exitprocs+0xa2>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:66 (discriminator 1)
 800b4f0:	1c20      	adds	r0, r4, #0
 800b4f2:	3080      	adds	r0, #128	; 0x80
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:99 (discriminator 1)
 800b4f4:	6802      	ldr	r2, [r0, #0]
 800b4f6:	42aa      	cmp	r2, r5
 800b4f8:	d015      	beq.n	800b526 <__call_exitprocs+0xce>
 800b4fa:	2304      	movs	r3, #4
 800b4fc:	1f20      	subs	r0, r4, #4
 800b4fe:	425a      	negs	r2, r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:92
 800b500:	3e01      	subs	r6, #1
 800b502:	4683      	mov	fp, r0
 800b504:	4491      	add	r9, r2
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:99
 800b506:	2d00      	cmp	r5, #0
 800b508:	d038      	beq.n	800b57c <__call_exitprocs+0x124>
 800b50a:	2f00      	cmp	r7, #0
 800b50c:	d002      	beq.n	800b514 <__call_exitprocs+0xbc>
 800b50e:	6fe4      	ldr	r4, [r4, #124]	; 0x7c
 800b510:	42ac      	cmp	r4, r5
 800b512:	d033      	beq.n	800b57c <__call_exitprocs+0x124>
 800b514:	2104      	movs	r1, #4
 800b516:	465c      	mov	r4, fp
 800b518:	424b      	negs	r3, r1
 800b51a:	3c04      	subs	r4, #4
 800b51c:	4499      	add	r9, r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:92
 800b51e:	3e01      	subs	r6, #1
 800b520:	d35a      	bcc.n	800b5d8 <__call_exitprocs+0x180>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:99
 800b522:	2d00      	cmp	r5, #0
 800b524:	d1e2      	bne.n	800b4ec <__call_exitprocs+0x94>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b526:	4640      	mov	r0, r8
 800b528:	6842      	ldr	r2, [r0, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:104
 800b52a:	4649      	mov	r1, r9
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b52c:	3a01      	subs	r2, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:104
 800b52e:	680b      	ldr	r3, [r1, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b530:	42b2      	cmp	r2, r6
 800b532:	d05c      	beq.n	800b5ee <__call_exitprocs+0x196>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:108
 800b534:	2000      	movs	r0, #0
 800b536:	4649      	mov	r1, r9
 800b538:	6008      	str	r0, [r1, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:111
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0dd      	beq.n	800b4fa <__call_exitprocs+0xa2>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:114
 800b53e:	4642      	mov	r2, r8
 800b540:	6850      	ldr	r0, [r2, #4]
 800b542:	4683      	mov	fp, r0
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b544:	2f00      	cmp	r7, #0
 800b546:	d04e      	beq.n	800b5e6 <__call_exitprocs+0x18e>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117 (discriminator 1)
 800b548:	2180      	movs	r1, #128	; 0x80
 800b54a:	0048      	lsls	r0, r1, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:96 (discriminator 1)
 800b54c:	2201      	movs	r2, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117 (discriminator 1)
 800b54e:	5839      	ldr	r1, [r7, r0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:96 (discriminator 1)
 800b550:	40b2      	lsls	r2, r6
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117 (discriminator 1)
 800b552:	4211      	tst	r1, r2
 800b554:	d047      	beq.n	800b5e6 <__call_exitprocs+0x18e>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:119
 800b556:	2082      	movs	r0, #130	; 0x82
 800b558:	0041      	lsls	r1, r0, #1
 800b55a:	5878      	ldr	r0, [r7, r1]
 800b55c:	4210      	tst	r0, r2
 800b55e:	d14b      	bne.n	800b5f8 <__call_exitprocs+0x1a0>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:120
 800b560:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b562:	6821      	ldr	r1, [r4, #0]
 800b564:	4798      	blx	r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:127
 800b566:	4643      	mov	r3, r8
 800b568:	685a      	ldr	r2, [r3, #4]
 800b56a:	455a      	cmp	r2, fp
 800b56c:	d000      	beq.n	800b570 <__call_exitprocs+0x118>
 800b56e:	e094      	b.n	800b69a <__call_exitprocs+0x242>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:127 (discriminator 1)
 800b570:	4651      	mov	r1, sl
 800b572:	6c88      	ldr	r0, [r1, #72]	; 0x48
 800b574:	4540      	cmp	r0, r8
 800b576:	d0c0      	beq.n	800b4fa <__call_exitprocs+0xa2>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:127
 800b578:	4680      	mov	r8, r0
 800b57a:	e77c      	b.n	800b476 <__call_exitprocs+0x1e>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b57c:	4640      	mov	r0, r8
 800b57e:	6842      	ldr	r2, [r0, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:104
 800b580:	4649      	mov	r1, r9
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b582:	3a01      	subs	r2, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:104
 800b584:	680b      	ldr	r3, [r1, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b586:	42b2      	cmp	r2, r6
 800b588:	d033      	beq.n	800b5f2 <__call_exitprocs+0x19a>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:108
 800b58a:	2400      	movs	r4, #0
 800b58c:	4649      	mov	r1, r9
 800b58e:	600c      	str	r4, [r1, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:111
 800b590:	2b00      	cmp	r3, #0
 800b592:	d0bf      	beq.n	800b514 <__call_exitprocs+0xbc>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:114
 800b594:	4642      	mov	r2, r8
 800b596:	6854      	ldr	r4, [r2, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b598:	2f00      	cmp	r7, #0
 800b59a:	d026      	beq.n	800b5ea <__call_exitprocs+0x192>
 800b59c:	2180      	movs	r1, #128	; 0x80
 800b59e:	004a      	lsls	r2, r1, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:96
 800b5a0:	2001      	movs	r0, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b5a2:	58b9      	ldr	r1, [r7, r2]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:96
 800b5a4:	40b0      	lsls	r0, r6
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b5a6:	4201      	tst	r1, r0
 800b5a8:	d01f      	beq.n	800b5ea <__call_exitprocs+0x192>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:119
 800b5aa:	2282      	movs	r2, #130	; 0x82
 800b5ac:	0051      	lsls	r1, r2, #1
 800b5ae:	587a      	ldr	r2, [r7, r1]
 800b5b0:	4202      	tst	r2, r0
 800b5b2:	d024      	beq.n	800b5fe <__call_exitprocs+0x1a6>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:122
 800b5b4:	4658      	mov	r0, fp
 800b5b6:	6800      	ldr	r0, [r0, #0]
 800b5b8:	4798      	blx	r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:127
 800b5ba:	4643      	mov	r3, r8
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	42a2      	cmp	r2, r4
 800b5c0:	d16b      	bne.n	800b69a <__call_exitprocs+0x242>
 800b5c2:	4654      	mov	r4, sl
 800b5c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b5c6:	4540      	cmp	r0, r8
 800b5c8:	d1d6      	bne.n	800b578 <__call_exitprocs+0x120>
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	465c      	mov	r4, fp
 800b5ce:	424b      	negs	r3, r1
 800b5d0:	3c04      	subs	r4, #4
 800b5d2:	4499      	add	r9, r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:92
 800b5d4:	3e01      	subs	r6, #1
 800b5d6:	d2a4      	bcs.n	800b522 <__call_exitprocs+0xca>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:163
 800b5d8:	b00b      	add	sp, #44	; 0x2c
 800b5da:	bc3c      	pop	{r2, r3, r4, r5}
 800b5dc:	4690      	mov	r8, r2
 800b5de:	4699      	mov	r9, r3
 800b5e0:	46a2      	mov	sl, r4
 800b5e2:	46ab      	mov	fp, r5
 800b5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:118
 800b5e6:	4798      	blx	r3
 800b5e8:	e7bd      	b.n	800b566 <__call_exitprocs+0x10e>
 800b5ea:	4798      	blx	r3
 800b5ec:	e7e5      	b.n	800b5ba <__call_exitprocs+0x162>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:106
 800b5ee:	6046      	str	r6, [r0, #4]
 800b5f0:	e7a3      	b.n	800b53a <__call_exitprocs+0xe2>
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	6046      	str	r6, [r0, #4]
 800b5f6:	e7cb      	b.n	800b590 <__call_exitprocs+0x138>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:122
 800b5f8:	6820      	ldr	r0, [r4, #0]
 800b5fa:	4798      	blx	r3
 800b5fc:	e7b3      	b.n	800b566 <__call_exitprocs+0x10e>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:120
 800b5fe:	4659      	mov	r1, fp
 800b600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b602:	6809      	ldr	r1, [r1, #0]
 800b604:	4798      	blx	r3
 800b606:	e7d8      	b.n	800b5ba <__call_exitprocs+0x162>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b608:	4642      	mov	r2, r8
 800b60a:	6854      	ldr	r4, [r2, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:104
 800b60c:	4648      	mov	r0, r9
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b60e:	3c01      	subs	r4, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:104
 800b610:	6803      	ldr	r3, [r0, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b612:	42b4      	cmp	r4, r6
 800b614:	d056      	beq.n	800b6c4 <__call_exitprocs+0x26c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:108
 800b616:	2000      	movs	r0, #0
 800b618:	4649      	mov	r1, r9
 800b61a:	6008      	str	r0, [r1, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:111
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d100      	bne.n	800b622 <__call_exitprocs+0x1ca>
 800b620:	e748      	b.n	800b4b4 <__call_exitprocs+0x5c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:114
 800b622:	4644      	mov	r4, r8
 800b624:	6864      	ldr	r4, [r4, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b626:	2f00      	cmp	r7, #0
 800b628:	d006      	beq.n	800b638 <__call_exitprocs+0x1e0>
 800b62a:	2180      	movs	r1, #128	; 0x80
 800b62c:	004a      	lsls	r2, r1, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:96
 800b62e:	2001      	movs	r0, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b630:	58b9      	ldr	r1, [r7, r2]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:96
 800b632:	40b0      	lsls	r0, r6
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b634:	4201      	tst	r1, r0
 800b636:	d134      	bne.n	800b6a2 <__call_exitprocs+0x24a>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:118
 800b638:	4798      	blx	r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:127
 800b63a:	4643      	mov	r3, r8
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	42a2      	cmp	r2, r4
 800b640:	d12b      	bne.n	800b69a <__call_exitprocs+0x242>
 800b642:	4654      	mov	r4, sl
 800b644:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b646:	4540      	cmp	r0, r8
 800b648:	d100      	bne.n	800b64c <__call_exitprocs+0x1f4>
 800b64a:	e733      	b.n	800b4b4 <__call_exitprocs+0x5c>
 800b64c:	4680      	mov	r8, r0
 800b64e:	e712      	b.n	800b476 <__call_exitprocs+0x1e>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b650:	4642      	mov	r2, r8
 800b652:	6850      	ldr	r0, [r2, #4]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:104
 800b654:	4649      	mov	r1, r9
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b656:	3801      	subs	r0, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:104
 800b658:	680b      	ldr	r3, [r1, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:105
 800b65a:	42b0      	cmp	r0, r6
 800b65c:	d035      	beq.n	800b6ca <__call_exitprocs+0x272>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:108
 800b65e:	2200      	movs	r2, #0
 800b660:	4649      	mov	r1, r9
 800b662:	600a      	str	r2, [r1, #0]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:111
 800b664:	2b00      	cmp	r3, #0
 800b666:	d100      	bne.n	800b66a <__call_exitprocs+0x212>
 800b668:	e739      	b.n	800b4de <__call_exitprocs+0x86>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:114
 800b66a:	4642      	mov	r2, r8
 800b66c:	6851      	ldr	r1, [r2, #4]
 800b66e:	468b      	mov	fp, r1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b670:	2f00      	cmp	r7, #0
 800b672:	d006      	beq.n	800b682 <__call_exitprocs+0x22a>
 800b674:	2280      	movs	r2, #128	; 0x80
 800b676:	0051      	lsls	r1, r2, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:96
 800b678:	2001      	movs	r0, #1
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b67a:	587a      	ldr	r2, [r7, r1]
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:96
 800b67c:	40b0      	lsls	r0, r6
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:117
 800b67e:	4202      	tst	r2, r0
 800b680:	d118      	bne.n	800b6b4 <__call_exitprocs+0x25c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:118
 800b682:	4798      	blx	r3
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:127
 800b684:	4643      	mov	r3, r8
 800b686:	6858      	ldr	r0, [r3, #4]
 800b688:	4558      	cmp	r0, fp
 800b68a:	d106      	bne.n	800b69a <__call_exitprocs+0x242>
 800b68c:	4652      	mov	r2, sl
 800b68e:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800b690:	4540      	cmp	r0, r8
 800b692:	d100      	bne.n	800b696 <__call_exitprocs+0x23e>
 800b694:	e723      	b.n	800b4de <__call_exitprocs+0x86>
 800b696:	4680      	mov	r8, r0
 800b698:	e6ed      	b.n	800b476 <__call_exitprocs+0x1e>
 800b69a:	4657      	mov	r7, sl
 800b69c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800b69e:	46b0      	mov	r8, r6
 800b6a0:	e6e9      	b.n	800b476 <__call_exitprocs+0x1e>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:119
 800b6a2:	2282      	movs	r2, #130	; 0x82
 800b6a4:	0051      	lsls	r1, r2, #1
 800b6a6:	587a      	ldr	r2, [r7, r1]
 800b6a8:	4202      	tst	r2, r0
 800b6aa:	d010      	beq.n	800b6ce <__call_exitprocs+0x276>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:122
 800b6ac:	4658      	mov	r0, fp
 800b6ae:	6800      	ldr	r0, [r0, #0]
 800b6b0:	4798      	blx	r3
 800b6b2:	e7c2      	b.n	800b63a <__call_exitprocs+0x1e2>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:119
 800b6b4:	2182      	movs	r1, #130	; 0x82
 800b6b6:	004a      	lsls	r2, r1, #1
 800b6b8:	58b9      	ldr	r1, [r7, r2]
 800b6ba:	4201      	tst	r1, r0
 800b6bc:	d00c      	beq.n	800b6d8 <__call_exitprocs+0x280>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:122
 800b6be:	6820      	ldr	r0, [r4, #0]
 800b6c0:	4798      	blx	r3
 800b6c2:	e7df      	b.n	800b684 <__call_exitprocs+0x22c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:106
 800b6c4:	4642      	mov	r2, r8
 800b6c6:	6056      	str	r6, [r2, #4]
 800b6c8:	e7a8      	b.n	800b61c <__call_exitprocs+0x1c4>
 800b6ca:	6056      	str	r6, [r2, #4]
 800b6cc:	e7ca      	b.n	800b664 <__call_exitprocs+0x20c>
/home/freddie/bleeding-edge-toolchain/src/newlib/newlib/libc/stdlib/__call_atexit.c:120
 800b6ce:	4659      	mov	r1, fp
 800b6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6d2:	6809      	ldr	r1, [r1, #0]
 800b6d4:	4798      	blx	r3
 800b6d6:	e7b0      	b.n	800b63a <__call_exitprocs+0x1e2>
 800b6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6da:	6821      	ldr	r1, [r4, #0]
 800b6dc:	4798      	blx	r3
 800b6de:	e7d1      	b.n	800b684 <__call_exitprocs+0x22c>
 800b6e0:	0800b810 	.word	0x0800b810

0800b6e4 <GPIO_PIN>:
$d():
 800b6e4:	01000200                                ....

0800b6e8 <GPIO_CLK>:
 800b6e8:	00080000 00080000                       ........

0800b6f0 <BUTTON_PIN>:
 800b6f0:	00000001                                ....

0800b6f4 <BUTTON_CLK>:
 800b6f4:	00020000                                ....

0800b6f8 <BUTTON_EXTI_LINE>:
 800b6f8:	00000001                                ....

0800b6fc <BUTTON_PORT_SOURCE>:
 800b6fc:	00000000                                ....

0800b700 <BUTTON_PIN_SOURCE>:
 800b700:	00000000                                ....

0800b704 <BUTTON_IRQn>:
 800b704:	00000005 08009ea8 08009e06 08009ea8     ................
 800b714:	08009e16 08009ea8 08009e1e 08009ea8     ................
 800b724:	08009e06 08009ea8 08009e26 08009ea8     ........&.......
 800b734:	08009e40 08009eb4 08009eb4 08009e7a     @...........z...
 800b744:	08009eb4 08009e82 08009eb4 08009e98     ................
 800b754:	08009eb4 08009e7a 08009eb4 08009ea0     ....z...........
 800b764:	08009ff8 0800a0c0 0800a01a 0800a03c     ............<...
 800b774:	0800a0c0 0800a0c0 0800a05e 0800a080     ........^.......
 800b784:	0800a0a2 0800a170 0800a3d2 0800a1d2     ....p...........
 800b794:	0800a22c 0800a3d2 0800a3d2 0800a286     ,...............
 800b7a4:	0800a31c 0800a378 0800a664 0800a672     ....x...d...r...
 800b7b4:	0800a680 0800a68e 0800a69c 0800a6aa     ................
 800b7c4:	0800a854 0800a89e 0800a862 0800a86e     T.......b...n...
 800b7d4:	0800a89e 0800a89e 0800a87a 0800a886     ........z.......
 800b7e4:	0800a892 0800a94a 0800a9f4 0800a968     ....J.......h...
 800b7f4:	0800a984 0800a9f4 0800a9f4 0800a9a0     ................
 800b804:	0800a9bc 0800a9d8 00000043              ........C...

0800b810 <_global_impure_ptr>:
 800b810:	20000180                                ... 

0800b814 <_init>:
$t():
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	46c0      	nop			; (mov r8, r8)
 800b818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b81a:	bc08      	pop	{r3}
 800b81c:	469e      	mov	lr, r3
 800b81e:	4770      	bx	lr

0800b820 <_fini>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	46c0      	nop			; (mov r8, r8)
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr
